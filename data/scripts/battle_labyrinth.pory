mart Shop_Filler {
	ITEM_POKE_BALL
}

script EventScript_Shop_Portentia {
	lock
	faceplayer
	if (flag(FLAG_PORTENTIA_INTRO) == false) {
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: Hello, lovely. Your name is… {PLAYER}?\pI see! Well then, {PLAYER}, would you care to try some of my special brews?\pAhem! I realize I should introduce myself.\p{COLOR BLUE}Portentia{COLOR DARK_GRAY}: I am Portentia, and I craft the finest medicines for your Pokémon.\pMy skills are unparalleled and my prices can't be beat."), MSGBOX_DEFAULT)
		setflag(FLAG_PORTENTIA_INTRO)
	}
	if ((var(VAR_ZONE) > 20) && (flag(FLAG_PORTENTIA_SUPER_POTION_INTRO) == false)) {
		msgbox(format("{COLOR BLUE}Portentia{COLOR DARK_GRAY}: It's good to see you again. I have a new discount option available in my shop.\pIf you buy 10 Potions, you will receive a free Super Potion.\pI hope that is a most compelling deal."), MSGBOX_DEFAULT)
		setflag(FLAG_PORTENTIA_SUPER_POTION_INTRO)
	}
	message(format("{COLOR BLUE}Portentia{COLOR DARK_GRAY}: Welcome, {PLAYER}. What are you looking for?"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
			pokemart(Shop_Medicine_1)
		case 4:
		case 5:
		case 6:
			pokemart(Shop_Medicine_2)
		case 7:
		case 9:
		case 10:
			pokemart(Shop_Medicine_3)
		case 11:
		case 12:
		case 13:
		case 15:
			pokemart(Shop_Medicine_4)
		case 16:
		case 17:
		case 18:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
			pokemart(Shop_Filler)
	}
	msgbox("{COLOR BLUE}Portentia{COLOR DARK_GRAY}: Travel safe.", MSGBOX_DEFAULT)
	release
}

mart Shop_Medicine_1 {
	ITEM_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
}

mart Shop_Medicine_2 {
	ITEM_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
}

mart Shop_Medicine_3 {
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
}

mart Shop_Medicine_4 {
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_ETHER
}

script EventScript_Shop_Tim {
	lock
	faceplayer
	if (flag(FLAG_TIM_INTRO) == false) {
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: Hey there! The name's Tim Johnson.\p{COLOR BLUE}Tim{COLOR DARK_GRAY}: I run this store, sponsored by Pokémart Incorporated.\pYou can find all variants of Pokéballs for your travels."), MSGBOX_DEFAULT)
		setflag(FLAG_TIM_INTRO)
	}
	message(format("{COLOR BLUE}Tim{COLOR DARK_GRAY}: Welcome to Tim's. Can I get you anything?"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
			pokemart(Shop_Pokeballs_1)
		case 4:
		case 5:
			pokemart(Shop_Pokeballs_2)
		case 6:
		case 7:
			pokemart(Shop_Pokeballs_3)
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 15:
			pokemart(Shop_Pokeballs_4)
		case 16:
		case 17:
		case 18:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
			pokemart(Shop_Filler)
	}
	msgbox("{COLOR BLUE}Tim{COLOR DARK_GRAY}: Have a nice day!", MSGBOX_DEFAULT)
	release
}

mart Shop_Pokeballs_1 {
	ITEM_POKE_BALL
}

mart Shop_Pokeballs_2 {
	ITEM_POKE_BALL
	ITEM_HEAL_BALL
}

mart Shop_Pokeballs_3 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_HEAL_BALL
	ITEM_NEST_BALL
	ITEM_NET_BALL
}

mart Shop_Pokeballs_4 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_HEAL_BALL
	ITEM_NEST_BALL
	ITEM_NET_BALL
	ITEM_DIVE_BALL
	ITEM_REPEAT_BALL
}

script EventScript_Shop_Varrick {
	lock
	faceplayer
	if (flag(FLAG_VARRICK_INTRO) == false) {
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: Wowza! Yeetastic! Blamo!\p"
				"My name is Varrick,\n"
				"entrepreneur extraordinaire!\p"
				"{COLOR BLUE}Varrick{COLOR DARK_GRAY}: I pitched this idea a couple year's back, and now it's become a reality!\p"
				"All the items you can or can't find in the world, you'll find here!\p"
				"Fantastic evolution stones!\p"
				"Powerful held items!\p"
				"Trinkets and bobs!\p"
				"Witness the finest item collection you've ever seen!\p"
				"Please, enjoy my shop!"), MSGBOX_DEFAULT)
		setflag(FLAG_VARRICK_INTRO)
	}
	message(format("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: Salutations! Welcome to Varrick's Extravagant Emporium!"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
			pokemart(Shop_Items_1)
		case 4:
		case 5:
		case 6:
			pokemart(Shop_Items_2)
		case 7:
		case 9:
		case 10:
			pokemart(Shop_Items_3)
		case 11:
		case 12:
			pokemart(Shop_Items_4)
		case 13:
		case 15:
			pokemart(Shop_Items_5)
		case 16:
		case 17:
		case 18:
		case 20:
			pokemart(Shop_Unique_Varrick_16to20)
		case 21:
		case 22:
		case 23:
			pokemart(Shop_Unique_Varrick_21to23)
		case 24:
		case 25:
			pokemart(Shop_Unique_Varrick_24to25)
		case 26:
			if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_EFFORTLESS) == true)) {
				pokemart(Shop_Unique_Varrick_26to30_Brutal)
			} else {
				pokemart(Shop_Unique_Varrick_26to30)
			}
	}
	msgbox("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: A big thank you from me!", MSGBOX_DEFAULT)
	release
}

mart Shop_Items_1 {
	ITEM_REPEL
}

mart Shop_Items_2 {
	ITEM_REPEL
	ITEM_PINK_SCARF
	ITEM_SURPRISE_MULCH
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_REPEL
}

mart Shop_Items_3 {
	ITEM_REPEL
	ITEM_WHIPPED_DREAM
	ITEM_SACHET
	ITEM_PINK_SCARF
	ITEM_SURPRISE_MULCH
	ITEM_METRONOME
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SILK_SCARF
	ITEM_MIRACLE_SEED
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_NEVER_MELT_ICE
}

mart Shop_Items_4 {
	ITEM_REPEL
	ITEM_NORMAL_GEM
	ITEM_FIRE_GEM
	ITEM_WATER_GEM
	ITEM_ELECTRIC_GEM
	ITEM_GRASS_GEM
	ITEM_ICE_GEM
	ITEM_FIGHTING_GEM
	ITEM_POISON_GEM
	ITEM_GROUND_GEM
	ITEM_FLYING_GEM
	ITEM_PSYCHIC_GEM
	ITEM_BUG_GEM
	ITEM_ROCK_GEM
	ITEM_GHOST_GEM
	ITEM_DRAGON_GEM
	ITEM_DARK_GEM
	ITEM_STEEL_GEM
	ITEM_FAIRY_GEM
	ITEM_WHIPPED_DREAM
	ITEM_SACHET
	ITEM_PINK_SCARF
	ITEM_SURPRISE_MULCH
	ITEM_EVIOLITE
	ITEM_METRONOME
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SILK_SCARF
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_MAGNET
	ITEM_BLACK_BELT
	ITEM_SOFT_SAND
	ITEM_SHARP_BEAK
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_MIRACLE_SEED
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_NEVER_MELT_ICE
}

mart Shop_Items_5 {
	ITEM_REPEL
	ITEM_FIRE_STONE
	ITEM_WATER_STONE
	ITEM_THUNDER_STONE
	ITEM_LEAF_STONE
	ITEM_MOON_STONE
	ITEM_SUN_STONE
	ITEM_NORMAL_GEM
	ITEM_FIRE_GEM
	ITEM_WATER_GEM
	ITEM_ELECTRIC_GEM
	ITEM_GRASS_GEM
	ITEM_ICE_GEM
	ITEM_FIGHTING_GEM
	ITEM_POISON_GEM
	ITEM_GROUND_GEM
	ITEM_FLYING_GEM
	ITEM_PSYCHIC_GEM
	ITEM_BUG_GEM
	ITEM_ROCK_GEM
	ITEM_GHOST_GEM
	ITEM_DRAGON_GEM
	ITEM_DARK_GEM
	ITEM_STEEL_GEM
	ITEM_FAIRY_GEM
	ITEM_WHIPPED_DREAM
	ITEM_SACHET
	ITEM_PINK_SCARF
	ITEM_SURPRISE_MULCH
	ITEM_EVIOLITE
	ITEM_METRONOME
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SILK_SCARF
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_MAGNET
	ITEM_BLACK_BELT
	ITEM_SOFT_SAND
	ITEM_SHARP_BEAK
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_MIRACLE_SEED
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_SPELL_TAG
	ITEM_NEVER_MELT_ICE
	ITEM_DRAGON_FANG
	ITEM_FAIRY_FEATHER
}

mart Shop_Unique_Varrick_16to20 {
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SILK_SCARF
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_MAGNET
	ITEM_MIRACLE_SEED
	ITEM_NEVER_MELT_ICE
	ITEM_BLACK_BELT
	ITEM_POISON_BARB
	ITEM_SOFT_SAND
	ITEM_SHARP_BEAK
	ITEM_TWISTED_SPOON
	ITEM_SILVER_POWDER
	ITEM_HARD_STONE
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_BLACK_GLASSES
	ITEM_METAL_COAT
	ITEM_EVIOLITE
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_ROCKY_HELMET
	ITEM_HEAVY_DUTY_BOOTS
	ITEM_SAFETY_GOGGLES
	ITEM_UTILITY_UMBRELLA
}

mart Shop_Unique_Varrick_21to23 {
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_MIRACLE_SEED
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_SILK_SCARF
	ITEM_SHARP_BEAK
	ITEM_MAGNET
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_SOFT_SAND
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_BLACK_BELT
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_NEVER_MELT_ICE
	ITEM_METAL_COAT
	ITEM_LIGHT_BALL
	ITEM_LEEK
	ITEM_THICK_CLUB
	ITEM_LUCKY_PUNCH
}

mart Shop_Unique_Varrick_24to25 {
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_MIRACLE_SEED
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_SILK_SCARF
	ITEM_SHARP_BEAK
	ITEM_MAGNET
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_SOFT_SAND
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_BLACK_BELT
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_NEVER_MELT_ICE
	ITEM_METAL_COAT
}

mart Shop_Unique_Varrick_26to30 {
	ITEM_EXP_SHARE
	ITEM_MACHO_BRACE
	ITEM_POWER_WEIGHT
	ITEM_POWER_BRACER
	ITEM_POWER_BELT
	ITEM_POWER_LENS
	ITEM_POWER_BAND
	ITEM_POWER_ANKLET
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_NORMAL_GEM
	ITEM_FIRE_GEM
	ITEM_WATER_GEM
	ITEM_ELECTRIC_GEM
	ITEM_GRASS_GEM
	ITEM_ICE_GEM
	ITEM_FIGHTING_GEM
	ITEM_POISON_GEM
	ITEM_GROUND_GEM
	ITEM_FLYING_GEM
	ITEM_PSYCHIC_GEM
	ITEM_BUG_GEM
	ITEM_ROCK_GEM
	ITEM_GHOST_GEM
	ITEM_DRAGON_GEM
	ITEM_DARK_GEM
	ITEM_STEEL_GEM
	ITEM_FAIRY_GEM
	ITEM_EVIOLITE
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_MIRACLE_SEED
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_SILK_SCARF
	ITEM_SHARP_BEAK
	ITEM_MAGNET
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_SOFT_SAND
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_BLACK_BELT
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_NEVER_MELT_ICE
	ITEM_METAL_COAT
}

mart Shop_Unique_Varrick_26to30_Brutal {
	ITEM_EXP_SHARE
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_NORMAL_GEM
	ITEM_FIRE_GEM
	ITEM_WATER_GEM
	ITEM_ELECTRIC_GEM
	ITEM_GRASS_GEM
	ITEM_ICE_GEM
	ITEM_FIGHTING_GEM
	ITEM_POISON_GEM
	ITEM_GROUND_GEM
	ITEM_FLYING_GEM
	ITEM_PSYCHIC_GEM
	ITEM_BUG_GEM
	ITEM_ROCK_GEM
	ITEM_GHOST_GEM
	ITEM_DRAGON_GEM
	ITEM_DARK_GEM
	ITEM_STEEL_GEM
	ITEM_FAIRY_GEM
	ITEM_EVIOLITE
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_MIRACLE_SEED
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_SILK_SCARF
	ITEM_SHARP_BEAK
	ITEM_MAGNET
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_SOFT_SAND
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_BLACK_BELT
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_NEVER_MELT_ICE
	ITEM_METAL_COAT
}

script EventScript_Shop_Julia {
	lock
	faceplayer
	if (flag(FLAG_JULIA_INTRO) == false) {
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: Hi there! I'm Julia.\p"
				"I sell delicious berries for your Pokémon.\p"
				"They smell and taste amazing, and they're healthy too!"), MSGBOX_DEFAULT)
		setflag(FLAG_JULIA_INTRO)
	}
	message(format("{COLOR BLUE}Julia{COLOR DARK_GRAY}: Greetings! Want to get some Berries for your Pokémon?"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
			pokemart(Shop_Berries_1)
		case 4:
		case 5:
		case 6:
		case 7:
			pokemart(Shop_Berries_2)
		case 9:
		case 10:
			pokemart(Shop_Berries_3)
		case 11:
		case 12:
		case 13:
		case 15:
		case 16:
		case 17:
		case 18:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
			pokemart(Shop_Filler)
	}
	msgbox("{COLOR BLUE}Julia{COLOR DARK_GRAY}: Eat well, and stay healthy!", MSGBOX_DEFAULT)
	release
}

mart Shop_Berries_1 {
	ITEM_ORAN_BERRY
}

mart Shop_Berries_2 {
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
}

mart Shop_Berries_3 {
	ITEM_ORAN_BERRY
	ITEM_SITRUS_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
}

script EventScript_Shop_Marie {
	lock
	faceplayer
	if (flag(FLAG_MARIE_INTRO) == false) {
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: Hi. My name is Marie, and welcome to my shop.\p"
				"You're probably wondering what this shop is even for.\p"
				"Let me explain: lots of trainers leave extra eggs at the Daycare.\p"
				"Some trainers mix up which egg has which species of Pokémon.\p"
				"It's my job to help match these eggs with the right trainer.\p"
				"Maybe you'll be able to make your next friend here!"), MSGBOX_DEFAULT)
		setflag(FLAG_MARIE_INTRO)
	}
	call(EventScript_Shop_Marie_MainMenu)
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Au revoir!"))
	release
}

script EventScript_Shop_Marie_MainMenu {
	message(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Hi. Are you ready to meet your next friend?"))
	waitmessage
	dynmultichoice(0, 0, FALSE, 3, 0, DYN_MULTICHOICE_CB_NONE, "Eggs", "Info", "Exit")
	switch(var(VAR_RESULT)) {
		case 0:
			if (flag(FLAG_SETTINGS_NUZLOCKE) && flag(FLAG_MARIE_NUZLOCKE_RECEIVED))
			{
				msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You've already received an Egg from our services. On Nuzlocke mode, you can only get one Egg."))
				return
			}
			if (var(VAR_ZONE) <= 5) {
				msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: I actually don't have any Eggs at the moment.\pCome back again another time!"), MSGBOX_DEFAULT)
				return
			}
			message(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Which type of Egg would you like?"))
			waitmessage
			if (var(VAR_ZONE) > 5) {
				dynmultipush("Elemental Monkey - ¥1000", 0)
			}
			if (var(VAR_ZONE) > 10) {
				dynmultipush("Regional Form - ¥3000", 1)
			}
			if (var(VAR_ZONE) > 10) {
				dynmultipush("Baby Pokémon 1 - ¥3000", 2)
			}
			if (var(VAR_ZONE) > 25) {
				dynmultipush("Baby Pokémon 2 - ¥10000", 3)
			}
			if (var(VAR_ZONE) > 30) {
				dynmultipush("Kanto Starter - ¥10000", 4)
				dynmultipush("Johto Starter - ¥10000", 5)
				dynmultipush("Hoenn Starter - ¥10000", 6)
				dynmultipush("Sinnoh Starter - ¥10000", 7)
				dynmultipush("Unova Starter - ¥10000", 8)
				dynmultipush("Kalos Starter - ¥10000", 9)
				dynmultipush("Alola Starter - ¥10000", 10)
				dynmultipush("Galar Starter - ¥10000", 11)
				dynmultipush("Paldea Starter - ¥10000", 12)
			}
			dynmultipush("Back", 13)
			dynmultistack(21, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
			switch (var(VAR_RESULT)) {
				case 0:
					showmoneybox(0, 0)
					msgbox(format("An egg that contains Pansage, Pansear, or Panpour will cost ¥1000."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						call(EventScript_Shop_Marie_ElementalMonkeyEgg)
					}
					hidemoneybox
					return
				case 1:
					showmoneybox(0, 0)
					msgbox(format("An egg that contains Alolan Meowth, Galarian Zigzagoon, Hisuian Voltorb, or Paldean Wooper will cost ¥3000."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						call(EventScript_Shop_Marie_RegionalFormEgg)
					}
					hidemoneybox
					return
				case 2:
					showmoneybox(0, 0)
					msgbox(format("An egg that contains Smoochum, Elekid, or Magby will cost ¥3000."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						call(EventScript_Shop_Marie_BabyPokemon1Egg)
					}
					hidemoneybox
					return
				case 3:
					showmoneybox(0, 0)
					msgbox(format("An egg that contains Happiny, Togepi, Munchlax, or Riolu will cost ¥10000."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						call(EventScript_Shop_Marie_BabyPokemon2Egg)
					}
					hidemoneybox
					return
				case 13:
				case MULTI_B_PRESSED:
					call(EventScript_Shop_Marie_MainMenu)
			}
		case 1:
			msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here at Marie's Egg Delivery Service, we pair trainers with mixed up Pokémon Eggs.\pEach set of eggs contains a limited number of possible species of Pokémon.\pYou'll know the possibilities of what the egg will hatch into, but you won't know what Pokémon you have until it hatches."), MSGBOX_DEFAULT)
			if (flag(FLAG_SETTINGS_NUZLOCKE)) {
				msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: On Nuzlocke mode, you can only obtain one Egg in total."), MSGBOX_DEFAULT)
			}
			call(EventScript_Shop_Marie_MainMenu)
	}
}

script EventScript_Shop_Marie_ElementalMonkeyEgg {
	checkmoney(1000, 0)
	if (var(VAR_RESULT) == FALSE) {
		msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You don't have enough money.")
		hidemoneybox
		return
	}
	specialvar(VAR_TEMP_2, CalculatePlayerPartyCount)
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		msgbox(format("Your party is full. Choose a Pokémon to send to the PC."), MSGBOX_AUTOCLOSE)
		hidemoneybox
		special(ChoosePartyMon)
		waitstate
		faceplayer
		showmoneybox(0, 0, 0)
		if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
			hidemoneybox
			return
		}
		specialvar(VAR_TEMP_3, ScriptGetPartyMonSpecies)
		bufferspeciesname(2, VAR_TEMP_3)
		copyvar(VAR_TEMP_3, VAR_0x8004) // used in SendChosenMonToPC
		msgbox(format("Are you sure you want to send your {STR_VAR_3} to the PC?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			hidemoneybox
			return
		}
	}
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		setflag(FLAG_MARIE_NUZLOCKE_RECEIVED)
	}
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		special(SendChosenMonToPC)
		setvar(VAR_TEMP_2, 5) // gift mon appears always in last slot if party initially full
	}
	removemoney(1000)
	updatemoneybox
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Thank you very much…"), MSGBOX_DEFAULT)
	hidemoneybox
	random(3)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_1, SPECIES_PANSAGE)
		case 1:
			setvar(VAR_TEMP_1, SPECIES_PANSEAR)
		case 2:
			setvar(VAR_TEMP_1, SPECIES_PANPOUR)
	}
	giveegg(VAR_TEMP_1)
	setmonmetlocation(VAR_TEMP_2, 244)
	msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here's your Egg.", MSGBOX_DEFAULT)
	playfanfare(MUS_OBTAIN_ITEM)
	message(format("{PLAYER} received the Egg!"))
	waitmessage
	waitfanfare
}

script EventScript_Shop_Marie_RegionalFormEgg {
	checkmoney(3000, 0)
	if (var(VAR_RESULT) == FALSE) {
		msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You don't have enough money.")
		hidemoneybox
		return
	}
	specialvar(VAR_TEMP_2, CalculatePlayerPartyCount)
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		msgbox(format("Your party is full. Choose a Pokémon to send to the PC."), MSGBOX_AUTOCLOSE)
		hidemoneybox
		special(ChoosePartyMon)
		waitstate
		faceplayer
		showmoneybox(0, 0, 0)
		if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
			hidemoneybox
			return
		}
		specialvar(VAR_TEMP_3, ScriptGetPartyMonSpecies)
		bufferspeciesname(2, VAR_TEMP_3)
		copyvar(VAR_TEMP_3, VAR_0x8004) // used in SendChosenMonToPC
		msgbox(format("Are you sure you want to send your {STR_VAR_3} to the PC?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			hidemoneybox
			return
		}
	}
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		setflag(FLAG_MARIE_NUZLOCKE_RECEIVED)
	}
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		special(SendChosenMonToPC)
		setvar(VAR_TEMP_2, 5) // gift mon appears always in last slot if party initially full
	}
	removemoney(3000)
	updatemoneybox
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Thank you very much…"), MSGBOX_DEFAULT)
	hidemoneybox
	random(4)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_1, SPECIES_MEOWTH_ALOLA)
		case 1:
			setvar(VAR_TEMP_1, SPECIES_ZIGZAGOON_GALAR)
		case 2:
			setvar(VAR_TEMP_1, SPECIES_VOLTORB_HISUI)
		case 3:
			setvar(VAR_TEMP_1, SPECIES_WOOPER_PALDEA)
	}
	giveegg(VAR_TEMP_1)
	setmonmetlocation(VAR_TEMP_2, 244)
	msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here's your Egg.", MSGBOX_DEFAULT)
	playfanfare(MUS_OBTAIN_ITEM)
	message(format("{PLAYER} received the Egg!"))
	waitmessage
	waitfanfare
}

script EventScript_Shop_Marie_BabyPokemon1Egg {
	checkmoney(3000, 0)
	if (var(VAR_RESULT) == FALSE) {
		msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You don't have enough money.")
		hidemoneybox
		return
	}
	specialvar(VAR_TEMP_2, CalculatePlayerPartyCount)
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		msgbox(format("Your party is full. Choose a Pokémon to send to the PC."), MSGBOX_AUTOCLOSE)
		hidemoneybox
		special(ChoosePartyMon)
		waitstate
		faceplayer
		showmoneybox(0, 0, 0)
		if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
			hidemoneybox
			return
		}
		specialvar(VAR_TEMP_3, ScriptGetPartyMonSpecies)
		bufferspeciesname(2, VAR_TEMP_3)
		copyvar(VAR_TEMP_3, VAR_0x8004) // used in SendChosenMonToPC
		msgbox(format("Are you sure you want to send your {STR_VAR_3} to the PC?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			hidemoneybox
			return
		}
	}
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		setflag(FLAG_MARIE_NUZLOCKE_RECEIVED)
	}
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		special(SendChosenMonToPC)
		setvar(VAR_TEMP_2, 5) // gift mon appears always in last slot if party initially full
	}
	removemoney(3000)
	updatemoneybox
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Thank you very much…"), MSGBOX_DEFAULT)
	hidemoneybox
	random(3)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_1, SPECIES_SMOOCHUM)
		case 1:
			setvar(VAR_TEMP_1, SPECIES_ELEKID)
		case 2:
			setvar(VAR_TEMP_1, SPECIES_MAGBY)
	}
	giveegg(VAR_TEMP_1)
	setmonmetlocation(VAR_TEMP_2, 244)
	msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here's your Egg.", MSGBOX_DEFAULT)
	playfanfare(MUS_OBTAIN_ITEM)
	message(format("{PLAYER} received the Egg!"))
	waitmessage
	waitfanfare
}

script EventScript_Shop_Marie_BabyPokemon2Egg {
	checkmoney(10000, 0)
	if (var(VAR_RESULT) == FALSE) {
		msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You don't have enough money.")
		hidemoneybox
		return
	}
	specialvar(VAR_TEMP_2, CalculatePlayerPartyCount)
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		msgbox(format("Your party is full. Choose a Pokémon to send to the PC."), MSGBOX_AUTOCLOSE)
		hidemoneybox
		special(ChoosePartyMon)
		waitstate
		faceplayer
		showmoneybox(0, 0, 0)
		if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
			hidemoneybox
			return
		}
		specialvar(VAR_TEMP_3, ScriptGetPartyMonSpecies)
		bufferspeciesname(2, VAR_TEMP_3)
		copyvar(VAR_TEMP_3, VAR_0x8004) // used in SendChosenMonToPC
		msgbox(format("Are you sure you want to send your {STR_VAR_3} to the PC?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			hidemoneybox
			return
		}
	}
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		setflag(FLAG_MARIE_NUZLOCKE_RECEIVED)
	}
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		special(SendChosenMonToPC)
		setvar(VAR_TEMP_2, 5) // gift mon appears always in last slot if party initially full
	}
	removemoney(10000)
	updatemoneybox
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Thank you very much…"), MSGBOX_DEFAULT)
	hidemoneybox
	random(4)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_1, SPECIES_HAPPINY)
		case 1:
			setvar(VAR_TEMP_1, SPECIES_TOGEPI)
		case 2:
			setvar(VAR_TEMP_1, SPECIES_MUNCHLAX)
		case 3:
			setvar(VAR_TEMP_1, SPECIES_RIOLU)
	}
	giveegg(VAR_TEMP_1)
	setmonmetlocation(VAR_TEMP_2, 244)
	msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here's your Egg.", MSGBOX_DEFAULT)
	playfanfare(MUS_OBTAIN_ITEM)
	message(format("{PLAYER} received the Egg!"))
	waitmessage
	waitfanfare
}

script EventScript_Shop_Lelouch {
	lock
	faceplayer
	if (flag(FLAG_LELOUCH_INTRO) == false) {
		msgbox("{COLOR BLUE}???{COLOR DARK_GRAY}: You… What is your name?\p{COLOR BLUE}???{COLOR DARK_GRAY}: {PLAYER}? Curious…\nThat's a funny name…")
		delay(16)
		msgbox("{COLOR BLUE}???{COLOR DARK_GRAY}: You may call me Lelouch.\p{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I provide a variety of\nservices to improve one's Pokémon.", MSGBOX_DEFAULT)
		setflag(FLAG_LELOUCH_INTRO)
	}
	if (var(VAR_ZONE) < 6) {
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I demand a special price\nfor my services, one that I see you\lcannot pay. Leave.")
		release
		end
	}
	if (flag(FLAG_LELOUCH_SHARDS_INTRO) == false) {
		msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I sense…\n"
				"The aura of Shards.\p"
				"There are four types of Shards:\n"
				"Red, Blue, Yellow, and Green,\l"
				"ranked by least to most rare.\p"
				"Each can be exchanged for a certain type of service I provide.\p"
				"Pokémon training costs Red Shards.\p"
				"Move Relearning and Move Tutoring cost Blue Shards.\p"
				"Pokémon improvements such as Nature, Ability, and IV changing cost Yellow Shards.\p"
				"Other services cost Green Shards.\p"
				"I hope they serve you well…"), MSGBOX_DEFAULT)
		setflag(FLAG_LELOUCH_SHARDS_INTRO)
	}
	msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: For the right price…\nWelcome to Lelouch's Special Services.", MSGBOX_DEFAULT)
	dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "Training - Red", "Moves - Blue", "Improvement - Yellow", "Other - Green", "Exit")
	switch (var(VAR_RESULT)) {
		case 0:
			call(EventScript_Shop_Lelouch_Training)
		case 1:
			call(EventScript_Shop_Lelouch_Moves)
		case 2:
			call(EventScript_Shop_Lelouch_Improvement)
		case 3:
			call(EventScript_Shop_Lelouch_Other)
	}
	msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Farewell.")
	release
}

text gText_Lelouch_NotEnoughColor {
	"{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You don't have any Shards\nof that color."
}

text gText_Lelouch_Leave {
	"{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Farewell."
}

script EventScript_Shop_Lelouch_Training {
	checkitem(ITEM_RED_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Choose which training\nregiment you would like.", MSGBOX_DEFAULT)
	dynmultipush("Experience Training", 0)
	if ((flag(FLAG_SETTINGS_BRUTAL) == false) && (flag(FLAG_SETTINGS_EFFORTLESS) == false) && var(VAR_ZONE) > 25) {
		dynmultipush("EV Training", 1)
	}
	dynmultipush("Exit", 2)
	dynmultistack(0, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
	switch(var(VAR_RESULT)) {
		case 0:
			msgbox(gText_Lelouch_Exp, MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				special(ChoosePartyMonForTraining)
				waitstate
				if (var(VAR_0x8004) == 1) {
					msgbox(gText_Lelouch_ExpTrainingFinished, MSGBOX_DEFAULT)
					msgbox(gText_Lelouch_PayRed, MSGBOX_DEFAULT)
					removeitem(ITEM_RED_SHARD, 1)
				} else {
					msgbox(gText_Lelouch_DidNotTrain)
				}
				return
			}
		case 1:
			msgbox(gText_Lelouch_EV, MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				special(ChoosePartyMon)
				waitstate
				if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
					msgbox(gText_Lelouch_DidNotTrain, MSGBOX_DEFAULT)
				} else {
					specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
					if (var(VAR_RESULT) == SPECIES_EGG) {
						msgbox("I can't train an Egg!", MSGBOX_DEFAULT)
					} else {
						setvar(VAR_TEMP_F, 0)
						specialvar(VAR_TEMP_0, ScriptGetPartyMonSpecies)
						bufferspeciesname(0, VAR_TEMP_0)
						msgbox(gText_Lelouch_ChooseHPEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_9, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_9, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_9, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_9, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_9, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseAttackEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_A, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_A, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_A, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_A, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_A, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseDefenseEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_B, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_B, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_B, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_B, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_B, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseSpecialAttackEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_C, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_C, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_C, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_C, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_C, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseSpecialDefenseEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_D, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_D, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_D, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_D, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_D, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseSpeedEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_E, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_E, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_E, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_E, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_E, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						if (var(VAR_TEMP_F) > 510) {
							msgbox(gText_Lelouch_TooManyEVs, MSGBOX_DEFAULT)
							return
						}
						msgbox(gText_Lelouch_CheckEVs, MSGBOX_YESNO)
						if (var(VAR_RESULT) == NO) {
							return
						}
						special(CheckLeadMonCute) // Sets the EVs
						playse(SE_EXP_MAX)
						waitse
						msgbox(gText_Lelouch_ChangedEVs, MSGBOX_DEFAULT)
						msgbox(gText_Lelouch_PayRed, MSGBOX_DEFAULT)
						removeitem(ITEM_RED_SHARD, 1)
					}
				}
				return
			}
		case 2:
		case MULTI_B_PRESSED:
			return
	}
	return
}

text gText_Lelouch_EV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: With EV Training, you can set one Pokémon's EVs at the cost of one Red Shard.\pWould you like to start an EV Training session?")
}

text gText_Lelouch_ChooseHPEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s HP EV to be?")
}

text gText_Lelouch_ChooseAttackEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Attack EV to be?")
}

text gText_Lelouch_ChooseDefenseEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Defense EV to be?")
}

text gText_Lelouch_ChooseSpecialAttackEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Sp. Atk EV to be?")
}

text gText_Lelouch_ChooseSpecialDefenseEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Sp. Def EV to be?")
}

text gText_Lelouch_ChooseSpeedEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Speed EV to be?")
}

text gText_Lelouch_TooManyEVs {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You've selected a total of EVs greater than 510. Pokémon can have at maximum 510 EVs.")
}

text gText_Lelouch_CheckEVs {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Are you sure you wish to set {STR_VAR_1}'s EVs to these values?")
}

text gText_Lelouch_ChangedEVs {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I've changed your {STR_VAR_1}'s EVs to your requested values.")
}

script EventScript_Shop_Lelouch_Moves {
	checkitem(ITEM_BLUE_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Choose which kind of moves you want to teach."), MSGBOX_DEFAULT)
	dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "Move Reminder", "Move Tutor", "Exit")
	switch(var(VAR_RESULT)) {
		case 0:
			call(EventScript_Shop_Lelouch_MoveReminder)
		case 1:
			call(EventScript_Shop_Lelouch_MoveTutor)
		case 2:
		case MULTI_B_PRESSED:
			return
	}
}

script EventScript_Shop_Lelouch_MoveReminder {
	msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Move Reminder services cost one Blue Shard.\pWould you like me to teach a forgotten move to your Pokémon?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		return
	}
	while {
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which Pokémon should\nrelearn a move?", MSGBOX_DEFAULT)
		special(ChooseMonForMoveRelearner)
		waitstate
		if (var(VAR_0x8004) == 255) {
			return
		}
		special(IsSelectedMonEgg)
		if (var(VAR_RESULT) == TRUE) {
			msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: That is an Egg.", MSGBOX_DEFAULT)
			continue
		}
		if (var(VAR_0x8005) == 0) {
			msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: That Pokémon cannot\nrelearn any moves.", MSGBOX_DEFAULT)
			continue
		}
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which move should it\nrelearn?", MSGBOX_DEFAULT)
		special(TeachMoveRelearnerMove)
		waitstate
		if (var(VAR_0x8004) == 0) {
			continue
		}
		msgbox(gText_Lelouch_PayBlue)
		removeitem(ITEM_BLUE_SHARD)
		break
	}
	return
}

script EventScript_Shop_Lelouch_Improvement {
	checkitem(ITEM_YELLOW_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox("Filler text for EventScript_Shop_Lelouch_Improvement")
}

script EventScript_Shop_Lelouch_MoveTutor {
	while {
		msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Move Tutor services cost Blue Shards. Which move would you like to tutor?"), MSGBOX_DEFAULT)
		if (var(VAR_ZONE) > 10) {
			dynmultipush("Venoshock", 0)
			dynmultipush("Electroweb", 1)
			dynmultipush("Icy Wind", 2)
			dynmultipush("Low Kick", 3)
			dynmultipush("Heal Bell", 4)
			dynmultipush("Helping Hand", 5)
			dynmultipush("Synthesis", 6)
			dynmultipush("Pain Split", 7)
			dynmultipush("Defog", 8)
			dynmultipush("Trick", 9)
		}
		// if (var(VAR_ZONE) > 15) {
		// 	dynmultipush("", 1)
		// 	dynmultipush("", 2)
		// 	dynmultipush("", 3)
		// 	dynmultipush("", 4)
		// 	dynmultipush("", 5)
		// 	dynmultipush("", 6)
		// 	dynmultipush("", 7)
		// 	dynmultipush("", 8)
		// 	dynmultipush("", 9)
		// 	dynmultipush("", 0)
		// }
		// if (var(VAR_ZONE) > 20) {
		// 	dynmultipush("", 1)
		// 	dynmultipush("", 2)
		// 	dynmultipush("", 3)
		// 	dynmultipush("", 4)
		// 	dynmultipush("", 5)
		// 	dynmultipush("", 6)
		// 	dynmultipush("", 7)
		// 	dynmultipush("", 8)
		// 	dynmultipush("", 9)
		// 	dynmultipush("", 0)
		// }
		dynmultipush("Exit", 50)
		dynmultistack(0, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				setvar(VAR_TEMP_0, MOVE_VENOSHOCK)
				setvar(VAR_0x8005, MOVE_VENOSHOCK)
			case 1:
				setvar(VAR_TEMP_0, MOVE_ELECTROWEB)
				setvar(VAR_0x8005, MOVE_ELECTROWEB)
			case 2:
				setvar(VAR_TEMP_0, MOVE_ICY_WIND)
				setvar(VAR_0x8005, MOVE_ICY_WIND)
			case 3:
				setvar(VAR_TEMP_0, MOVE_LOW_KICK)
				setvar(VAR_0x8005, MOVE_LOW_KICK)
			case 4:
				setvar(VAR_TEMP_0, MOVE_HEAL_BELL)
				setvar(VAR_0x8005, MOVE_HEAL_BELL)
			case 5:
				setvar(VAR_TEMP_0, MOVE_HELPING_HAND)
				setvar(VAR_0x8005, MOVE_HELPING_HAND)
			case 6:
				setvar(VAR_TEMP_0, MOVE_SYNTHESIS)
				setvar(VAR_0x8005, MOVE_SYNTHESIS)
			case 7:
				setvar(VAR_TEMP_0, MOVE_PAIN_SPLIT)
				setvar(VAR_0x8005, MOVE_PAIN_SPLIT)
			case 8:
				setvar(VAR_TEMP_0, MOVE_DEFOG)
				setvar(VAR_0x8005, MOVE_DEFOG)
			case 9:
				setvar(VAR_TEMP_0, MOVE_TRICK)
				setvar(VAR_0x8005, MOVE_TRICK)
			// case 6:
			// 	setvar(VAR_TEMP_0, MOVE_STEALTH_ROCK)
			// 	setvar(VAR_0x8005, MOVE_STEALTH_ROCK)
			// case 8:
			// 	setvar(VAR_TEMP_0, MOVE_FIRE_PUNCH)
			// 	setvar(VAR_0x8005, MOVE_FIRE_PUNCH)
			// case 9:
			// 	setvar(VAR_TEMP_0, MOVE_ICE_PUNCH)
			// 	setvar(VAR_0x8005, MOVE_ICE_PUNCH)
			// case 10:
			// 	setvar(VAR_TEMP_0, MOVE_THUNDER_PUNCH)
			// 	setvar(VAR_0x8005, MOVE_THUNDER_PUNCH)
			// case 11:
			// 	setvar(VAR_TEMP_0, MOVE_FLIP_TURN)
			// 	setvar(VAR_0x8005, MOVE_FLIP_TURN)
			// case 12:
			// 	setvar(VAR_TEMP_0, MOVE_U_TURN)
			// 	setvar(VAR_0x8005, MOVE_U_TURN)
			// case 13:
			// 	setvar(VAR_TEMP_0, MOVE_DEFOG)
			// 	setvar(VAR_0x8005, MOVE_DEFOG)
			// case 14:
			// 	setvar(VAR_TEMP_0, MOVE_PAIN_SPLIT)
			// 	setvar(VAR_0x8005, MOVE_PAIN_SPLIT)
			// case 15:
			// 	setvar(VAR_TEMP_0, MOVE_TRICK)
			// 	setvar(VAR_0x8005, MOVE_TRICK)
			// case 16:
			// 	setvar(VAR_TEMP_0, MOVE_BOUNCE)
			// 	setvar(VAR_0x8005, MOVE_BOUNCE)
			// case 17:
			// 	setvar(VAR_TEMP_0, MOVE_IRON_HEAD)
			// 	setvar(VAR_0x8005, MOVE_IRON_HEAD)
			// case 18:
			// 	setvar(VAR_TEMP_0, MOVE_KNOCK_OFF)
			// 	setvar(VAR_0x8005, MOVE_KNOCK_OFF)
			// case 19:
			// 	setvar(VAR_TEMP_0, MOVE_VOLT_SWITCH)
			// 	setvar(VAR_0x8005, MOVE_VOLT_SWITCH)
			// case 20:
			// 	setvar(VAR_TEMP_0, MOVE_ZEN_HEADBUTT)
			// 	setvar(VAR_0x8005, MOVE_ZEN_HEADBUTT)
			// case 21:
			// 	setvar(VAR_TEMP_0, MOVE_ROOST)
			// 	setvar(VAR_0x8005, MOVE_ROOST)
			// case 22:
			// 	setvar(VAR_TEMP_0, MOVE_SYNTHESIS)
			// 	setvar(VAR_0x8005, MOVE_SYNTHESIS)
			// case 23:
			// 	setvar(VAR_TEMP_0, MOVE_TAILWIND)
			// 	setvar(VAR_0x8005, MOVE_TAILWIND)
			// case 24:
			// 	setvar(VAR_TEMP_0, MOVE_DRACO_METEOR)
			// 	setvar(VAR_0x8005, MOVE_DRACO_METEOR)
			// case 25:
			// 	setvar(VAR_TEMP_0, MOVE_EXPANDING_FORCE)
			// 	setvar(VAR_0x8005, MOVE_EXPANDING_FORCE)
			// case 26:
			// 	setvar(VAR_TEMP_0, MOVE_HEAT_WAVE)
			// 	setvar(VAR_0x8005, MOVE_HEAT_WAVE)
			// case 27:
			// 	setvar(VAR_TEMP_0, MOVE_POLTERGEIST)
			// 	setvar(VAR_0x8005, MOVE_POLTERGEIST)
			// case 28:
			// 	setvar(VAR_TEMP_0, MOVE_POWER_WHIP)
			// 	setvar(VAR_0x8005, MOVE_POWER_WHIP)
			// case 29:
			// 	setvar(VAR_TEMP_0, MOVE_SUPERPOWER)
			// 	setvar(VAR_0x8005, MOVE_SUPERPOWER)
			// case 30:
			// 	setvar(VAR_TEMP_0, MOVE_SWORDS_DANCE)
			// 	setvar(VAR_0x8005, MOVE_SWORDS_DANCE)
			// case 31:
			// 	setvar(VAR_TEMP_0, MOVE_NASTY_PLOT)
			// 	setvar(VAR_0x8005, MOVE_NASTY_PLOT)
			case 50:
			case MULTI_B_PRESSED:
				return
		}
		buffermovename(0, VAR_TEMP_0)
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You want to teach the move\n{STR_VAR_1}?", MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			continue
		}
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which Pokémon should learn\n{STR_VAR_1}?", MSGBOX_DEFAULT)
		special(ChooseMonForMoveTutor)
		waitstate
		lock
		faceplayer
		if (var(VAR_RESULT) == 0) {
			continue
		}
		msgbox(gText_Lelouch_PayBlue, MSGBOX_DEFAULT)
		removeitem(ITEM_BLUE_SHARD)
		return
	}

}

script EventScript_Shop_Lelouch_Other {
	checkitem(ITEM_GREEN_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I offer nature changing services at the cost of one Green Shard.\pFirst, choose a Pokémon."))
	special(ChoosePartyMon)
	waitstate
	if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
		return
	} else {
		specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
		if (var(VAR_RESULT) == SPECIES_EGG) {
			msgbox("No eggs!")
		} else {
			specialvar(VAR_TEMP_1, ScriptGetPartyMonSpecies)
			bufferspeciesname(0, VAR_TEMP_1)
			copyvar(VAR_TEMP_1, VAR_0x8004)
			msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which nature would you like your {STR_VAR_1} to have?"), MSGBOX_DEFAULT)
			dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "Lonely", "Adamant", "Naughty", "Brave", "Bold", "Impish", "Lax", "Relaxed", "Modest", "Mild", "Rash", "Quiet", "Calm", "Gentle", "Careful", "Sassy", "Timid", "Hasty", "Jolly", "Naive", "Serious")
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_2, 1)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Lonely, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 1:
					setvar(VAR_TEMP_2, 3)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Adamant, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 2:
					setvar(VAR_TEMP_2, 4)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Naughty, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 3:
					setvar(VAR_TEMP_2, 2)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Brave, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 4:
					setvar(VAR_TEMP_2, 5)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Bold, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 5:
					setvar(VAR_TEMP_2, 8)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Impish, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 6:
					setvar(VAR_TEMP_2, 9)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Lax, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 7:
					setvar(VAR_TEMP_2, 7)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Relaxed, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 8:
					setvar(VAR_TEMP_2, 15)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Modest, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 9:
					setvar(VAR_TEMP_2, 16)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Mild, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 10:
					setvar(VAR_TEMP_2, 19)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Rash, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 11:
					setvar(VAR_TEMP_2, 17)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Quiet, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 12:
					setvar(VAR_TEMP_2, 20)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Calm, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 13:
					setvar(VAR_TEMP_2, 21)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Gentle, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 14:
					setvar(VAR_TEMP_2, 23)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Careful, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 15:
					setvar(VAR_TEMP_2, 22)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Sassy, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 16:
					setvar(VAR_TEMP_2, 10)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Timid, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 17:
					setvar(VAR_TEMP_2, 11)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Hasty, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 18:
					setvar(VAR_TEMP_2, 13)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Jolly, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 19:
					setvar(VAR_TEMP_2, 14)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Naive, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 20:
					setvar(VAR_TEMP_2, 12)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Serious, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case MULTI_B_PRESSED:
					return
			}
			playse(SE_EXP_MAX)
			waitse
			msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I've changed your {STR_VAR_1}'s nature to the requested nature."))
			special(SetMonNature)
			msgbox(gText_Lelouch_PayGreen)
			removeitem(ITEM_GREEN_SHARD, 1)
		}
	}
	return
}

script EventScript_Shop_Joy {
	lock
	faceplayer
	if (flag(FLAG_JOY_INTRO) == false) {
		setflag(FLAG_JOY_INTRO)
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: Welcome to the Pokémon… Ugh. Never mind.\p{COLOR BLUE}???{COLOR DARK_GRAY}: My name is Joy. Just Joy.\p{COLOR BLUE}Joy{COLOR DARK_GRAY}: I used to work at the Pokémon Center, but they gave terrible pay.\pSo now, this shop, Joy's Center of Restoration, is my own!"), MSGBOX_DEFAULT)
	}
	if (var(VAR_ZONE) > 10 && flag(FLAG_JOY_UPGRADED) == false) {
		msgbox(format("{COLOR BLUE}Joy{COLOR DARK_GRAY}: Welcome back to Joy's Center of Restoration.\pWe've developed new technology that allows us to heal your entire party and all your PC Pokémon as well."))
		setflag(FLAG_JOY_UPGRADED)
	}
	if (flag(FLAG_JOY_UPGRADED) == TRUE) {
		msgbox(format("{COLOR BLUE}Joy{COLOR DARK_GRAY}: Welcome to Joy's Center of Restoration.\pWe heal your entire party and PC for a flat ¥1000 fee"), MSGBOX_DEFAULT)
	} else {
		msgbox(format("{COLOR BLUE}Joy{COLOR DARK_GRAY}: Welcome to Joy's Center of Restoration.\pWe heal your entire party for a flat ¥1000 fee."), MSGBOX_DEFAULT)
	}
	showmoneybox(0, 0, 0)
	msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: Should I heal your Pokémon?", MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		closemessage
		hidemoneybox
	} else {
		if (flag(FLAG_JOY_UPGRADED) == TRUE) {
			checkmoney(1000, 0)
			if (var(VAR_RESULT) == FALSE) {
				msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: You don't have enough money.")
				hidemoneybox
			} else {
				removemoney(1000, 0)
				updatemoneybox
				msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: That will be ¥1000, thank you…")
				fadescreenswapbuffers(FADE_TO_BLACK)
				playfanfare(MUS_HEAL)
				waitfanfare
				special(HealPlayerParty)
				fadescreenswapbuffers(FADE_FROM_BLACK)
				msgbox(format("{COLOR BLUE}Joy{COLOR DARK_GRAY}: All of your Pokémon have been restored."), MSGBOX_DEFAULT)
				hidemoneybox
			}
		} else {
			checkmoney(1000, 0)
			if (var(VAR_RESULT) == FALSE) {
				msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: You don't have enough money.")
				hidemoneybox
			} else {
				removemoney(1000, 0)
				updatemoneybox
				msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: That will be ¥1000, thank you…")
				fadescreenswapbuffers(FADE_TO_BLACK)
				playfanfare(MUS_HEAL)
				waitfanfare
				special(HealPlayerParty)
				fadescreenswapbuffers(FADE_FROM_BLACK)
				msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: Your party has been restored.", MSGBOX_DEFAULT)
				hidemoneybox
			}
		}
	}
	msgbox(format("{COLOR BLUE}Joy{COLOR DARK_GRAY}: See you next time."))
	release
	end
}

script EventScript_Shop_BreederF {
	lock
	faceplayer
	showmoneybox(0, 0, 0)
	msgbox(format("My brother and I are twins. We specialize in light training for your Pokémon.\pWould you be interested in changing a Pokémon's nature to Serious for the price of ¥100?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		hidemoneybox
		msgbox(Shop_Breeders_Exit)
	} else {
		checkmoney(100, 0)
		if (var(VAR_RESULT) == FALSE) {
			msgbox("You don't have enough money.")
			hidemoneybox
		} else {
			msgbox(format("Which Pokémon's nature would you like to have changed?"), MSGBOX_DEFAULT)
			special(ChoosePartyMon)
			waitstate
			faceplayer
			showmoneybox(0, 0, 0)
			if (var(VAR_0x8004) != PARTY_NOTHING_CHOSEN) {
				specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
				if (var(VAR_RESULT) == SPECIES_EGG) {
					hidemoneybox
					msgbox(format("I can't change the nature of an egg."))
				} else {
					specialvar(VAR_TEMP_1, ScriptGetPartyMonSpecies)
					bufferspeciesname(0, VAR_TEMP_1)
					copyvar(VAR_TEMP_1, VAR_0x8004)
					msgbox(format("Are you sure you want your {STR_VAR_1} to have a Serious nature?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						removemoney(100)
						updatemoneybox
						setvar(VAR_TEMP_2, 12)
						special(SetMonNature)
						msgbox(format("It's done."))
						hidemoneybox
					} else {
						hidemoneybox
						msgbox(Shop_Breeders_Exit)
					}
				}
			} else {
				hidemoneybox
				msgbox(Shop_Breeders_Exit)
			}
		}
	}
	release
	end
}

script EventScript_Shop_BreederM {
	lock
	faceplayer
	showmoneybox(0, 0, 0)
	msgbox(format("My sister and I are twins. We specialize in light training for your Pokémon.\pWould you be interested in swapping your Pokemon's normal ability to its other normal ability for the price of ¥100?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		hidemoneybox
		msgbox(Shop_Breeders_Exit)
	} else {
		checkmoney(100, 0)
		if (var(VAR_RESULT) == FALSE) {
			msgbox("You don't have enough money.")
			hidemoneybox
		} else {
			msgbox(format("Which Pokémon's ability would you like to have changed?"), MSGBOX_DEFAULT)
			special(ChoosePartyMon)
			waitstate
			faceplayer
			showmoneybox(0, 0, 0)
			if (var(VAR_0x8004) != PARTY_NOTHING_CHOSEN) {
				specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
				if (var(VAR_RESULT) == SPECIES_EGG) {
					hidemoneybox
					msgbox(format("I can't change the ability of an egg."))
				} else {
					copyvar(VAR_TEMP_1, VAR_0x8004)
					special(BufferMonAbilities)
					if (var(VAR_TEMP_2) == 2) {
						hidemoneybox
						specialvar(VAR_TEMP_4, ScriptGetPartyMonSpecies)
						bufferspeciesname(0, VAR_TEMP_4)
						msgbox(format("I can't change your {STR_VAR_1}'s ability {STR_VAR_3} because that's its hidden ability!"))
					}
					elif (var(VAR_TEMP_2) == 0) {
						if (flag(FLAG_TEMP_1) == false) {
							hidemoneybox
							specialvar(VAR_TEMP_4, ScriptGetPartyMonSpecies)
							bufferspeciesname(2, VAR_TEMP_4)
							msgbox(format("I can't change your {STR_VAR_3}'s ability {STR_VAR_1} because it doesn't have another normal ability!"))
						} else {
							specialvar(VAR_TEMP_4, ScriptGetPartyMonSpecies)
							bufferspeciesname(2, VAR_TEMP_4)
							msgbox(format("Are you sure you want to change your {STR_VAR_3}'s ability from {STR_VAR_1} to {STR_VAR_2}?"), MSGBOX_YESNO)
							if (var(VAR_RESULT) == YES) {
								copyvar(VAR_TEMP_1, VAR_0x8004)
								removemoney(100)
								updatemoneybox
								setvar(VAR_TEMP_2, 1)
								special(ChangePokemonAbility)
								msgbox(format("It's done! Enjoy your new ability!"))
								hidemoneybox
							} else {
								hidemoneybox
								msgbox(Shop_Breeders_Exit)
							}
						}
					}
					elif (var(VAR_TEMP_2) == 1) {
						specialvar(VAR_TEMP_4, ScriptGetPartyMonSpecies)
						bufferspeciesname(2, VAR_TEMP_4)
						msgbox(format("Are you sure you want to change your {STR_VAR_3}'s ability from {STR_VAR_2} to {STR_VAR_1}?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							copyvar(VAR_TEMP_1, VAR_0x8004)
							removemoney(100)
							updatemoneybox
							setvar(VAR_TEMP_2, 0)
							special(ChangePokemonAbility)
							msgbox(format("It's done! Enjoy your new ability!"))
							hidemoneybox
						} else {
							hidemoneybox
							msgbox(Shop_Breeders_Exit)
						}
					}
					
				}
			} else {
				hidemoneybox
				msgbox(Shop_Breeders_Exit)
			}
		}
	}
	release
	end
}

text Shop_Breeders_Exit {
	format("We'll be here if you need us.")
}

script EventScript_Shop_Alexander {
	lock
	faceplayer
	release
}

script EventScript_Shop_Gordon {
	lock
	faceplayer
	release
}

script EventScript_MandatoryCheck {
	if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_GAUNTLET) == true)) {
		specialvar(VAR_NUM_TRAINERS_REMAINING, GetNumTrainersRemaining)
		if (var(VAR_NUM_TRAINERS_REMAINING) > 0) {
			buffernumberstring(0, VAR_NUM_TRAINERS_REMAINING)
			msgbox(format("{COLOR RED}You haven't defeated all the opponents in the area yet."), MSGBOX_DEFAULT)
			switch(var(VAR_NUM_TRAINERS_REMAINING)) {
				case 1:
					msgbox(gText_OneOpponentRemaining)
				default:
					msgbox(gText_MultipleOpponentsRemaining)
			}
			release
			end
		}
	}
	return
}

script EventScript_BrutalExitNotSatisfied {
	buffernumberstring(0, VAR_NUM_TRAINERS_REMAINING)
	msgbox(format("{COLOR RED}You haven't defeated all the opponents in the area yet."))
	switch(var(VAR_NUM_TRAINERS_REMAINING)) {
		case 1:
			msgbox(gText_OneOpponentRemaining)
		default:
			msgbox(gText_MultipleOpponentsRemaining)
	}
	releaseall
}

script EventScript_Max {
	lock
	faceplayer
	if (flag(FLAG_MAX_INTRO) == false) {
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: By my calculations, you should be {PLAYER}!\pHi, {PLAYER}! My name is {COLOR BLUE}Max{COLOR DARK_GRAY}."), MSGBOX_DEFAULT)
		msgbox(format("{COLOR BLUE}Max{COLOR DARK_GRAY}: I am a traveling merchant, selling special Technical Machines for you to use!\pI travel a lot, never going to the same place again.\pI'll have different wares every time you see me, so be sure to buy whatever TMs you deem important!"), MSGBOX_DEFAULT)
		setflag(FLAG_MAX_INTRO)
	}
	message(format("{COLOR BLUE}Max{COLOR DARK_GRAY}: Hi {PLAYER}! Long time no see!\pWelcome to my TM shop!"))
	waitmessage
	switch(var(VAR_ZONE)) {
		case 2:
			pokemart(Zone2A_Shop_TMShop)
		case 6:
			pokemart(Zone6A_Shop_TMShop)
		case 10:
			pokemart(Zone10A_Shop_TMShop)
		case 18:
			pokemart(Zone18A_Shop_TMShop)
	}
	msgbox(format("{COLOR BLUE}Max{COLOR DARK_GRAY}: Goodbye!"), MSGBOX_AUTOCLOSE)
	release
}

mart Zone2A_Shop_TMShop {
	ITEM_TM_PROTECT
}

mart Zone6A_Shop_TMShop {
	ITEM_TM_TRAILBLAZE
	ITEM_TM_FLAME_CHARGE
	ITEM_TM_CHARGE_BEAM
	ITEM_TM_POWER_UP_PUNCH
}

mart Zone10A_Shop_TMShop {
	ITEM_TM_IRON_DEFENSE
	ITEM_TM_AGILITY
	ITEM_TM_AMNESIA
}

mart Zone18A_Shop_TMShop {
	ITEM_TM31
	ITEM_TM32
	ITEM_TM33
}

script EventScript_SanctuaryToZone0 {
	lockall
	applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_FaceUp)
	waitmovement(0)
	msgbox(format("Go to Zone 0?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		closemessage
		warpdoor(MAP_ZONE0A, 255, 17, 10)
		waitstate
	} else {
		closemessage
		applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkDown)
		waitmovement(0)
	}
	releaseall
}

script EventScript_WhenUReadyDialogue {
	switch (var(VAR_ZONE)) {
		case 1:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 1 - Leafway Trail{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 2:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 2 - Duskwarren Woods{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 3:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 3 - Sunlit Pond{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 4:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 4 - Mystic Glade{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 5:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 5 - Timberstep Plateau{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 6:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 6 - Seabreeze Island{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 7:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 7 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8 - Duskmire Hollow{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 9:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 9 - Lushbranch Village{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 10:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 10 - Scornwind Desert{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 11:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 11 - Duskwither Maze{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 12:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 12 - Twinstream Plains{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 13:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 15:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 15 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 16:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 16 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 17:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 17 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 18:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 20:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 20 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 21:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 21 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 22:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 22 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 23:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 23 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 24:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
	}
}

script EventScript_WhenUReady {
	call(EventScript_WhenUReadyDialogue)
	release
	end
}

script EventScript_Documentation {
	msgbox(format("This is version 1.4.0 of the Pokémon Battle Labyrinth.\pMake sure you're playing the most up to date version!$"), MSGBOX_DEFAULT)
	goto(EventScript_WhenUReady)
}

text gText_Colress_BrutalExplained {
	format("{COLOR RED}Brutal{COLOR DARK_GRAY} mode enables all of the increased difficulty modes at the same time.\p"
	"{COLOR RED}Brutal{COLOR DARK_GRAY} mode can only be enabled at the beginning of the game, but can be disabled at any point.\p"
	"It is not recommended to play on {COLOR RED}Brutal{COLOR DARK_GRAY} mode unless you are familiar with {COLOR RED}Pokémon Battle Labyrinth{COLOR DARK_GRAY} already.")
}

text gText_Colress_RandomizerExplanation {
	format("{COLOR RED}Randomizer{COLOR DARK_GRAY} mode randomizes wild encounters and gift Pokémon, including your starter.\p"
	"Trainer Pokémon are left unchanged.\p"
	"{COLOR RED}Randomizer{COLOR DARK_GRAY} mode can only be altered at the beginning of the game.")
}

text gText_Colress_NuzlockeExplained {
	format("{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode completely implements all standard Nuzlocke rules, such as permanent death and capture restrictions.\p"
	"It comes with Species Clause, Shiny Clause, and Gift Clause.\p"
	"It is not recommended to play {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode unless you are familiar with Nuzlockes already.\p"
	"{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode can only be enabled at the beginning of the game, but can be disabled at any point.")
}

text gText_Colress_InfiniteExplained {
	format("{COLOR RED}Infinite{COLOR DARK_GRAY} mode gives you access to unlimited resources that can normally be obtained by grinding.\p"
	"This is not the intended game mode, as resource management was designed to be part of the game.\p"
	"{COLOR RED}Infinite{COLOR DARK_GRAY} mode can only be altered at the beginning of the game.")
}

text gText_Colress_CannotChangeSettingBrutal {
	format("You cannot change this setting because you are playing on Brutal mode.")
}

text gText_Colress_CannotChangeSettingInfinite {
	format("You cannot change this setting because you are playing on Infinite mode.")
}

script EventScript_Settings {
	while {
		message("Choose a setting to adjust.\n{COLOR RED}Red{COLOR DARK_GRAY} means enabled.")
		waitmessage
		if (flag(FLAG_SETTINGS_BRUTAL) == true) {
			dynmultipush("{COLOR RED}Brutal", 0)
		} elif (var(VAR_TEMP_1) == 1) {
			dynmultipush("Brutal", 0)
		}
		if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
			dynmultipush("{COLOR RED}Nuzlocke", 1)
		} elif (var(VAR_TEMP_1) == 1) {
			dynmultipush("Nuzlocke", 1)
		}
		if (flag(FLAG_SETTINGS_RANDOMIZER) == true) {
			dynmultipush("{COLOR RED}Randomizer", 2)
		} elif (var(VAR_TEMP_1) == 1) {
			dynmultipush("Randomizer", 2)
		}
		if (flag(FLAG_SETTINGS_INFINITE) == true) {
			dynmultipush("{COLOR RED}Infinite", 3)
		} elif (var(VAR_TEMP_1) == 1) {
			dynmultipush("Infinite", 3)
		}
		if (flag(FLAG_SETTINGS_FULL_INFO) == true) {
			dynmultipush("{COLOR RED}Full Info", 4)
		} else {
			dynmultipush("Full Info", 4)
		}
		if (flag(FLAG_SETTINGS_EXP_ALL) == true) {
			dynmultipush("{COLOR RED}Exp. All", 5)
		} else {
			dynmultipush("Exp. All", 5)
		}
		dynmultipush("{COLOR RED}Music", 6)
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_CHALLENGE) == true)) {
			dynmultipush("{COLOR RED}Challenge", 7)
		} else {
			dynmultipush("Challenge", 7)
		}
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_GAUNTLET) == true)) {
			dynmultipush("{COLOR RED}Gauntlet", 8)
		} else {
			dynmultipush("Gauntlet", 8)
		}
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_ANTIDOCTOR) == true)) {
			dynmultipush("{COLOR RED}Antidoctor", 9)
		} else {
			dynmultipush("Antidoctor", 9)
		}
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_CLUMSY) == true)) {
			dynmultipush("{COLOR RED}Clumsy", 10)
		} else {
			dynmultipush("Clumsy", 10)
		}
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_EFFORTLESS) == true)) {
			dynmultipush("{COLOR RED}Effortless", 11)
		} else {
			dynmultipush("Effortless", 11)
		}
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_RED_THUMB) == true)) {
			dynmultipush("{COLOR RED}Red Thumb", 12)
		} else {
			dynmultipush("Red Thumb", 12)
		}
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_ANTIGRIND) == true)) {
			dynmultipush("{COLOR RED}Antigrind", 13)
		} else {
			dynmultipush("Antigrind", 13)
		}
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_SINGLE_USE) == true)) {
			dynmultipush("{COLOR RED}Single-Use", 14)
		} else {
			dynmultipush("Single-Use", 14)
		}
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_POOR) == true)) {
			dynmultipush("{COLOR RED}Poor", 15)
		} else {
			dynmultipush("Poor", 15)
		}
		if ((flag(FLAG_SETTINGS_BRUTAL) == true) || (flag(FLAG_SETTINGS_INDEPENDENT) == true)) {
			dynmultipush("{COLOR RED}Independent", 16)
		} else {
			dynmultipush("Independent", 16)
		}
		dynmultipush("Exit", 17)
		dynmultistack(21, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				msgbox(gText_Colress_BrutalExplained, MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_BRUTAL) == true) {
					msgbox(format("Would you like to turn off {COLOR RED}Brutal{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						msgbox(format("Are you sure you would like to turn off {COLOR RED}Brutal{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Brutal{COLOR DARK_GRAY} mode turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_BRUTAL)
						}
					}
				} else {
					if (flag(FLAG_SETTINGS_INFINITE) == true) {
						msgbox(gText_Colress_CannotChangeSettingInfinite, MSGBOX_DEFAULT)
					} else {
						msgbox(format("Would you like to turn on {COLOR RED}Brutal{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							msgbox(format("Are you sure you would like to turn on {COLOR RED}Brutal{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
							if (var(VAR_RESULT) == YES) {
								playse(SE_PC_ON)
								msgbox("{COLOR RED}Brutal{COLOR DARK_GRAY} mode turned on.", MSGBOX_DEFAULT)
								waitse
								setflag(FLAG_SETTINGS_BRUTAL)
							}
						}
					}
				}
			case 1:
				msgbox(gText_Colress_NuzlockeExplained, MSGBOX_DEFAULT)
				if (var(VAR_TEMP_1) == 0) {
					if (var(VAR_NUZLOCKE_DEATHS) == 0) {
						msgbox("So far there have been 0 deaths.", MSGBOX_DEFAULT)
					} elif (var(VAR_NUZLOCKE_DEATHS) == 1) {
						msgbox("So far there has been 1 death.", MSGBOX_DEFAULT)
					} else {
						buffernumberstring(STR_VAR_1, VAR_NUZLOCKE_DEATHS)
						msgbox("So far there have been {STR_VAR_1} deaths.", MSGBOX_DEFAULT)
					}
				}
				if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
					msgbox(format("Would you like to turn off {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						msgbox(format("Are you sure you would like to turn off {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_NUZLOCKE)
							clearflag(FLAG_ZONE13C_NUZLOCKE_FOSSIL_RECEIVED)
						}
					}
				} else {
					msgbox(format("Would you like to turn on {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						msgbox(format("Are you sure you would like to turn on {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_ON)
							msgbox("{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode turned on.", MSGBOX_DEFAULT)
							waitse
							setflag(FLAG_SETTINGS_NUZLOCKE)
						}
					}
				}
			case 2:
				msgbox(gText_Colress_RandomizerExplanation, MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_RANDOMIZER) == true) {
					if (var(VAR_TEMP_1) == 0) {
						msgbox(format("You cannot turn off {COLOR RED}Randomizer{COLOR DARK_GRAY} mode once set."), MSGBOX_DEFAULT)
					} else {
						msgbox(format("Would you like to turn off {COLOR RED}Randomizer{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							msgbox(format("Are you sure you would like to turn off {COLOR RED}Randomizer{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
							if (var(VAR_RESULT) == YES) {
								playse(SE_PC_OFF)
								msgbox("{COLOR RED}Randomizer{COLOR DARK_GRAY} mode turned off.", MSGBOX_DEFAULT)
								waitse
								clearflag(FLAG_SETTINGS_RANDOMIZER)
							}
						}
					}
				} else {
					msgbox(format("Would you like to turn on {COLOR RED}Randomizer{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						msgbox(format("Are you sure you would like to turn on {COLOR RED}Randomizer{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_ON)
							msgbox("{COLOR RED}Randomizer{COLOR DARK_GRAY} mode turned on.", MSGBOX_DEFAULT)
							waitse
							setflag(FLAG_SETTINGS_RANDOMIZER)
						}
					}
				}
			case 3:
				msgbox(gText_Colress_InfiniteExplained, MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_INFINITE) == true) {
					if (var(VAR_TEMP_1) == 0) {
						msgbox(format("You cannot turn off {COLOR RED}Infinite{COLOR DARK_GRAY} mode once set."), MSGBOX_DEFAULT)
						msgbox(format("Would you like to restock your supply of Full Restores, Max Elixirs, and Max Repels?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							additem(ITEM_FULL_RESTORE, 100)
							additem(ITEM_FULL_RESTORE, 100)
							additem(ITEM_FULL_RESTORE, 100)
							additem(ITEM_FULL_RESTORE, 100)
							additem(ITEM_FULL_RESTORE, 100)
							additem(ITEM_FULL_RESTORE, 100)
							additem(ITEM_FULL_RESTORE, 100)
							additem(ITEM_FULL_RESTORE, 100)
							additem(ITEM_FULL_RESTORE, 100)
							additem(ITEM_MAX_ELIXIR, 100)
							additem(ITEM_MAX_ELIXIR, 100)
							additem(ITEM_MAX_ELIXIR, 100)
							additem(ITEM_MAX_ELIXIR, 100)
							additem(ITEM_MAX_ELIXIR, 100)
							additem(ITEM_MAX_ELIXIR, 100)
							additem(ITEM_MAX_ELIXIR, 100)
							additem(ITEM_MAX_ELIXIR, 100)
							additem(ITEM_MAX_ELIXIR, 100)
							additem(ITEM_MAX_REPEL, 100)
							additem(ITEM_MAX_REPEL, 100)
							additem(ITEM_MAX_REPEL, 100)
							additem(ITEM_MAX_REPEL, 100)
							additem(ITEM_MAX_REPEL, 100)
							additem(ITEM_MAX_REPEL, 100)
							additem(ITEM_MAX_REPEL, 100)
							additem(ITEM_MAX_REPEL, 100)
							additem(ITEM_MAX_REPEL, 100)
							msgbox("Items restocked.", MSGBOX_DEFAULT)
						}
					} else {
						msgbox(format("Would you like to turn off {COLOR RED}Infinite{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							msgbox(format("Are you sure you would like to turn off {COLOR RED}Infinite{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
							if (var(VAR_RESULT) == YES) {
								playse(SE_PC_OFF)
								msgbox("{COLOR RED}Infinite{COLOR DARK_GRAY} mode turned off.", MSGBOX_DEFAULT)
								waitse
								clearflag(FLAG_SETTINGS_INFINITE)
							}
						}
					}
				} else {
					if (flag(FLAG_SETTINGS_BRUTAL) == true) {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					} else {
						msgbox(format("Would you like to turn on {COLOR RED}Infinite{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							msgbox(format("Are you sure you would like to turn on {COLOR RED}Infinite{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
							if (var(VAR_RESULT) == YES) {
								playse(SE_PC_ON)
								msgbox("{COLOR RED}Infinite{COLOR DARK_GRAY} mode turned on.", MSGBOX_DEFAULT)
								waitse
								setflag(FLAG_SETTINGS_INFINITE)
							}
						}
					}
				}
			case 4:
				msgbox(format("The {COLOR RED}Full Info{COLOR DARK_GRAY} setting enables you to see more information that is not visible otherwise, such as full info about enemy Pokémon through the {COLOR RED}Surveil{COLOR DARK_GRAY} option in battle, or the {COLOR RED}DexNav{COLOR DARK_GRAY} to see potential encounterable Pokémon."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_FULL_INFO) == true) {
					msgbox(format("The {COLOR RED}Full Info{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Full Info{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_OFF)
						msgbox("{COLOR RED}Full Info{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
						waitse
						clearflag(FLAG_SETTINGS_FULL_INFO)
						if (var(VAR_ZONE) < 3) {
							clearflag(FLAG_SYS_DEXNAV_GET)
							clearflag(FLAG_SYS_DETECTOR_MODE)
						}
					}
				} else {
					msgbox(format("The {COLOR RED}Full Info{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Full Info{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox("{COLOR RED}Full Info{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_FULL_INFO)
						if (var(VAR_ZONE) < 3) {
							setflag(FLAG_SYS_DEXNAV_GET)
							setflag(FLAG_SYS_DETECTOR_MODE)
						}
					}
				}
			case 5:
				msgbox(format("The {COLOR RED}Exp. All{COLOR DARK_GRAY} setting, if turned on, gives members of your party that don't participate in battle 25% experience.\pThe game's experience curve is balanced around the Exp. All being turned on, though you may turn it off if you choose."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_EXP_ALL) == true) {
					msgbox(format("The {COLOR RED}Exp. All{COLOR DARK_GRAY} is currently on. Would you like to turn it off?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_OFF)
						msgbox(format("Turned the {COLOR RED}Exp. All{COLOR DARK_GRAY} off."), MSGBOX_DEFAULT)
						waitse
						clearflag(FLAG_SETTINGS_EXP_ALL)
					}
				} else {
					msgbox(format("The {COLOR RED}Exp. All{COLOR DARK_GRAY} is currently off. Would you like to turn it on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox(format("Turned the {COLOR RED}Exp. All{COLOR DARK_GRAY} on."), MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_EXP_ALL)
					}
				}
			case 6:
				call(EventScript_MusicMenu)
			case 7:
				msgbox(format("The {COLOR RED}Challenge{COLOR DARK_GRAY} setting makes battles more difficult.\pSpecial trainers have harder fights and the player is limited in their usage of powerful moves.\pThe AI cannot be PP stalled."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_CHALLENGE) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Challenge{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Challenge{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox(format("{COLOR RED}Challenge{COLOR DARK_GRAY} setting turned off."), MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_CHALLENGE)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Challenge{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Challenge{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox(format("{COLOR RED}Challenge{COLOR DARK_GRAY} setting turned on."), MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_CHALLENGE)
					}
				}
			case 8:
				msgbox(format("The {COLOR RED}Gauntlet{COLOR DARK_GRAY} setting makes all trainers mandatory before leaving a Zone."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_GAUNTLET) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Gauntlet{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Gauntlet{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Gauntlet{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_GAUNTLET)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Gauntlet{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Gauntlet{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox("{COLOR RED}Gauntlet{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_GAUNTLET)
					}
				}
			case 9:
				msgbox(format("The {COLOR RED}Antidoctor{COLOR DARK_GRAY} setting prevents in-battle items from being used during trainer battles.\pPokémon Battle Labyrinth does not have opponents use any items."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_ANTIDOCTOR) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Antidoctor{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Antidoctor{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Antidoctor{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_ANTIDOCTOR)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Antidoctor{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Antidoctor{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox("{COLOR RED}Antidoctor{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_ANTIDOCTOR)
					}
				}
			case 10:
				msgbox(format("The {COLOR RED}Clumsy{COLOR DARK_GRAY} setting enforces Set mode."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_CLUMSY) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Clumsy{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Clumsy{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Clumsy{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_CLUMSY)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Clumsy{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Clumsy{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox("{COLOR RED}Clumsy{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_CLUMSY)
					}
				}
			case 11:
				msgbox(format("The {COLOR RED}Effortless{COLOR DARK_GRAY} setting prevents Pokémon from gaining EVs."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_EFFORTLESS) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Effortless{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Effortless{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Effortless{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_EFFORTLESS)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Effortless{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Effortless{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox("{COLOR RED}Effortless{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_EFFORTLESS)
					}
				}
			case 12:
				msgbox(format("In most Pokémon games, players can farm items and money by growing Berries, Thief, and other means.\pThe {COLOR RED}Red Thumb{COLOR DARK_GRAY} setting disables these ways of infinitely obtaining items."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_RED_THUMB) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Red Thumb{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Red Thumb{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Red Thumb{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_RED_THUMB)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Red Thumb{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_INFINITE) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Red Thumb{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_ON)
							msgbox("{COLOR RED}Red Thumb{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
							waitse
							setflag(FLAG_SETTINGS_RED_THUMB)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingInfinite, MSGBOX_DEFAULT)
					}
				}
			case 13:
				msgbox(format("In most Pokémon games, players can 'grind' experience by defeating wild Pokémon.\pThe {COLOR RED}Antigrind{COLOR DARK_GRAY} setting prevents players from grinding by disabling experience gain from wild Pokémon."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_ANTIGRIND) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Antigrind{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Antigrind{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Antigrind{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_ANTIGRIND)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Antigrind{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Antigrind{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox("{COLOR RED}Antigrind{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_ANTIGRIND)
					}
				}
			case 14:
				msgbox(format("The {COLOR RED}Single-Use{COLOR DARK_GRAY} setting makes all TMs single-use."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_SINGLE_USE) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Single-Use{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Single-Use{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Single-Use{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_SINGLE_USE)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Single-Use{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Single-Use{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox("{COLOR RED}Single-Use{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_SINGLE_USE)
					}
				}
			case 15:
				msgbox(format("The {COLOR RED}Poor{COLOR DARK_GRAY} setting halves the reward money from trainers."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_POOR) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Poor{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Poor{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Poor{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_POOR)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Poor{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Poor{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox("{COLOR RED}Poor{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_POOR)
					}
				}
			case 16:
				msgbox(format("In many Zones, there are hidden items, NPC shops, or free heals you can find.\pThe {COLOR RED}Independent{COLOR DARK_GRAY} setting disables many of these free sources of help."), MSGBOX_DEFAULT)
				if (flag(FLAG_SETTINGS_INDEPENDENT) || flag(FLAG_SETTINGS_BRUTAL)) {
					msgbox(format("The {COLOR RED}Independent{COLOR DARK_GRAY} setting is currently on."), MSGBOX_DEFAULT)
					if (flag(FLAG_SETTINGS_BRUTAL) == false) {
						msgbox(format("Would you like to turn the {COLOR RED}Independent{COLOR DARK_GRAY} setting off?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							playse(SE_PC_OFF)
							msgbox("{COLOR RED}Independent{COLOR DARK_GRAY} setting turned off.", MSGBOX_DEFAULT)
							waitse
							clearflag(FLAG_SETTINGS_INDEPENDENT)
						}
					} else {
						msgbox(gText_Colress_CannotChangeSettingBrutal, MSGBOX_DEFAULT)
					}
				} else {
					msgbox(format("The {COLOR RED}Independent{COLOR DARK_GRAY} setting is currently off."), MSGBOX_DEFAULT)
					msgbox(format("Would you like to turn the {COLOR RED}Independent{COLOR DARK_GRAY} setting on?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						playse(SE_PC_ON)
						msgbox("{COLOR RED}Independent{COLOR DARK_GRAY} setting turned on.", MSGBOX_DEFAULT)
						waitse
						setflag(FLAG_SETTINGS_INDEPENDENT)
					}
				}
				// msgbox(format("Hidden items can be disabled to limit the supply of available items.\pThis is recommended to be used alongside the disabling farming setting."), MSGBOX_DEFAULT)
			case 17:
			case MULTI_B_PRESSED:
				if (var(VAR_TEMP_1) == 1) {
					return
				} else {
					goto(EventScript_WhenUReady)
				}
		}
	}
}

script EventScript_MusicMenu {
	while {
		fadedefaultbgm
		message("Please select a music setting.")
		dynmultichoice(0, 0, FALSE, 4, 0, DYN_MULTICHOICE_CB_NONE, "Wild Battle", "Trainer Battle", "Leviathan Battle", "Back")
		switch (var(VAR_RESULT)) {
			case 0:
				setvar(VAR_TEMP_0, 1)
				while (var(VAR_TEMP_0) == 1) {
					switch (var(VAR_WILD_MUSIC)) {
						case 0:
							playbgm(MUS_VS_WILD, FALSE)
							message("The Wild Pokémon music is\ncurrently set to RSE.")
						case 1:
							playbgm(MUS_RG_VS_WILD, FALSE)
							message("The Wild Pokémon music is\ncurrently set to FRLG.")
						case 2:
							playbgm(MUS_DP_VS_WILD, FALSE)
							message("The Wild Pokémon music is\ncurrently set to DPPt.")
						case 3:
							playbgm(MUS_HG_VS_WILD, FALSE)
							message("The Wild Pokémon music is\ncurrently set to HGSS (Johto).")
						case 4:
							playbgm(MUS_HG_VS_WILD_KANTO, FALSE)
							message("The Wild Pokémon music is\ncurrently set to HGSS (Kanto).")
						case 5:
							// playbgm(MUS_BW_SEQ_BGM_VS_NORAPOKE, FALSE)
							message("The Wild Pokémon music is\ncurrently set to BW.")
					}
					dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "RSE", "FRLG", "DPPt", "HGSS Johto", "HGSS Kanto", "BW")
					switch (var(VAR_RESULT)) {
						case 0:
							setvar(VAR_WILD_MUSIC, 0)
						case 1:
							setvar(VAR_WILD_MUSIC, 1)
						case 2:
							setvar(VAR_WILD_MUSIC, 2)
						case 3:
							setvar(VAR_WILD_MUSIC, 3)
						case 4:
							setvar(VAR_WILD_MUSIC, 4)
						case 5:
							// setvar(VAR_WILD_MUSIC, 5)
							msgbox("The BW Wild Pokémon music is not\nfinished.", MSGBOX_DEFAULT)
						case MULTI_B_PRESSED:
							setvar(VAR_TEMP_0, 0)
					}
				}
			case 1:
				setvar(VAR_TEMP_0, 1)
				while (var(VAR_TEMP_0) == 1) {
					switch (var(VAR_TRAINER_MUSIC)) {
						case 0:
							playbgm(MUS_VS_TRAINER, FALSE)
							message("The Trainer music is\ncurrently set to RSE.")
						case 1:
							playbgm(MUS_RG_VS_TRAINER, FALSE)
							message("The Trainer music is\ncurrently set to FRLG.")
						case 2:
							playbgm(MUS_DP_VS_TRAINER, FALSE)
							message("The Trainer music is\ncurrently set to DPPt.")
						case 3:
							playbgm(MUS_HG_VS_TRAINER, FALSE)
							message("The Trainer music is\ncurrently set to HGSS (Johto).")
						case 4:
							playbgm(MUS_HG_VS_TRAINER_KANTO, FALSE)
							message("The Trainer music is\ncurrently set to HGSS (Kanto).")
						case 5:
							// playbgm(MUS_BW_SEQ_BGM_VS_TRAINER, FALSE)
							message("The Trainer music is\ncurrently set to BW.")
					}
					dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "RSE", "FRLG", "DPPt", "HGSS Johto", "HGSS Kanto", "BW")
					switch (var(VAR_RESULT)) {
						case 0:
							setvar(VAR_TRAINER_MUSIC, 0)
						case 1:
							setvar(VAR_TRAINER_MUSIC, 1)
						case 2:
							setvar(VAR_TRAINER_MUSIC, 2)
						case 3:
							setvar(VAR_TRAINER_MUSIC, 3)
						case 4:
							setvar(VAR_TRAINER_MUSIC, 4)
						case 5:
							// setvar(VAR_TRAINER_MUSIC, 5)
							msgbox("The BW Trainer music is not\nfinished.", MSGBOX_DEFAULT)
						case MULTI_B_PRESSED:
							setvar(VAR_TEMP_0, 0)
					}
				}
			case 2:
				setvar(VAR_TEMP_0, 1)
				while (var(VAR_TEMP_0) == 1) {
					switch (var(VAR_LEVIATHAN_MUSIC)) {
						case 0:
							playbgm(MUS_VS_GYM_LEADER, FALSE)
							message("The Leviathan music is\ncurrently set to RSE.")
						case 1:
							playbgm(MUS_RG_VS_GYM_LEADER, FALSE)
							message("The Leviathan music is\ncurrently set to FRLG.")
						case 2:
							playbgm(MUS_DP_VS_GYM_LEADER, FALSE)
							message("The Leviathan music is\ncurrently set to DPPt.")
						case 3:
							playbgm(MUS_HG_VS_GYM_LEADER, FALSE)
							message("The Leviathan music is\ncurrently set to HGSS (Johto).")
						case 4:
							playbgm(MUS_HG_VS_GYM_LEADER_KANTO, FALSE)
							message("The Leviathan music is\ncurrently set to HGSS (Kanto).")
						case 5:
							// playbgm(MUS_BW_SEQ_BGM_VS_GYMLEADER, FALSE)
							message("The Leviathan music is\ncurrently set to BW.")
					}
					dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "RSE", "FRLG", "DPPt", "HGSS Johto", "HGSS Kanto", "BW")
					switch (var(VAR_RESULT)) {
						case 0:
							setvar(VAR_LEVIATHAN_MUSIC, 0)
						case 1:
							setvar(VAR_LEVIATHAN_MUSIC, 1)
						case 2:
							setvar(VAR_LEVIATHAN_MUSIC, 2)
						case 3:
							setvar(VAR_LEVIATHAN_MUSIC, 3)
						case 4:
							setvar(VAR_LEVIATHAN_MUSIC, 4)
						case 5:
							// setvar(VAR_LEVIATHAN_MUSIC, 5)
							msgbox("The BW Leviathan music is not\nfinished.", MSGBOX_DEFAULT)
						case MULTI_B_PRESSED:
							setvar(VAR_TEMP_0, 0)
					}
				}
			case 3:
			case MULTI_B_PRESSED:
				return
		}
	}
}

script EventScript_SignsQuestGirl {
	lock
	faceplayer
	questmenu(QUEST_MENU_CHECK_UNLOCKED, QUEST_SIGNS)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(format("Hiya! I'm improving on my reading skills!\pYou should work on your reading skills too!\pIf you read all the signs in the Pokémon Battle Labyrinth, I'll give you a nice reward!"))
		startquest(QUEST_SIGNS)
	}
	msgbox(format("Signs have lots of useful info about unique mechanics to the Pokémon Battle Labyrinth!\pYou can improve your reading skills while learning more about the challenges at hand!"))
	release
	end
}

script EventScript_SavesQuestBoy {
	lock
	faceplayer
	questmenu(QUEST_MENU_CHECK_UNLOCKED, QUEST_SAVES)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(format("Saving your progress is important while playing games.\pI learned that the hard way!\pDon't be like me!\pI'll give you something if you can save the game 50 times!"))
		startquest(QUEST_SAVES)
	}
	questmenu(QUEST_MENU_CHECK_COMPLETE, QUEST_SAVES)
	if (var(VAR_RESULT) == FALSE) {
		callnative(SavesQuestCheckIfDone)
		if (flag(FLAG_TEMP_6) == TRUE) {
			msgbox(format("Wow!\pYou really went and saved 50 times?\pThat's crazy.\pHere's a little something for you as a reward!"))
			giveitem(ITEM_ROTOM_CATALOG)
			msgbox(format("I've heard this nifty little item is useful if you have a Rotom.\pWhich I, unfortunately, do not.\pI hope you put it to better use!"))
			completequest(QUEST_SAVES)
		}
	}
	msgbox(format("Don't forget to save your game!"))
	release
	end
}

script EventScript_PokedexQuestScientist {
	lock
	faceplayer
	questmenu(QUEST_MENU_CHECK_UNLOCKED, QUEST_POKEDEX)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(format("Kids these days are always neglecting filling their Pokédex!\pIf you can show me a Pokédex that's seen all the Pokémon in existence, I'll reward you!"))
		startquest(QUEST_POKEDEX)
	}
	msgbox(format("Seeing all the Pokémon is tough enough.\pImagine capturing them all!"))
	release
	end
}

script EventScript_WarpZone0 {
	closemessage
	playmoncry(SPECIES_PORYGON, 0)
	waitmoncry
	clearflag(FLAG_IS_REVISITING_ZONE)
	setvar(VAR_REVISITING_ZONE, 0)
	warp(MAP_ZONE0A, 1, 255, 255)
	waitstate
	releaseall
	end
}

text gText_ItemChestIsEmpty {
	format("The item chest is empty.")
}

// script Zone_EventScript_RetirePrompt {
// 	lockall
// 	showmoneybox(0, 0, 0)
// 	msgbox(format("Would you like to retire your attempt at this Zone?\pYou will lose all your progress so far and any money you received from trainers, as well as half of your remaining money.\pAre you sure you want to return to the Sanctuary?"), MSGBOX_YESNO)
// 	if (var(VAR_RESULT) == NO) {
// 		closemessage
// 		hidemoneybox
// 		releaseall
// 		end
// 	}
// 	clearflag(FLAG_IN_NEW_ZONE)
// 	removemoney(0)
// 	updatemoneybox
// 	msgbox(format("Warping now…"))
// 	switch (var(VAR_ZONE)) {
// 		case 1:
// 			cleartrainerflag(TRAINER_PBL_NINA)
// 			cleartrainerflag(TRAINER_PBL_MARIAM)
// 			cleartrainerflag(TRAINER_PBL_OSCAR)
// 			clearflag(FLAG_BEAT_LEVIATHAN_1)
// 			setvar(VAR_ZONE_1_STATE, 0)
// 			warpteleport(MAP_ZONE_SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 2:
// 			cleartrainerflag(TRAINER_PBL_POLLY)
// 			cleartrainerflag(TRAINER_PBL_JEREMIAH)
// 			cleartrainerflag(TRAINER_PBL_HARPER)
// 			cleartrainerflag(TRAINER_PBL_ARTHUR)
// 			clearflag(FLAG_BEAT_LEVIATHAN_2)
// 			setvar(VAR_ZONE_2_STATE, 0)
// 			warpteleport(MAP_ZONE1SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 3:
// 			cleartrainerflag(TRAINER_PBL_JEMMA)
// 			cleartrainerflag(TRAINER_PBL_PATRICK)
// 			cleartrainerflag(TRAINER_PBL_BORIS)
// 			cleartrainerflag(TRAINER_PBL_ANNABELLE)
// 			cleartrainerflag(TRAINER_PBL_RICHARD)
// 			clearflag(FLAG_BEAT_LEVIATHAN_3)
// 			setvar(VAR_ZONE_3_STATE, 0)
// 			warpteleport(MAP_ZONE2SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 4:
// 			cleartrainerflag(TRAINER_PBL_HERMAN)
// 			cleartrainerflag(TRAINER_PBL_RALPH)
// 			cleartrainerflag(TRAINER_PBL_SANTIAGO)
// 			cleartrainerflag(TRAINER_PBL_CHLOE_AND_KAYA)
// 			cleartrainerflag(TRAINER_PBL_FRED)
// 			cleartrainerflag(TRAINER_PBL_LUCIA)
// 			clearflag(FLAG_BEAT_LEVIATHAN_4)
// 			setvar(VAR_ZONE_4_STATE, 0)
// 			warpteleport(MAP_ZONE3SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 5:
// 			cleartrainerflag(TRAINER_PBL_ANNE_AND_JUNE)
// 			cleartrainerflag(TRAINER_PBL_GILBERT)
// 			cleartrainerflag(TRAINER_PBL_REBECCA)
// 			cleartrainerflag(TRAINER_PBL_RYAN)
// 			cleartrainerflag(TRAINER_PBL_CAITLYN)
// 			cleartrainerflag(TRAINER_PBL_KENNETH)
// 			cleartrainerflag(TRAINER_PBL_CLINTON)
// 			clearflag(FLAG_BEAT_LEVIATHAN_5)
// 			setvar(VAR_ZONE_5_STATE, 0)
// 			warpteleport(MAP_ZONE4SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 6:
// 			cleartrainerflag(TRAINER_PBL_ZACK)
// 			cleartrainerflag(TRAINER_PBL_MELANIE)
// 			cleartrainerflag(TRAINER_PBL_CONSTANCE)
// 			cleartrainerflag(TRAINER_PBL_FRANK)
// 			cleartrainerflag(TRAINER_PBL_DUDLEY)
// 			cleartrainerflag(TRAINER_PBL_DAISY)
// 			clearflag(FLAG_BEAT_LEVIATHAN_6)
// 			setvar(VAR_ZONE_6_STATE, 0)
// 			warpteleport(MAP_ZONE5SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 7:
// 			cleartrainerflag(TRAINER_PBL_MILLIE)
// 			cleartrainerflag(TRAINER_PBL_PAIGE)
// 			cleartrainerflag(TRAINER_PBL_SETH)
// 			cleartrainerflag(TRAINER_PBL_JAMAL)
// 			cleartrainerflag(TRAINER_PBL_CONNIE)
// 			clearflag(FLAG_BEAT_LEVIATHAN_7)
// 			cleartrainerflag(TRAINER_PBL_JIMMY)
// 			cleartrainerflag(TRAINER_PBL_EMILIANO)
// 			cleartrainerflag(TRAINER_PBL_KAREN)
// 			cleartrainerflag(TRAINER_PBL_JAYDEN)
// 			cleartrainerflag(TRAINER_PBL_NEIL)
// 			cleartrainerflag(TRAINER_PBL_TAMARA)
// 			clearflag(FLAG_BEAT_LEVIATHAN_8)
// 			clearflag(FLAG_HIDE_ZONE8D_WALLY)
// 			setvar(VAR_ZONE_8_STATE, 0)
// 			warpteleport(MAP_ZONE6SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 9:
// 			cleartrainerflag(TRAINER_PBL_COOPER)
// 			cleartrainerflag(TRAINER_PBL_CARMINE)
// 			clearflag(FLAG_HIDE_ZONE9A_ARI_WINSTRATE)
// 			warpteleport(MAP_ZONE8SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 10:
// 			cleartrainerflag(TRAINER_PBL_KYLE)
// 			cleartrainerflag(TRAINER_PBL_BELLE)
// 			cleartrainerflag(TRAINER_PBL_DEWEY)
// 			cleartrainerflag(TRAINER_PBL_PEARLIE)
// 			cleartrainerflag(TRAINER_PBL_ERNEST)
// 			cleartrainerflag(TRAINER_PBL_ALANA)
// 			cleartrainerflag(TRAINER_PBL_SUSAN)
// 			cleartrainerflag(TRAINER_PBL_CONRAD)
// 			clearflag(FLAG_BEAT_LEVIATHAN_9)
// 			warpteleport(MAP_ZONE9SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 11:
// 			cleartrainerflag(TRAINER_PBL_JEANETTE)
// 			cleartrainerflag(TRAINER_PBL_EMMA_AND_LEO)
// 			cleartrainerflag(TRAINER_PBL_REGINA)
// 			cleartrainerflag(TRAINER_PBL_JOEL)
// 			clearflag(FLAG_BEAT_LEVIATHAN_10)
// 			setvar(VAR_ZONE_11_STATE, 0)
// 			warpteleport(MAP_ZONE10SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 12:
// 			cleartrainerflag(TRAINER_PBL_ESSENCE)
// 			cleartrainerflag(TRAINER_PBL_DOLORES)
// 			cleartrainerflag(TRAINER_PBL_TREVOR)
// 			cleartrainerflag(TRAINER_PBL_RANDOLPH)
// 			cleartrainerflag(TRAINER_PBL_FEDERICO)
// 			cleartrainerflag(TRAINER_PBL_GENIE)
// 			cleartrainerflag(TRAINER_PBL_HILDA)
// 			cleartrainerflag(TRAINER_PBL_KINLEY)
// 			clearflag(FLAG_HIDE_ZONE12A_CAMPER_PICNICKER)
// 			setvar(VAR_ZONE_12_STATE, 0)
// 			warpteleport(MAP_ZONE11SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 13:
// 			cleartrainerflag(TRAINER_PBL_VIOLET)
// 			cleartrainerflag(TRAINER_PBL_WANDA)
// 			cleartrainerflag(TRAINER_PBL_AMBER_AND_KIM)
// 			cleartrainerflag(TRAINER_PBL_JAN_AND_ERIN)
// 			cleartrainerflag(TRAINER_PBL_STEVE)
// 			cleartrainerflag(TRAINER_PBL_GOULD)
// 			cleartrainerflag(TRAINER_PBL_MENDEL)
// 			cleartrainerflag(TRAINER_PBL_DARWIN)
// 			cleartrainerflag(TRAINER_PBL_BART)
// 			cleartrainerflag(TRAINER_PBL_NIGEL)
// 			cleartrainerflag(TRAINER_PBL_LOLA)
// 			cleartrainerflag(TRAINER_PBL_CHARLIE)
// 			cleartrainerflag(TRAINER_PBL_TODD)
// 			cleartrainerflag(TRAINER_PBL_RUSSELL)
// 			cleartrainerflag(TRAINER_PBL_OTIS)
// 			clearflag(FLAG_BEAT_LEVIATHAN_11)
// 			clearflag(FLAG_BEAT_LEVIATHAN_12)
// 			warpteleport(MAP_ZONE12SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 15:
// 			clearflag(FLAG_BEAT_LEVIATHAN_13)
// 			setvar(VAR_ZONE_15_STATE, 0)
// 			warpteleport(MAP_ZONE14SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 16:
//         	cleartrainerflag(TRAINER_PBL_IONA)
//         	cleartrainerflag(TRAINER_PBL_BERKE)
//         	cleartrainerflag(TRAINER_PBL_TANISHA)
//         	cleartrainerflag(TRAINER_PBL_ROBERT)
//         	cleartrainerflag(TRAINER_PBL_CHRIS)
//         	cleartrainerflag(TRAINER_PBL_ANGUS)
//         	clearflag(FLAG_BEAT_LEVIATHAN_14)
// 			setvar(VAR_ZONE_16_STATE, 0)
// 			warpteleport(MAP_ZONE15SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 17:
//         	cleartrainerflag(TRAINER_PBL_AXLE)
//         	cleartrainerflag(TRAINER_PBL_RAFAEL)
//         	cleartrainerflag(TRAINER_PBL_GEORGINA)
//         	clearflag(FLAG_BEAT_LEVIATHAN_15)
// 			setvar(VAR_ZONE_17_STATE, 0)
// 			warpteleport(MAP_ZONE16SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 18:
//         	cleartrainerflag(TRAINER_PBL_DORIS)
//         	cleartrainerflag(TRAINER_PBL_HOMER)
//         	cleartrainerflag(TRAINER_PBL_JOHN)
//         	cleartrainerflag(TRAINER_PBL_GLENN)
//         	cleartrainerflag(TRAINER_PBL_JAY)
//         	cleartrainerflag(TRAINER_PBL_TYLER)
//         	cleartrainerflag(TRAINER_PBL_TERRENCE)
//         	cleartrainerflag(TRAINER_PBL_MARTY)
//         	cleartrainerflag(TRAINER_PBL_KARI)
//         	cleartrainerflag(TRAINER_PBL_ABRAHAM)
//         	cleartrainerflag(TRAINER_PBL_MELINDA)
//         	cleartrainerflag(TRAINER_PBL_EMILIO)
//         	cleartrainerflag(TRAINER_PBL_REX)
//         	cleartrainerflag(TRAINER_PBL_LOUIS)
//         	cleartrainerflag(TRAINER_PBL_LEROY)
//         	cleartrainerflag(TRAINER_PBL_ELTON)
//         	cleartrainerflag(TRAINER_PBL_WILLIE)
//         	clearflag(FLAG_BEAT_LEVIATHAN_16)
// 			setvar(VAR_ZONE_18_STATE, 0)
// 			setvar(VAR_ZONE_19_STATE, 0)
// 			clearflag(FLAG_HIDE_ZONE18A_ZOE)
// 			clearflag(FLAG_HIDE_ZONE18A_ELI)
// 			clearflag(FLAG_HIDE_ZONE18A_DOLL)
// 			warpteleport(MAP_ZONE17SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 20:
//         	cleartrainerflag(TRAINER_PBL_SHAWN)
//         	cleartrainerflag(TRAINER_PBL_FERNANDO)
//         	cleartrainerflag(TRAINER_PBL_KANE)
//         	cleartrainerflag(TRAINER_PBL_KIRK)
//         	cleartrainerflag(TRAINER_PBL_DALTON)
//         	cleartrainerflag(TRAINER_PBL_LEE)
//         	cleartrainerflag(TRAINER_PBL_BLANCHE)
//         	clearflag(FLAG_BEAT_LEVIATHAN_17)
// 			setvar(VAR_ZONE_20_STATE, 0)
// 			warpteleport(MAP_ZONE20SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 21:
// 			warpteleport(MAP_ZONE20SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 22:
// 			warpteleport(MAP_ZONE21SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 23:
// 			warpteleport(MAP_ZONE22SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 24:
// 			warpteleport(MAP_ZONE23SANCTUARY, 255, 38, 11)
// 			waitstate
// 		case 26:
// 			warpteleport(MAP_ZONE25SANCTUARY, 255, 38, 11)
// 			waitstate
// 	}
// 	releaseall
// 	end
// }

text gText_OneOpponentRemaining {
	format("{COLOR RED}There is 1 opponent remaining in this area.")
}

text gText_MultipleOpponentsRemaining {
	"{COLOR RED}There are still {STR_VAR_1} opponents\nremaining in the area."
}

script EventScript_NuzlockeVerifyBuy {
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		msgbox(format("On Nuzlocke mode, you will randomly receive one of the possible Pokémon.\pIs this ok?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			hidemoneybox
			release
			end
		}
	}
	return
}

script EventScript_NuzlockeVerifyGift {
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		msgbox(format("On Nuzlocke mode, you will randomly receive one of the possible Pokémon.\pIs this ok?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			release
			end
		}
	}
	return
}

script EventScript_PorygonExit {
    lock
	faceplayer
	if (var(VAR_REVISITING_ZONE) != 0) {
		goto(EventScript_WarpZone0)
	}
	call(EventScript_MandatoryCheck)
	msgbox(format("Proceed to the {COLOR GREEN}Sanctuary{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		closemessage
		playmoncry(SPECIES_PORYGON, 0)
		waitmoncry
		setvar(VAR_GENERIC, 1)
		warp(MAP_ZONE_SANCTUARY, 255, 38, 11)
		waitstate
	}
    release
    end
}

raw `
EventScript_ExitSign::
	msgbox gText_ExitSign, MSGBOX_SIGN
	end
`

script EventScript_ShakeTree {
	lockall
	msgbox("There's a sweet aroma in the air…\nWould you like to shake the tree?", MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		closemessage
		releaseall
		end
	}
	msgbox(format("{PLAYER} shook the tree!"), MSGBOX_DEFAULT)
	closemessage
	setvar(VAR_0x8004, 1)
	setvar(VAR_0x8005, 1)
	setvar(VAR_0x8006, 8)
	setvar(VAR_0x8007, 5)
	special(ShakeCamera)
	playse(SE_M_BIND)
	waitstate
	waitse
	special(HeadbuttWildEncounter)
	if (var(VAR_RESULT) == TRUE) {
		waitstate
	} elif ((flag(FLAG_SETTINGS_BRUTAL) == FALSE) && (flag(FLAG_SETTINGS_RED_THUMB) == FALSE)) {
		random(70) // 30% headbutt encounter, so remaining 70%
		switch(var(VAR_RESULT)) {
			case 0:
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
			case 18:
			case 19:
				msgbox(format("A Berry fell from the tree!"))
				finditem(ITEM_ORAN_BERRY, 1)
			case 20:
			case 21:
			case 22:
				if (var(VAR_ZONE) > 2) {
					msgbox(format("A Berry fell from the tree!"))
					finditem(ITEM_CHERI_BERRY, 1)
				}
			case 23:
			case 24:
			case 25:
				if (var(VAR_ZONE) > 2) {
					msgbox(format("A Berry fell from the tree!"))
					finditem(ITEM_CHESTO_BERRY, 1)
				}
			case 26:
			case 27:
			case 28:
				if (var(VAR_ZONE) > 2) {
					msgbox(format("A Berry fell from the tree!"))
					finditem(ITEM_PECHA_BERRY, 1)
				}
			case 29:
			case 30:
			case 31:
				if (var(VAR_ZONE) > 2) {
					msgbox(format("A Berry fell from the tree!"))
					finditem(ITEM_ASPEAR_BERRY, 1)
				}
			case 32:
			case 33:
			case 34:
				if (var(VAR_ZONE) > 2) {
					msgbox(format("A Berry fell from the tree!"))
					finditem(ITEM_PERSIM_BERRY, 1)
				}
			case 35:
			case 36:
			case 37:
			case 38:
			case 39:
				if (var(VAR_ZONE) > 8) {
					msgbox(format("A Berry fell from the tree!"))
					finditem(ITEM_SITRUS_BERRY, 1)
				}
			case 40:
				if (var(VAR_ZONE) > 20) {
					msgbox(format("A Berry fell from the tree!"))
					finditem(ITEM_LUM_BERRY, 1)
				}
		}
	}
	releaseall
	end
}

script EventScript_HandleFlashlight {
	if (checkitem(ITEM_FLASHLIGHT) == TRUE) {
		setflashlevel(2)
	} else {
		setflashlevel(6)
	}
	return
}

script EventScript_RecoverySign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_1)
	msgbox("Joy's Center of Restoration\nA meeting place for everyone!", MSGBOX_SIGN)
	end
}

script EventScript_MedicineSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_2)
	msgbox("Portentia's Potions\nCurated Medicines!", MSGBOX_SIGN)
	end
}

script EventScript_PokeballSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_3)
	msgbox("Tim's Pokéball Shop\nSponsored by Pokémart Inc.", MSGBOX_SIGN)
	end
}

script EventScript_ItemsSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_4)
	msgbox("Varrick's Extravagant Emporium\nA Fine Collection!", MSGBOX_SIGN)
	end
}

script EventScript_BerriesSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_5)
	msgbox("Julia's Berries\nOnly the Berry best!", MSGBOX_SIGN)
	end
}

script EventScript_EggsSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_6)
	msgbox("Marie's Egg Delivery Service\nCome meet your next friend!", MSGBOX_SIGN)
	end
}

script EventScript_ServicesSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_7)
	msgbox("Lelouch's Services Shop\nAnything for the right price…", MSGBOX_SIGN)
	end
}

script Zone0A_EventScript_TPISign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_8)
	msgbox(format("Teleport Institute\nGetting around, easy peasy."), MSGBOX_SIGN)
	end
}

script Zone0A_EventScript_DayCareSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_9)
	msgbox(format("Pokémon Day Care\n9 Generations and counting!"), MSGBOX_SIGN)
	end
}

script Zone1A_EventScript_Sign_GoldenTree {
	completesubquest(QUEST_SIGNS, SUB_QUEST_10)
	msgbox(format("Trainer Tips\pShaking a Golden Tree might drop berries, though occasionally you'll disturb the wild Pokémon living in the tree!"), MSGBOX_SIGN)
	end
}

script Zone1A_EventScript_PorygonSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_11)
	msgbox(format("Trainer Tips\pEvery Zone has its own challenges.\nIn order to reach the Sanctuary and clear a Zone, you must find {COLOR RED}Porygon{COLOR DARK_GRAY}."), MSGBOX_DEFAULT)
	showmonpic(SPECIES_PORYGON, 10, 3)
	setseenmon(SPECIES_PORYGON)
	waitbuttonpress
	hidemonpic
	release
	end
}

script Zone1A_EventScript_Sign_RunningShoes {
	completesubquest(QUEST_SIGNS, SUB_QUEST_12)
	msgbox(format("Trainer Tips\pPress {L_BUTTON} to enable or disable Auto Run."), MSGBOX_SIGN)
	end
}

script Zone2A_EventScript_Sign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_13)
	msgbox(format("Trainer Tips\pYou may find hidden items by checking certain tiles with {A_BUTTON}.\pHowever, you won't find any hidden items on Brutal or Independent."), MSGBOX_SIGN)
	end
}

script Zone2A_EventScript_ExpShareSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_14)
	msgbox(format("Trainer Tips\pThe Exp. All only gives Pokémon who didn't participate in battle 25% experience.\pIf you want to train up a particular Pokémon, you can give them the held item Exp. Share so they get full experience!"), MSGBOX_SIGN)
	end
}

script Zone2A_EventScript_CautionSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_15)
	msgbox(format("Caution!\pDiglett have been found living inside the tunnel.\pRepels recommended!"), MSGBOX_SIGN)
	end
}

script Zone2B_EventScript_CautionSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_13)
	msgbox(format("Caution!\pDiglett have been found living inside the tunnel.\pRepels recommended!"), MSGBOX_SIGN)
	end
}

script Zone2B_EventScript_PartySelectSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_16)
	msgbox(format("Trainer Tips\pYou can switch the order of your party around in your party menu faster by pressing {SELECT_BUTTON}."), MSGBOX_SIGN)
	end
}

script Zone2B_EventScript_OptionalLeviathan {
	completesubquest(QUEST_SIGNS, SUB_QUEST_17)
	msgbox(format("Trainer Tips\pIn some Zones, Leviathans are optional to battle, but may give good rewards when defeated!"), MSGBOX_SIGN)
	end
}

script Zone3A_EventScript_Surveil {
	completesubquest(QUEST_SIGNS, SUB_QUEST_18)
	msgbox(format("Trainer Tips\pIn battle, you can use Surveil to see the opponent's team.\pIf you want to see full team information, you can turn on the Full Info setting by speaking to Colress."), MSGBOX_SIGN)
	end
}

script Zone4A_EventScript_Sign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_19)
	msgbox(format("These woods are enchanted…\nDon't get lost!"), MSGBOX_SIGN)
	end
}

script Zone4B_EventScript_Sign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_20)
	msgbox(format("Trainer Tips\pYou can see detailed information about a Pokémon species in its Pokédex entry after capturing it, such as what moves it learns or how to evolve it."), MSGBOX_SIGN)
	end
}

script Zone4C_EventScript_Sign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_21)
	msgbox(format("Trainer Tips\pStarting from now, there is a 20% chance to encounter wild Pokémon in a Double Battle."), MSGBOX_SIGN)
	end
}

script Zone4D_EventScript_Sign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_22)
	msgbox(format("Trainer Tips\pSome areas require backtracking later on in order to access them."), MSGBOX_SIGN)
	end
}

script Zone4E_EventScript_Sign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_23)
	msgbox(format("Trainer Tips\pThe Pokémon you encounter in different areas of the same zone may have slight differences!"), MSGBOX_SIGN)
	end
}

script Zone6A_EventScript_Sign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_24)
	msgbox(format("Trainer Tips\pYou can sort items in the Bag using {START_BUTTON}."), MSGBOX_SIGN)
	end
}

script Zone7A_EventScript_Sign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_25)
	msgbox(format("Trainer Tips\pYou can change the music you hear in battle by speaking to Colress!"), MSGBOX_SIGN)
	end
}

script Zone7A_EventScript_HealSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_26)
	msgbox(format("A stop for weary travelers."), MSGBOX_SIGN)
	end
}

script Zone9A_EventScript_Sign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_27)
	msgbox(format("Trainer Tips\pWhile you are on the Pokémon stats screen, you can press {A_BUTTON} to switch between stats, IVs, or EVs."), MSGBOX_SIGN)
	end
}

script Zone9A_EventScript_HerbalSign {
	completesubquest(QUEST_SIGNS, SUB_QUEST_28)
	msgbox(format("Herbal and Incense Shop"), MSGBOX_SIGN)
	end
}

script EventScript_Collector {
	lock
	faceplayer
	if (flag(FLAG_ZONE0A_SAFARI_INTRO) == false) {
		msgbox(format("Hello there!\pAre you interested in seeing Pokémon you might not be able to see elsewhere?\pCome and see my Safari Zones!\pFor beginning Safari enjoyers, one area is unlocked and accessible.\pYou can pay to unlock more areas, unlocking access to more rare Pokémon!"))
		setflag(FLAG_ZONE0A_SAFARI_INTRO)
	}
	message("Where do you want to go?")
	waitmessage
	dynmultipush("{COLOR GREEN}S1 - Beginner Safari", 1)
	if (var(VAR_REVISITING_ZONE) == 0) {
		dynmultipush("Exit", 11)
	} else {
		dynmultipush("Return to Zone 0", 11)
	}
	dynmultistack(21, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
	switch (var(VAR_RESULT)) {
		case 1:
			msgbox(format("Alright, let's go!"), MSGBOX_AUTOCLOSE)
			setvar(VAR_REVISITING_ZONE, 1)
			warp(MAP_ZONE_S1A, 255, 11, 18)
			waitstate
		case 11:
			if (var(VAR_REVISITING_ZONE) == 0) {
				msgbox(format("See you around sometime."))
			} else {
				setvar(VAR_REVISITING_ZONE, 0)
				warp(MAP_ZONE0A, 255, 71, 9)
				waitstate
			}
		case MULTI_B_PRESSED:
			msgbox(format("See you around sometime."))
	}
	release
	end
}

script Debug_CheatStart_PBL {
	setflag(FLAG_PORTENTIA_INTRO)
	setflag(FLAG_TIM_INTRO)
	setflag(FLAG_VARRICK_INTRO)
	setflag(FLAG_JULIA_INTRO)
	setflag(FLAG_LELOUCH_INTRO)
	setflag(FLAG_MARIE_INTRO)
	setflag(FLAG_JOY_INTRO)
	// music
	random(5)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TRAINER_MUSIC, 0)
		case 1:
			setvar(VAR_TRAINER_MUSIC, 1)
		case 2:
			setvar(VAR_TRAINER_MUSIC, 2)
		case 3:
			setvar(VAR_TRAINER_MUSIC, 3)
		case 4:
			setvar(VAR_TRAINER_MUSIC, 4)
	}
	random(5)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_WILD_MUSIC, 0)
		case 1:
			setvar(VAR_WILD_MUSIC, 1)
		case 2:
			setvar(VAR_WILD_MUSIC, 2)
		case 3:
			setvar(VAR_WILD_MUSIC, 3)
		case 4:
			setvar(VAR_WILD_MUSIC, 4)
	}
	random(5)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_LEVIATHAN_MUSIC, 0)
		case 1:
			setvar(VAR_LEVIATHAN_MUSIC, 1)
		case 2:
			setvar(VAR_LEVIATHAN_MUSIC, 2)
		case 3:
			setvar(VAR_LEVIATHAN_MUSIC, 3)
		case 4:
			setvar(VAR_LEVIATHAN_MUSIC, 4)
	}
	additem(ITEM_RARE_CANDY, 900)
	removemoney(2000)
	additem(ITEM_POTION, 6)
	additem(ITEM_PARALYZE_HEAL, 2)
	additem(ITEM_ANTIDOTE, 2)
	setvar(VAR_ZONE_0_STATE, 1)
	setflag(FLAG_ZONE0B_RECEIVED_EEVEE)
	givemon(SPECIES_EEVEE, 5, ITEM_NONE)
	// zone 0 items
	additem(ITEM_WAILMER_PAIL)
	additem(ITEM_ORAN_BERRY, 2)
	questmenu(QUEST_MENU_SET_ACTIVE, QUEST_SIGNS)
	questmenu(QUEST_MENU_SET_ACTIVE, QUEST_SAVES)
	questmenu(QUEST_MENU_SET_ACTIVE, QUEST_POKEDEX)
	completesubquest(QUEST_SIGNS, SUB_QUEST_1)
	completesubquest(QUEST_SIGNS, SUB_QUEST_2)
	completesubquest(QUEST_SIGNS, SUB_QUEST_3)
	completesubquest(QUEST_SIGNS, SUB_QUEST_4)
	completesubquest(QUEST_SIGNS, SUB_QUEST_5)
	completesubquest(QUEST_SIGNS, SUB_QUEST_6)
	completesubquest(QUEST_SIGNS, SUB_QUEST_7)
	completesubquest(QUEST_SIGNS, SUB_QUEST_8)
	completesubquest(QUEST_SIGNS, SUB_QUEST_9)
	setflag(FLAG_ZONE0B_SHOWN_POKEDEX_ENTRIES)
	// zone 0
	setvar(VAR_TEMP_0, 0) // wild define gWildMonHeaders in src/data/wild_encounters.h
	msgbox(format("Zone 0 grass?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		setflag(FLAG_TEMP_1) // special encounter
	}
	setvar(VAR_TEMP_1, 3) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	// zone 1
	message(format("Zone 1 options"))
	dynmultichoice(0, 0, FALSE, 3, 0, DYN_MULTICHOICE_CB_NONE, "Grass", "Tree")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 1) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 1) // wild define gWildMonHeaders in src/data/wild_encounters.h
			setflag(FLAG_TEMP_1) // special encounter
		case MULTI_B_PRESSED:
			closemessage
			setvar(VAR_ZONE, 1)
			setvar(VAR_LEVEL_CAP, 7)
			warp(MAP_ZONE_SANCTUARY, 255, 38, 11)
			waitstate
			end
	}
	call(Debug_CheatStart_PBL_GenerateMon)
	// zone 1 gwf
	message(format("Zone 1 gwf"))
	dynmultichoice(0, 0, TRUE, 3, 0, DYN_MULTICHOICE_CB_NONE, "Grass", "Fire", "Water")
	switch (var(VAR_RESULT)) {
		case 0:
			random(4)
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_0, SPECIES_PANSAGE)
				case 1:
					setvar(VAR_TEMP_0, SPECIES_GOSSIFLEUR)
				case 2:
					setvar(VAR_TEMP_0, SPECIES_SUNKERN)
				case 3:
					setvar(VAR_TEMP_0, SPECIES_CHERUBI)
			}
		case 1:
			random(4)
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_0, SPECIES_PANSEAR)
				case 1:
					setvar(VAR_TEMP_0, SPECIES_VULPIX)
				case 2:
					setvar(VAR_TEMP_0, SPECIES_SLUGMA)
				case 3:
					setvar(VAR_TEMP_0, SPECIES_LITLEO)
			}
		case 2:
			random(4)
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_0, SPECIES_PANPOUR)
				case 1:
					setvar(VAR_TEMP_0, SPECIES_BARBOACH)
				case 2:
					setvar(VAR_TEMP_0, SPECIES_GOLDEEN)
				case 3:
					setvar(VAR_TEMP_0, SPECIES_FINNEON)
			}
	}
	setvar(VAR_TEMP_1, 5) // level
	call(Debug_CheatStart_PBL_GiveMon)
	setflag(FLAG_ZONE1A_RECEIVED_FWG)
	completesubquest(QUEST_PBL, SUB_QUEST_1)
	// zone 1 items
	additem(ITEM_QUICK_CLAW)
	additem(ITEM_EXP_SHARE)
	additem(ITEM_INFINITE_REPEL)
	completesubquest(QUEST_SIGNS, SUB_QUEST_10)
	completesubquest(QUEST_SIGNS, SUB_QUEST_11)
	completesubquest(QUEST_SIGNS, SUB_QUEST_12)
	settrainerflag(TRAINER_PBL_NINA)
	settrainerflag(TRAINER_PBL_MARIAM)
	settrainerflag(TRAINER_PBL_OSCAR)
	setflag(FLAG_BEAT_LEVIATHAN_1)
	// zone 2
	message(format("Zone 2 options"))
	dynmultichoice(0, 0, FALSE, 3, 0, DYN_MULTICHOICE_CB_NONE, "Grass A", "Tunnel", "Grass B")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 2) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 4) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 2:
			setvar(VAR_TEMP_0, 3) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case MULTI_B_PRESSED:
			closemessage
			setvar(VAR_ZONE, 2)
			setvar(VAR_LEVEL_CAP, 9)
			end
	}
	setvar(VAR_TEMP_1, 5) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	// zone 2 bug
	random(10)
	switch (var(VAR_RESULT)) {
		case 0:
		case 1:
			setvar(VAR_TEMP_0, SPECIES_WURMPLE)
		case 2:
			setvar(VAR_TEMP_0, SPECIES_CATERPIE)
		case 3:
			setvar(VAR_TEMP_0, SPECIES_WEEDLE)
		case 4:
			setvar(VAR_TEMP_0, SPECIES_SCATTERBUG)
		case 5:
			setvar(VAR_TEMP_0, SPECIES_SPINARAK)
		case 6:
			setvar(VAR_TEMP_0, SPECIES_LEDYBA)
		case 7:
			setvar(VAR_TEMP_0, SPECIES_KRICKETOT)
		case 8:
			setvar(VAR_TEMP_0, SPECIES_TAROUNTULA)
		case 9:
			setvar(VAR_TEMP_0, SPECIES_SEWADDLE)
	}
	setvar(VAR_TEMP_1, 6) // level
	call(Debug_CheatStart_PBL_GiveMon)
	setflag(FLAG_ZONE2B_NUZLOCKE_BOUGHT_BUG)
	completesubquest(QUEST_PBL, SUB_QUEST_2)
	// zone 2 items
	additem(ITEM_SILK_SCARF)
	additem(ITEM_TM_BUG_BITE)
	additem(ITEM_ORAN_BERRY, 5)
	additem(ITEM_CHERI_BERRY, 2)
	additem(ITEM_CHESTO_BERRY, 2)
	additem(ITEM_RAWST_BERRY, 2)
	additem(ITEM_ASPEAR_BERRY, 2)
	additem(ITEM_PECHA_BERRY, 2)
	setflag(FLAG_SYS_DEXNAV_GET)
	setflag(FLAG_SYS_DEXNAV_SEARCH)
	completesubquest(QUEST_SIGNS, SUB_QUEST_13)
	completesubquest(QUEST_SIGNS, SUB_QUEST_14)
	completesubquest(QUEST_SIGNS, SUB_QUEST_15)
	completesubquest(QUEST_SIGNS, SUB_QUEST_16)
	completesubquest(QUEST_SIGNS, SUB_QUEST_17)
	settrainerflag(TRAINER_PBL_POLLY)
	settrainerflag(TRAINER_PBL_JEREMIAH)
	settrainerflag(TRAINER_PBL_JOSH)
	settrainerflag(TRAINER_PBL_HARPER)
	settrainerflag(TRAINER_PBL_ARTHUR)
	setflag(FLAG_BEAT_LEVIATHAN_2)
	// zone 3
	message(format("Zone 3 options"))
	dynmultichoice(0, 0, FALSE, 3, 0, DYN_MULTICHOICE_CB_NONE, "Grass", "Water")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 5) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 5) // wild define gWildMonHeaders in src/data/wild_encounters.h
			setflag(FLAG_TEMP_1) // special encounter
		case MULTI_B_PRESSED:
			closemessage
			setvar(VAR_ZONE, 3)
			setvar(VAR_LEVEL_CAP, 11)
			end
	}
	setvar(VAR_TEMP_1, 7) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	completesubquest(QUEST_PBL, SUB_QUEST_3)
	// zone 3 items
	additem(ITEM_GOOD_ROD)
	completesubquest(QUEST_SIGNS, SUB_QUEST_18)
	settrainerflag(TRAINER_PBL_JEMMA)
	settrainerflag(TRAINER_PBL_PATRICK)
	settrainerflag(TRAINER_PBL_ANNABELLE)
	settrainerflag(TRAINER_PBL_BORIS)
	settrainerflag(TRAINER_PBL_RICHARD)
	setflag(FLAG_BEAT_LEVIATHAN_3)
	// zone 4
	message(format("Zone 4 options"))
	dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "A", "B", "C", "D", "E")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 6) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 7) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 2:
			setvar(VAR_TEMP_0, 8) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 3:
			setvar(VAR_TEMP_0, 9) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 4:
			setvar(VAR_TEMP_0, 10) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case MULTI_B_PRESSED:
			closemessage
			setvar(VAR_ZONE, 4)
			setvar(VAR_LEVEL_CAP, 13)
			end
	}
	setvar(VAR_TEMP_1, 9) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	completesubquest(QUEST_PBL, SUB_QUEST_4)
	// zone 4 gem
	random(8)
	switch(var(VAR_RESULT)) {
		case 0:
			additem(ITEM_WATER_GEM)
		case 1:
			additem(ITEM_ELECTRIC_GEM)
		case 2:
			additem(ITEM_FIRE_GEM)
		case 3:
			additem(ITEM_PSYCHIC_GEM)
		case 4:
			additem(ITEM_DARK_GEM)
		case 5:
			additem(ITEM_GRASS_GEM)
		case 6:
			additem(ITEM_ICE_GEM)
		case 7:
			additem(ITEM_FAIRY_GEM)
	}
	setflag(FLAG_ZONE4A_RECEIVED_GEM)
	// zone 4 items
	additem(ITEM_SILVER_POWDER)
	additem(ITEM_MUSCLE_BAND)
	additem(ITEM_WISE_GLASSES)
	additem(ITEM_TWISTED_SPOON)
	additem(ITEM_POISON_BARB)
	additem(ITEM_TM_SNARL)
	setflag(FLAG_SYS_START_MENU_PC_GET)
	additem(ITEM_BURN_HEAL, 2)
	additem(ITEM_AWAKENING, 2)
	completesubquest(QUEST_SIGNS, SUB_QUEST_19)
	completesubquest(QUEST_SIGNS, SUB_QUEST_20)
	completesubquest(QUEST_SIGNS, SUB_QUEST_21)
	completesubquest(QUEST_SIGNS, SUB_QUEST_22)
	completesubquest(QUEST_SIGNS, SUB_QUEST_23)
	settrainerflag(TRAINER_PBL_HERMAN)
	settrainerflag(TRAINER_PBL_RALPH)
	settrainerflag(TRAINER_PBL_CALLIE)
	settrainerflag(TRAINER_PBL_SANTIAGO)
	settrainerflag(TRAINER_PBL_CHLOE_AND_KAYA)
	settrainerflag(TRAINER_PBL_FRED)
	settrainerflag(TRAINER_PBL_LUCIA)
	setflag(FLAG_BEAT_LEVIATHAN_4)
	// zone 5
	message(format("Zone 5 options"))
	dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "Forest", "Grassland")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 11) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 12) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case MULTI_B_PRESSED:
			closemessage
			setvar(VAR_ZONE, 5)
			setvar(VAR_LEVEL_CAP, 13)
			end
	}
	setvar(VAR_TEMP_1, 11) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	// zone 5 pika
	random(10)
	switch (var(VAR_RESULT)) {
		case 0:
		case 1:
			setvar(VAR_TEMP_0, SPECIES_PACHIRISU)
		case 2:
		case 3:
			setvar(VAR_TEMP_0, SPECIES_DEDENNE)
		case 4:
		case 5:
			setvar(VAR_TEMP_0, SPECIES_MORPEKO)
		case 6:
		case 7:
			setvar(VAR_TEMP_0, SPECIES_EMOLGA)
		case 8:
			setvar(VAR_TEMP_0, SPECIES_PLUSLE)
		case 9:
			setvar(VAR_TEMP_0, SPECIES_MINUN)
	}
	setvar(VAR_TEMP_1, 12) // level
	call(Debug_CheatStart_PBL_GiveMon)
	setflag(FLAG_ZONE5B_NUZLOCKE_BOUGHT_PIKACLONE)
	completesubquest(QUEST_PBL, SUB_QUEST_5)
	// zone 5 items
	additem(ITEM_METRONOME)
	additem(ITEM_QUICK_BALL)
	additem(ITEM_MIRACLE_SEED)
	additem(ITEM_NORMAL_GEM)
	additem(ITEM_BUG_GEM)
	additem(ITEM_GRASS_GEM)
	additem(ITEM_EVIOLITE)
	additem(ITEM_RED_SHARD, 5)
	settrainerflag(TRAINER_PBL_ANNE_AND_JUNE)
	settrainerflag(TRAINER_PBL_NOVA_AND_CORA)
	settrainerflag(TRAINER_PBL_CLINTON)
	settrainerflag(TRAINER_PBL_REBECCA)
	settrainerflag(TRAINER_PBL_RYAN)
	settrainerflag(TRAINER_PBL_CAITLYN)
	settrainerflag(TRAINER_PBL_KENNETH)
	settrainerflag(TRAINER_PBL_KEVIN)
	setflag(FLAG_BEAT_LEVIATHAN_5)
	// zone 6
	message(format("Zone 6 options"))
	dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "Grass", "Water")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 13) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 13) // wild define gWildMonHeaders in src/data/wild_encounters.h
			setflag(FLAG_TEMP_1) // special encounter
		case MULTI_B_PRESSED:
			closemessage
			setvar(VAR_ZONE, 6)
			setvar(VAR_LEVEL_CAP, 15)
			end
	}
	setvar(VAR_TEMP_1, 13) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	completesubquest(QUEST_PBL, SUB_QUEST_6)
	// zone 6 items
	additem(ITEM_NEST_BALL)
	additem(ITEM_NET_BALL)
	additem(ITEM_TM_DRAINING_KISS)
	additem(ITEM_WATER_GEM)
	additem(ITEM_FLYING_GEM)
	additem(ITEM_ICE_GEM)
	additem(ITEM_SLEDGEHAMMER)
	additem(ITEM_SUPER_POTION, 2)
	completesubquest(QUEST_SIGNS, SUB_QUEST_24)
	settrainerflag(TRAINER_PBL_GILBERT)
	settrainerflag(TRAINER_PBL_MELANIE)
	settrainerflag(TRAINER_PBL_CONSTANCE)
	settrainerflag(TRAINER_PBL_FRANK)
	settrainerflag(TRAINER_PBL_DUDLEY)
	settrainerflag(TRAINER_PBL_DAISY)
	settrainerflag(TRAINER_PBL_VIC_AND_DELL)
	settrainerflag(TRAINER_PBL_MINA)
	setflag(FLAG_BEAT_LEVIATHAN_6)
	// zone 7
	message(format("Zone 7 options"))
	dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "Grass", "Tree")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 14) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 14) // wild define gWildMonHeaders in src/data/wild_encounters.h
			setflag(FLAG_TEMP_1) // special encounter
		case MULTI_B_PRESSED:
			closemessage
			setvar(VAR_ZONE, 7)
			setvar(VAR_LEVEL_CAP, 17)
			end
	}
	setvar(VAR_TEMP_1, 15) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	// zone 8
	message(format("Zone 8 options"))
	dynmultichoice(0, 0, TRUE, 5, 0, DYN_MULTICHOICE_CB_NONE, "A", "B", "C")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 15) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 16) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 2:
			setvar(VAR_TEMP_0, 17) // wild define gWildMonHeaders in src/data/wild_encounters.h
	}
	setvar(VAR_TEMP_1, 16) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	completesubquest(QUEST_PBL, SUB_QUEST_7)
	completesubquest(QUEST_PBL, SUB_QUEST_8)
	// zone 7 & 8 items
	additem(ITEM_SHARP_BEAK)
	additem(ITEM_ROCK_GEM)
	additem(ITEM_FIGHTING_GEM)
	additem(ITEM_PSYCHIC_GEM)
	additem(ITEM_BLACK_BELT)
	additem(ITEM_SITRUS_BERRY, 5)
	additem(ITEM_MAGNET)
	additem(ITEM_HARD_STONE)
	additem(ITEM_DUSK_BALL)
	additem(ITEM_FULL_HEAL)
	additem(ITEM_TM_THIEF)
	additem(ITEM_TM_ROCK_TOMB)
	additem(ITEM_PARALYZE_HEAL, 2)
	additem(ITEM_ANTIDOTE, 2)
	additem(ITEM_GREAT_BALL)
	additem(ITEM_POTION, 5)
	additem(ITEM_SUPER_POTION, 2)
	additem(ITEM_MACHETE)
	additem(ITEM_TM_HIDDEN_POWER)
	completesubquest(QUEST_SIGNS, SUB_QUEST_25)
	completesubquest(QUEST_SIGNS, SUB_QUEST_26)
	settrainerflag(TRAINER_PBL_MILLIE)
	settrainerflag(TRAINER_PBL_JAMAL)
	settrainerflag(TRAINER_PBL_PAIGE)
	settrainerflag(TRAINER_PBL_SETH)
	settrainerflag(TRAINER_PBL_CONNIE)
	settrainerflag(TRAINER_PBL_PETER)
	settrainerflag(TRAINER_PBL_WHITAKER)
	settrainerflag(TRAINER_PBL_JIMMY)
	settrainerflag(TRAINER_PBL_EMILIANO)
	settrainerflag(TRAINER_PBL_BECKHAM)
	settrainerflag(TRAINER_PBL_KAREN)
	settrainerflag(TRAINER_PBL_JAYDEN)
	settrainerflag(TRAINER_PBL_NEIL)
	settrainerflag(TRAINER_PBL_TAMARA)
	setflag(FLAG_BEAT_LEVIATHAN_7)
	setflag(FLAG_BEAT_LEVIATHAN_8)
	// zone 9
	message(format("Zone 9 options"))
	dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "Grass", "Water")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 18) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 18) // wild define gWildMonHeaders in src/data/wild_encounters.h
			setflag(FLAG_TEMP_1) // special encounter
		case MULTI_B_PRESSED:
			closemessage
			setvar(VAR_ZONE, 9)
			setvar(VAR_LEVEL_CAP, 20)
			end
	}
	setvar(VAR_TEMP_1, 18) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	completesubquest(QUEST_PBL, SUB_QUEST_9)
	// zone 9 items
	additem(ITEM_BIG_ROOT)
	additem(ITEM_TM_PLUCK)
	additem(ITEM_POISON_GEM)
	additem(ITEM_STEEL_GEM)
	additem(ITEM_DARK_GEM)
	additem(ITEM_MYSTIC_WATER)
	additem(ITEM_CHARCOAL)
	additem(ITEM_TM_RETALIATE)
	completesubquest(QUEST_SIGNS, SUB_QUEST_27)
	completesubquest(QUEST_SIGNS, SUB_QUEST_28)
	settrainerflag(TRAINER_PBL_COOPER)
	settrainerflag(TRAINER_PBL_CARMINE)
	settrainerflag(TRAINER_PBL_JONATHAN)
	settrainerflag(TRAINER_PBL_CALVIN)
	settrainerflag(TRAINER_PBL_LUIS)
	settrainerflag(TRAINER_PBL_ARI)
	settrainerflag(TRAINER_PBL_ARI_CHALLENGE)
	settrainerflag(TRAINER_PBL_BERTHA)
	settrainerflag(TRAINER_PBL_BERTHA_CHALLENGE)
	settrainerflag(TRAINER_PBL_CASSANDRA)
	settrainerflag(TRAINER_PBL_CASSANDRA_CHALLENGE)
	settrainerflag(TRAINER_PBL_DOMINIC)
	settrainerflag(TRAINER_PBL_DOMINIC_CHALLENGE)
	settrainerflag(TRAINER_PBL_ERICA)
	settrainerflag(TRAINER_PBL_ERICA_CHALLENGE)
	// zone 10
	message(format("Zone 10 options"))
	dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "Sand", "Ruin")
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_0, 19) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case 1:
			setvar(VAR_TEMP_0, 20) // wild define gWildMonHeaders in src/data/wild_encounters.h
		case MULTI_B_PRESSED:
			closemessage
			setvar(VAR_ZONE, 11)
			setvar(VAR_LEVEL_CAP, 23)
			end
	}
	setvar(VAR_TEMP_1, 19) // level
	call(Debug_CheatStart_PBL_GenerateMon)
	completesubquest(QUEST_PBL, SUB_QUEST_10)
	// zone 10 items
	additem(ITEM_TM_SCORCHING_SANDS)
	additem(ITEM_FIRE_GEM)
	additem(ITEM_ELECTRIC_GEM)
	additem(ITEM_GROUND_GEM)
	additem(ITEM_SOFT_SAND)
	additem(ITEM_BLACK_GLASSES)
	additem(ITEM_HEAVY_DUTY_BOOTS)
	additem(ITEM_SAFETY_GOGGLES)
	additem(ITEM_TM_BULLDOZE)
	additem(ITEM_TERA_ORB)
	additem(ITEM_BLUE_SHARD, 5)
	additem(ITEM_TM_STEEL_WING)
	settrainerflag(TRAINER_PBL_ALANA)
	settrainerflag(TRAINER_PBL_JACOB)
	settrainerflag(TRAINER_PBL_DEWEY)
	settrainerflag(TRAINER_PBL_ERNEST)
	settrainerflag(TRAINER_PBL_KYLE)
	settrainerflag(TRAINER_PBL_ELIAS)
	settrainerflag(TRAINER_PBL_PEARLIE)
	settrainerflag(TRAINER_PBL_SUSAN)
	settrainerflag(TRAINER_PBL_CONRAD)
	settrainerflag(TRAINER_PBL_BRETT)
	setflag(FLAG_BEAT_LEVIATHAN_10)
	setflag(FLAG_ZONE10B_RECEIVED_TM_STEEL_WING)
	// end
	setvar(VAR_ZONE, 11)
	setvar(VAR_LEVEL_CAP, 23)
	release
	end
}

script Debug_CheatStart_PBL_GenerateMon {
	callnative(DebugCheatStartGenerateMon)
	call(Debug_CheatStart_PBL_GiveMon)
}

script Debug_CheatStart_PBL_GiveMon {
	givemon(VAR_TEMP_0, VAR_TEMP_1, ITEM_NONE)
	bufferspeciesname(0, VAR_TEMP_0)
	msgbox(format("Obtained {STR_VAR_1}!"))
}

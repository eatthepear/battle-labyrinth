mapscripts ZoneSanctuary_MapScripts {
	MAP_SCRIPT_ON_FRAME_TABLE [
		VAR_ZONE, 0: Sanctuary_EventScript_GameIntro
		VAR_GENERIC, 1: Sanctuary_EventScript_EnterSanctuary
	]
}

script ZoneSanctuary_EventScript_Colress {
	lock
	faceplayer
	message(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Greetings, {PLAYER}.\pWhat can I help you with?"))
	waitmessage
	call(EventScript_Colress_Menu)
	call(EventScript_WhenUReadyDialogue)
	release
}

script EventScript_Colress_Menu {
	while {
		dynmultipush("Next Zone", 0)
		dynmultipush("Difficulty", 5)
		if (flag(FLAG_SETTINGS_NUZLOCKE)) {
			dynmultipush("Nuzlocke", 2)
		} else {
			dynmultipush("Respin Encounters", 3)
		}
		dynmultipush("Game Version", 1)
		dynmultipush("Exit", 4)
		dynmultistack(0, 0, FALSE, 5, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				call(EventScript_NextZone)
			case 5:
				call(EventScript_Difficulty)
			case 1:
				call(EventScript_Version)
			case 2:
				call(EventScript_Nuzlocke)
			case 3:
				call(EventScript_RespinEncounters)
			case 4:
			case MULTI_B_PRESSED:
				return
		}
		message(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Anything else I can help with?"))
		waitmessage
	}
}

script EventScript_Difficulty {
	while {
		call(EventScript_Difficulty_SetToMessage)
		dynmultipush("Difficulty Info", 0)
		dynmultipush("Switch Difficulty", 1)
		dynmultipush("Back", 2)
		dynmultistack(0, 0, FALSE, 3, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				call(EventScript_Difficulty_Info)
			case 1:
				call(EventScript_Difficulty_Switch)
			case 2:
			case MULTI_B_PRESSED:
				return
		}
	}
}

script EventScript_Difficulty_SetToMessage {
	switch (var(VAR_DIFFICULTY)) {
		case DIFFICULTY_EASY:
			message(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty is currently set to {COLOR RED}Easy{COLOR DARK_GRAY}."))
			waitmessage
		case DIFFICULTY_NORMAL:
			message(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty is currently set to {COLOR RED}Normal{COLOR DARK_GRAY}."))
			waitmessage
		case DIFFICULTY_HARD:
			message(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty is currently set to {COLOR RED}Hard{COLOR DARK_GRAY}."))
			waitmessage
		case DIFFICULTY_BRUTAL:
			message(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty is currently set to {COLOR RED}Brutal{COLOR DARK_GRAY}."))
			waitmessage
	}
}

script EventScript_Difficulty_Switch {
	while {
		message(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Which difficulty would you like to switch to?"))
		waitmessage
		switch (var(VAR_DIFFICULTY)) {
			case DIFFICULTY_EASY:
				dynmultipush("{COLOR RED}Easy", 0)
				dynmultipush("Normal", 1)
				dynmultipush("Hard", 2)
				dynmultipush("Brutal", 3)
			case DIFFICULTY_NORMAL:
				dynmultipush("Easy", 0)
				dynmultipush("{COLOR RED}Normal", 1)
				dynmultipush("Hard", 2)
				dynmultipush("Brutal", 3)
			case DIFFICULTY_HARD:
				dynmultipush("Easy", 0)
				dynmultipush("Normal", 1)
				dynmultipush("{COLOR RED}Hard", 2)
				dynmultipush("Brutal", 3)
			case DIFFICULTY_BRUTAL:
				dynmultipush("Easy", 0)
				dynmultipush("Normal", 1)
				dynmultipush("Hard", 2)
				dynmultipush("{COLOR RED}Brutal", 3)
		}
		dynmultipush("Back", 4)
		dynmultistack(0, 0, FALSE, 5, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				if (var(VAR_DIFFICULTY) == DIFFICULTY_EASY) {
					msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty is already set to {COLOR RED}Easy{COLOR DARK_GRAY}."))
				} else {
					msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Change the difficulty to {COLOR RED}Easy{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						setvar(VAR_DIFFICULTY, DIFFICULTY_EASY)
						msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty has been changed to {COLOR RED}Easy{COLOR DARK_GRAY}."))
						return
					}
				}
			case 1:
				if (var(VAR_DIFFICULTY) == DIFFICULTY_NORMAL) {
					msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty is already set to {COLOR RED}Normal{COLOR DARK_GRAY}."))
				} else {
					msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Change the difficulty to {COLOR RED}Normal{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						setvar(VAR_DIFFICULTY, DIFFICULTY_NORMAL)
						msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty has been changed to {COLOR RED}Normal{COLOR DARK_GRAY}."))
						return
					}
				}
			case 2:
				if (var(VAR_DIFFICULTY) == DIFFICULTY_HARD) {
					msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty is already set to {COLOR RED}Hard{COLOR DARK_GRAY}."))
				} else {
					msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Change the difficulty to {COLOR RED}Hard{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						setvar(VAR_DIFFICULTY, DIFFICULTY_HARD)
						msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty has been changed to {COLOR RED}Hard{COLOR DARK_GRAY}."))
						return
					}
				}
			case 3:
				if (var(VAR_DIFFICULTY) == DIFFICULTY_BRUTAL) {
					msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty is already set to {COLOR RED}Brutal{COLOR DARK_GRAY}."))
				} else {
					msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Change the difficulty to {COLOR RED}Brutal{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						setvar(VAR_DIFFICULTY, DIFFICULTY_BRUTAL)
						msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The difficulty has been changed to {COLOR RED}Brutal{COLOR DARK_GRAY}."))
						return
					}
				}
			case 4:
			case MULTI_B_PRESSED:
				return
		}
	}
}

script EventScript_Difficulty_Info {
	while {
		message(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Which difficulty would you like to know about?"))
		waitmessage
		dynmultipush("Easy", 0)
		dynmultipush("Normal", 1)
		dynmultipush("Hard", 2)
		dynmultipush("Brutal", 3)
		dynmultipush("Back", 4)
		dynmultistack(0, 0, FALSE, 5, FALSE, VAR_DIFFICULTY, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: {COLOR RED}Easy{COLOR DARK_GRAY} is suited for casual players.\pFor the most part, you can play as if this was one of the harder vanilla Pokémon games, meaning you can grind experience, items, and money.\pThe difficulty of battles is the same as {COLOR RED}Normal{COLOR DARK_GRAY}."))
			case 1:
				msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: {COLOR RED}Normal{COLOR DARK_GRAY} is suited for the typical player.\pThe game is more challenging than a vanilla Pokémon game.\pRecommended for first time playthroughs!"))
			case 2:
				msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: {COLOR RED}Hard{COLOR DARK_GRAY} is suited for players looking for a serious challenge.\pYou can't use in-battle items during non-wild battles, you must play on SET mode, and your Pokémon can't gain EVs."))
			case 3:
				msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: {COLOR RED}Brutal{COLOR DARK_GRAY} is suited for players experienced in challenging ROM hacks.\pAll changes from {COLOR RED}Hard{COLOR DARK_GRAY} are carried over, and {COLOR RED}Leviathan{COLOR DARK_GRAY} and other boss battles are more difficult.\pIn addition, the amount of money from trainers is halved, and the Pokémon, NPCs, and services you have access to are more limited."))
			case 4:
			case MULTI_B_PRESSED:
				return
		}
	}
}

// Removed for now, as FLAG_SETTINGS_FULL_INFO has been removed.
// script EventScript_FullInfo {
// 	if (flag(FLAG_SETTINGS_FULL_INFO)) {
// 		msgbox(format("You currently have the Full Info option on. Would you like to turn it off?"), MSGBOX_YESNO)
// 		if (var(VAR_RESULT) == YES) {
// 			clearflag(FLAG_SETTINGS_FULL_INFO)
// 			msgbox(format("Full Info turned off."))
// 		}
// 	} else {
// 		msgbox(format("You currently have the Full Info option off. Would you like to turn it on?"), MSGBOX_YESNO)
// 		if (var(VAR_RESULT) == YES) {
// 			setflag(FLAG_SETTINGS_FULL_INFO)
// 			msgbox(format("Full Info turned on."))
// 		}
// 	}
// 	return
// }

script EventScript_Version {
	msgbox(format("This is version 2.0.0 of Pokémon Battle Labyrinth.\pMake sure you're playing the most up to date version!"))
	return
}

script EventScript_Nuzlocke {
	msgbox(gText_Colress_NuzlockeExplained)
	if (var(VAR_NUZLOCKE_DEATHS) == 1) {
		msgbox("So far there has been 1 death.")
	} else {
		buffernumberstring(STR_VAR_1, VAR_NUZLOCKE_DEATHS)
		msgbox("So far there have been {STR_VAR_1} deaths.")
	}
	msgbox(format("Would you like to turn off {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		msgbox(format("Are you sure you would like to turn off {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			playse(SE_PC_OFF)
			msgbox("{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode turned off.")
			waitse
			clearflag(FLAG_SETTINGS_NUZLOCKE)
			clearflag(FLAG_ZONE13C_NUZLOCKE_FOSSIL_RECEIVED)
		}
	}
	return
}

text gText_Colress_NuzlockeExplained {
	format("{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode completely implements all standard Nuzlocke rules, such as permanent death and capture restrictions.\p"
	"It comes with Species Clause, Shiny Clause, and Gift Clause.\p"
	"In addition, Gift Pokémon are randomized among their options, if any.\p"
	"You also cannot catch encounters through the DexNav.\p"
	"It is not recommended to play Nuzlocke mode unless you are familiar with Nuzlockes already.\p"
	"Nuzlocke mode can only be enabled at the beginning of the game, but can be disabled at any point.")
}

script EventScript_RespinEncounters {
	msgbox(format("Respin encounters?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		callnative(RegenerateWildEncounterSeed)
	}
	return
}

script EventScript_NextZone {
	if (getpartysize() < 4) {
		msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: You're undergoing quite the challenge by entering the next Zone with that few Pokémon in your party. Proceed anyways?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			return
		}
	}
	switch (var(VAR_ZONE)) {
		case 1:
			bufferstring(0, "Zone 1 - Leafway Trail")
		case 2:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 2 - Warren Woods{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 2)
				warp(MAP_ZONE2A, 255, 4, 3)
				waitstate
				end
			}
		case 3:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 3 - Sunlit Pond{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 3)
				setflag(FLAG_HIDE_ZONE3A_PHILLIPA)
				setflag(FLAG_HIDE_ZONE3A_REMI)
				warp(MAP_ZONE3A, 255, 38, 25)
				waitstate
				end
			}
		case 4:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 4 - Mystic Glade{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 4)
				warp(MAP_ZONE4A, 255, 6, 4)
				waitstate
				end
			}
		case 5:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 5 - Timberstep Plateau{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 5)
				warp(MAP_ZONE5A, 255, 3, 0)
				waitstate
				end
			}
		case 6:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 6 - Seabreeze Island{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 6)
				warp(MAP_ZONE6A, 255, 51, 22)
				waitstate
				end
			}
		case 7:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you ready to leave? You will be entering {COLOR GREEN}Zone 7 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8 - Gemini Caves{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 7)
				warp(MAP_ZONE7A, 255, 10, 33)
				waitstate
				end
			}
		case 9:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 9 - Lushbranch Village{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 9)
				setflag(FLAG_HIDE_ZONE9A_BERTHA_WINSTRATE)
				setflag(FLAG_HIDE_ZONE9A_CASSANDRA_WINSTRATE)
				setflag(FLAG_HIDE_ZONE9A_DOMINIC_WINSTRATE)
				setflag(FLAG_HIDE_ZONE9A_ERICA_WINSTRATE)
				setvar(VAR_ZONE_9_STATE, 0)
				warp(MAP_ZONE9A, 255, 41, 22)
				waitstate
				end
			}
		case 10:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 10 - Scornwind Desert{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 10)
				warp(MAP_ZONE10A, 255, 42, 51)
				waitstate
				end
			}
		case 11:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 11 - Duskwither Maze{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 11)
				warp(MAP_ZONE6A, 255, 51, 22)
				waitstate
				end
			}
		case 12:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 12 - Twinstream Plains{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 12)
				warp(MAP_ZONE12A, 255, 9, 16)
				waitstate
				end
			}
		case 13:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}Zone 13 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 14 - Gemini Caves{COLOR DARK_GRAY}."), MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				call(Sanctuary_EventScript_EnterZone)
				setvar(VAR_LEVEL_CAP, 13)
				warp(MAP_ZONE13A, 255, 18, 10)
				waitstate
				end
			}
	}
	msgbox(gText_Colress_SureYoureReady, MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		call(EventScript_AskSaveGame)
		setflag(FLAG_IN_NEW_ZONE)
		msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Bring out the strength of you and your Pokémon!"), MSGBOX_AUTOCLOSE)
		applymovement(LOCALID_COLRESS, Common_Movement_WalkUp)
		waitmovement(0)
		applymovement(LOCALID_COLRESS, Common_Movement_WalkLeft)
		waitmovement(0)
		applymovement(LOCALID_COLRESS, Common_Movement_FaceRight)
		waitmovement(0)
		applymovement(OBJ_EVENT_ID_PLAYER, Movement_Player_EnterZone)
		waitmovement(0)
		copyvar(VAR_LEVEL_CAP, VAR_ZONE)
		goto(EventScript_WarpNextZone)
	}
	return
}

script EventScript_WarpNextZone {
	switch (var(VAR_ZONE)) {
		case 1:
			warp(MAP_ZONE1A, 255, 16, 28)
	}
	waitstate
	end
}

text gText_Colress_SureYoureReady {
	format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you're ready? You will be entering {COLOR GREEN}{STR_VAR_1}{COLOR DARK_GRAY}.")
}

script Sanctuary_EventScript_EnterZone {
	setflag(FLAG_IN_NEW_ZONE)
	msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Bring out the strength of you and your Pokémon!"), MSGBOX_AUTOCLOSE)
	applymovement(LOCALID_COLRESS, Common_Movement_WalkUp)
	waitmovement(0)
	applymovement(LOCALID_COLRESS, Common_Movement_WalkLeft)
	waitmovement(0)
	applymovement(LOCALID_COLRESS, Common_Movement_FaceRight)
	waitmovement(0)
	applymovement(OBJ_EVENT_ID_PLAYER, Movement_Player_EnterZone)
	waitmovement(0)
	return
}

movement Movement_Player_EnterZone {
	player_run_up * 5
}

text Sanctuary_Text_Colress_EndofDemo {
	format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: This is the end of the demo. Our engineers are still working on the remainder of {COLOR RED}Pokémon Battle Labyrinth{COLOR DARK_GRAY}. Please save your game using the in game save so you might be able to transfer your save file to the next version when it comes out.")
}

text Sanctuary_Text_Colress_Upgraded {
	format("Because of your progress, the following shops are upgraded:")
}

text Sanctuary_Text_Colress_UpgradedPokeball {
	format("{COLOR RED}Tim's Pokéball Shop{COLOR DARK_GRAY}!")
}

text Sanctuary_Text_Colress_UpgradedPotions {
	format("{COLOR RED}Portentia's Potions{COLOR DARK_GRAY}!")
}

text Sanctuary_Text_Colress_UpgradedItems {
	format("{COLOR RED}Varrick's Extravagant Emporium{COLOR DARK_GRAY}!")
}

text Sanctuary_Text_Colress_UpgradedBerries {
	format("{COLOR RED}Julia's Berries{COLOR DARK_GRAY}!")
}

text Sanctuary_Text_Colress_UpgradedEggs {
	format("{COLOR RED}Marie's Egg Delivery Service{COLOR DARK_GRAY}!")
}

text Sanctuary_Text_Colress_UpgradedServices {
	format("{COLOR RED}Lelouch's Services Shop{COLOR DARK_GRAY}!")
}

text Sanctuary_Text_Colress_UpgradedRecovery {
	format("{COLOR RED}Joy's Center of Restoration{COLOR DARK_GRAY}!")
}

script Sanctuary_EventScript_EnterSanctuary {
    lockall
	setvar(VAR_GENERIC, 0)
	clearflag(FLAG_IN_NEW_ZONE)
	clearflag(FLAG_ZONE_PC_USED)
	call(Sanctuary_EventScript_MoveCameraUp)
	applymovement(LOCALID_COLRESS, Common_Movement_ExclamationMark)
	applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_FaceUp)
	playse(SE_PIN)
	waitmovement(0)
	waitse
	call(Sanctuary_EventScript_MoveCameraDown)
	applymovement(LOCALID_COLRESS, Common_Movement_WalkDown2)
	waitmovement(0)
	playfanfare(MUS_OBTAIN_BADGE)
	switch (var(VAR_ZONE)) {
		case 1:
			bufferstring(0, "Zone 1 - Leafway Trail")
		case 2:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 2 - Warren Woods{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 2 - Warren Woods{COLOR DARK_GRAY} is…"))
		case 3:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 3 - Sunlit Pond{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 3 - Sunlit Pond{COLOR DARK_GRAY} is…"))
		case 4:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 4 - Mystic Glade{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 4 - Mystic Glade{COLOR DARK_GRAY} is…"))
		case 5:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 5 - Timberstep Plateau{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 5 - Timberstep Plateau{COLOR DARK_GRAY} is…"))
		case 6:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 6 - Seabreeze Island{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 6 - Seabreeze Island{COLOR DARK_GRAY} is…"))
		case 7:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 7 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8 - Gemini Caves{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 7 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8 - Gemini Caves{COLOR DARK_GRAY} is…"))
		case 9:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 9 - Lushbranch Village{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 9 - Lushbranch Village{COLOR DARK_GRAY} is…"))
		case 10:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 10 - Scornwind Desert{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 10 - Scornwind Desert{COLOR DARK_GRAY} is…"))
		case 11:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 11 - Duskwither Maze{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 11 - Duskwither Maze{COLOR DARK_GRAY} is…"))
		case 12:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 12 - Twinstream Plains{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 12 - Twinstream Plains{COLOR DARK_GRAY} is…"))
		case 13:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY} is…"))
		case 15:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 15 - {COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 15 - {COLOR DARK_GRAY} is…"))
		case 16:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 16 - {COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 16 - {COLOR DARK_GRAY} is…"))
		case 17:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 17 - {COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 17 - {COLOR DARK_GRAY} is…"))
		case 18:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY} is…"))
		case 20:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 20 - {COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 20 - {COLOR DARK_GRAY} is…"))
		case 21:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 21 - {COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 21 - {COLOR DARK_GRAY} is…"))
		case 22:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 22 - {COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 22 - {COLOR DARK_GRAY} is…"))
		case 23:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 23 - {COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 23 - {COLOR DARK_GRAY} is…"))
		case 24:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY}."))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY} is…"))
	}
	msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Congratulations.\nYou have cleared {COLOR GREEN}{STR_VAR_1}{COLOR DARK_GRAY}."))
	waitfanfare
	msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Your reward for clearing {COLOR GREEN}{STR_VAR_1}{COLOR DARK_GRAY} is…"))
	switch (var(VAR_ZONE)) {
		case 1:
			msgbox(format("The {COLOR RED}Portable PC{COLOR DARK_GRAY}!"))
			setflag(FLAG_SYS_START_MENU_PC_GET)
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(format("{PLAYER} received the {COLOR RED}Portable PC{COLOR DARK_GRAY}!"))
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Note that if you are in a Zone, you can only use the Portable PC once before reaching the Sanctuary."))
		case 2:
			msgbox(format("The {COLOR RED}DexNav{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
			setflag(FLAG_SYS_DEXNAV_GET)
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(format("{PLAYER} received the {COLOR RED}DexNav{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
			waitfanfare
			if (flag(FLAG_SETTINGS_NUZLOCKE)) {
				msgbox(format("Note that on {COLOR RED}Nuzlocke{COLOR DARK_GRAY}, DexNav encounters are unable to be caught."), MSGBOX_DEFAULT)
			}
		case 3:
			msgbox(format("5 {COLOR RED}Revives{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
			giveitem(ITEM_REVIVE, 5)
		case 4:
			msgbox(format("The {COLOR RED}Portable PC{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
			setflag(FLAG_SYS_START_MENU_PC_GET)
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(format("{PLAYER} received the {COLOR RED}Portable PC{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Note that if you are in a Zone, you can only use the Portable PC once before reaching the Sanctuary."), MSGBOX_DEFAULT)
		case 5:
			msgbox(format("10 {COLOR RED}Red Shards{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
			giveitem(ITEM_RED_SHARD, 10)
		case 6:
			msgbox(format("The {COLOR RED}Sledgehammer!{COLOR DARK_GRAY}"), MSGBOX_DEFAULT)
			giveitem(ITEM_SLEDGEHAMMER)
		case 7:
			msgbox("Your reward for clearing {COLOR GREEN}Zone 7{COLOR DARK_GRAY} is…", MSGBOX_DEFAULT)
			msgbox(format("{COLOR RED}TM39 - Rock Tomb!{COLOR DARK_GRAY}"), MSGBOX_DEFAULT)
			giveitem(ITEM_TM_ROCK_TOMB)
			msgbox("Your reward for clearing {COLOR GREEN}Zone 8{COLOR DARK_GRAY} is…", MSGBOX_DEFAULT)
			msgbox(format("The {COLOR RED}Machete{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
			giveitem(ITEM_MACHETE)
		case 9:
			msgbox(format("{COLOR RED}TM15 - Covet{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
			giveitem(ITEM_TM_VENOSHOCK)
		case 10:
			msgbox(format("The {COLOR RED}Tera Orb{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
			giveitem(ITEM_TERA_ORB)
			setflag(FLAG_USED_TERA)
			msgbox(format("In battle, you can Terastilize your Pokémon now.\pPress {START_BUTTON} to Terastilize!\pAfter you use it, you'll have to go back to the Pokémon Center to recharge it."))
		case 11:
			msgbox(format("TM86 - Grass Knot!"), MSGBOX_DEFAULT)
			giveitem(ITEM_TM_GRASS_KNOT)
		case 12:
			msgbox(format("Ultra Balls!"), MSGBOX_DEFAULT)
			giveitem(ITEM_ULTRA_BALL, 10)
	}
	switch(var(VAR_ZONE)) {
		case 1:
			completesubquest(QUEST_PBL, SUB_QUEST_1)
			setvar(VAR_ZONE, 2)
		case 2:
			setflag(FLAG_HIDE_ZONE2A_MAX)
			completesubquest(QUEST_PBL, SUB_QUEST_2)
			setvar(VAR_ZONE, 3)
		case 3:
			completesubquest(QUEST_PBL, SUB_QUEST_3)
			setvar(VAR_ZONE, 4)
			msgbox(Sanctuary_Text_Colress_Upgraded, MSGBOX_DEFAULT)
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedPotions, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedPokeball, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedBerries, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedItems, MSGBOX_DEFAULT)
			waitfanfare
		case 4:
			completesubquest(QUEST_PBL, SUB_QUEST_4)
			setvar(VAR_ZONE, 5)
		case 5:
			completesubquest(QUEST_PBL, SUB_QUEST_5)
			setvar(VAR_ZONE, 6)
			msgbox(Sanctuary_Text_Colress_Upgraded, MSGBOX_DEFAULT)
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedPokeball, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedEggs, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedServices, MSGBOX_DEFAULT)
			waitfanfare
		case 6:
			setflag(FLAG_HIDE_ZONE6A_MAX)
			completesubquest(QUEST_PBL, SUB_QUEST_6)
			setvar(VAR_ZONE, 7)
			msgbox(Sanctuary_Text_Colress_Upgraded, MSGBOX_DEFAULT)
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedPotions, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedItems, MSGBOX_DEFAULT)
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The next two zones, {COLOR GREEN}Zone 7 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8 - Gemini Caves{COLOR DARK_GRAY}, are combined.\pYou will not be able to access a Sanctuary in between the Zones."), MSGBOX_DEFAULT)
		case 7:
			setflag(FLAG_ZONE7B_HEAL_USED)
			completesubquest(QUEST_PBL, SUB_QUEST_7)
			completesubquest(QUEST_PBL, SUB_QUEST_8)
			setvar(VAR_ZONE, 9)
			msgbox(Sanctuary_Text_Colress_Upgraded, MSGBOX_DEFAULT)
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedPokeball, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedBerries, MSGBOX_DEFAULT)
			waitfanfare
		case 9:
			completesubquest(QUEST_PBL, SUB_QUEST_9)
			setvar(VAR_ZONE, 10)
		case 10:
			setflag(FLAG_HIDE_ZONE10A_MAX)
			completesubquest(QUEST_PBL, SUB_QUEST_10)
			setvar(VAR_ZONE, 11)
			msgbox(Sanctuary_Text_Colress_Upgraded, MSGBOX_DEFAULT)
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedPotions, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedItems, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedEggs, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedServices, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedRecovery, MSGBOX_DEFAULT)
			waitfanfare
		case 11:
			completesubquest(QUEST_PBL, SUB_QUEST_11)
			setvar(VAR_ZONE, 12)
		case 12:
			completesubquest(QUEST_PBL, SUB_QUEST_12)
			setvar(VAR_ZONE, 13)
			msgbox(Sanctuary_Text_Colress_Upgraded, MSGBOX_DEFAULT)
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedPotions, MSGBOX_DEFAULT)
			waitfanfare
			playfanfare(MUS_OBTAIN_ITEM)
			msgbox(Sanctuary_Text_Colress_UpgradedItems, MSGBOX_DEFAULT)
			waitfanfare
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The next two zones, {COLOR GREEN}Zone 7 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8 - Gemini Caves{COLOR DARK_GRAY}, are combined.\pYou will not be able to access a Sanctuary in between the Zones."), MSGBOX_DEFAULT)
		case 13:
			completesubquest(QUEST_PBL, SUB_QUEST_13)
			completesubquest(QUEST_PBL, SUB_QUEST_14)
			setvar(VAR_ZONE, 15)
		case 15:
			completesubquest(QUEST_PBL, SUB_QUEST_15)
			setvar(VAR_ZONE, 16)
		case 16:
			completesubquest(QUEST_PBL, SUB_QUEST_16)
			setvar(VAR_ZONE, 17)
		case 17:
			completesubquest(QUEST_PBL, SUB_QUEST_17)
			setvar(VAR_ZONE, 18)
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The next two zones, {COLOR GREEN}Zone 7 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8 - Gemini Caves{COLOR DARK_GRAY}, are combined.\pYou will not be able to access a Sanctuary in between the Zones."), MSGBOX_DEFAULT)
		case 18:
			completesubquest(QUEST_PBL, SUB_QUEST_18)
			completesubquest(QUEST_PBL, SUB_QUEST_19)
			setvar(VAR_ZONE, 20)
		case 20:
			completesubquest(QUEST_PBL, SUB_QUEST_20)
			setvar(VAR_ZONE, 21)
		case 21:
			completesubquest(QUEST_PBL, SUB_QUEST_21)
			setvar(VAR_ZONE, 22)
		case 22:
			completesubquest(QUEST_PBL, SUB_QUEST_22)
			setvar(VAR_ZONE, 23)
		case 23:
			completesubquest(QUEST_PBL, SUB_QUEST_23)
			setvar(VAR_ZONE, 24)
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The next two zones, {COLOR GREEN}Zone 7 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8 - Gemini Caves{COLOR DARK_GRAY}, are combined.\pYou will not be able to access a Sanctuary in between the Zones."), MSGBOX_DEFAULT)
		case 24:
			completesubquest(QUEST_PBL, SUB_QUEST_24)
			completesubquest(QUEST_PBL, SUB_QUEST_25)
			setvar(VAR_ZONE, 26)
		case 26:
			completesubquest(QUEST_PBL, SUB_QUEST_26)
			setvar(VAR_ZONE, 27)
		case 27:
			completesubquest(QUEST_PBL, SUB_QUEST_27)
			setvar(VAR_ZONE, 28)
		case 28:
			completesubquest(QUEST_PBL, SUB_QUEST_28)
			setvar(VAR_ZONE, 29)
		case 29:
			completesubquest(QUEST_PBL, SUB_QUEST_29)
			setvar(VAR_ZONE, 30)
		case 30:
			completesubquest(QUEST_PBL, SUB_QUEST_30)
			setvar(VAR_ZONE, 31)
		case 31:
			completesubquest(QUEST_PBL, SUB_QUEST_31)
			setvar(VAR_ZONE, 32)
		case 32:
			completesubquest(QUEST_PBL, SUB_QUEST_32)
			setvar(VAR_ZONE, 33)
		case 33:
			completesubquest(QUEST_PBL, SUB_QUEST_33)
			setvar(VAR_ZONE, 34)
		case 34:
			completesubquest(QUEST_PBL, SUB_QUEST_34)
			setvar(VAR_ZONE, 35)
		case 35:
			completesubquest(QUEST_PBL, SUB_QUEST_35)
			setvar(VAR_ZONE, 36)
		case 36:
			completesubquest(QUEST_PBL, SUB_QUEST_36)
			setvar(VAR_ZONE, 37)
		case 37:
			completesubquest(QUEST_PBL, SUB_QUEST_37)
			setvar(VAR_ZONE, 38)
		case 38:
			completesubquest(QUEST_PBL, SUB_QUEST_38)
			setvar(VAR_ZONE, 39)
		case 39:
			completesubquest(QUEST_PBL, SUB_QUEST_39)
			setvar(VAR_ZONE, 40)
		case 40:
			completesubquest(QUEST_PBL, SUB_QUEST_40)
			setvar(VAR_ZONE, 41)
		case 41:
			completesubquest(QUEST_PBL, SUB_QUEST_41)
			setvar(VAR_ZONE, 42)
		case 42:
			completesubquest(QUEST_PBL, SUB_QUEST_42)
			setvar(VAR_ZONE, 43)
		case 43:
			completesubquest(QUEST_PBL, SUB_QUEST_43)
			setvar(VAR_ZONE, 44)
		case 44:
			completesubquest(QUEST_PBL, SUB_QUEST_44)
			setvar(VAR_ZONE, 45)
		case 45:
			completesubquest(QUEST_PBL, SUB_QUEST_45)
			setvar(VAR_ZONE, 46)
		case 46:
			completesubquest(QUEST_PBL, SUB_QUEST_46)
			setvar(VAR_ZONE, 47)
		case 47:
			completesubquest(QUEST_PBL, SUB_QUEST_47)
			setvar(VAR_ZONE, 48)
		case 48:
			completesubquest(QUEST_PBL, SUB_QUEST_48)
			setvar(VAR_ZONE, 49)
		case 49:
			completesubquest(QUEST_PBL, SUB_QUEST_49)
			setvar(VAR_ZONE, 50)
		case 50:
			completesubquest(QUEST_PBL, SUB_QUEST_50)
			setvar(VAR_ZONE, 51)
	}
	call(EventScript_WhenUReadyDialogue)
	applymovement(LOCALID_COLRESS, Common_Movement_Colress_WalkUp)
	waitmovement(0)
	call(EventScript_AskSaveGame)
	releaseall
	end
}

movement Common_Movement_Colress_WalkUp {
	walk_up * 2
	face_down
}

script Sanctuary_EventScript_MoveCameraUp {
	special(SpawnCameraObject)
	applymovement(OBJ_EVENT_ID_CAMERA, Common_Movement_WalkUp2)
	waitmovement(0)
	special(RemoveCameraObject)
	return
}

script Sanctuary_EventScript_MoveCameraDown {
	special(SpawnCameraObject)
	applymovement(OBJ_EVENT_ID_CAMERA, Common_Movement_WalkDown2)
	waitmovement(0)
	special(RemoveCameraObject)
	return
}

script Sanctuary_EventScript_GameIntro {
    lockall
	call(EventScript_GameIntro_SetStartingVariablesAndFlags)
	call(Sanctuary_EventScript_MoveCameraUp)
	applymovement(LOCALID_COLRESS, Common_Movement_ExclamationMark)
	playse(SE_PIN)
	waitmovement(0)
	waitse
	applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_FaceUp)
	msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Ah. You've arrived."), MSGBOX_AUTOCLOSE)
	applymovement(LOCALID_COLRESS, Common_Movement_WalkDown2)
	call(Sanctuary_EventScript_MoveCameraDown)
	waitmovement(0)
	msgbox("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Welcome to\n{COLOR RED}Pokémon Battle Labyrinth{COLOR DARK_GRAY}!\pI am your guide for braving the\nchallenges ahead.\pWould you like to listen to the tutorial?", MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		setvar(VAR_TEMP_5, 1) // VAR_TEMP_5: 1 means yes tutorial
		msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Pokémon Battle Labyrinth is comprised of many {COLOR GREEN}Zones{COLOR DARK_GRAY} you must traverse.\p"
		"In these Zones, you might encounter wild Pokémon, great treasures, fierce opponents, and more.\p"
		"Each Zone typically contains a {COLOR RED}Leviathan{COLOR DARK_GRAY} or other tough challenge that yields great rewards.\lYou must defeat all opponents in a Zone to proceed.\p"
		"When you complete a Zone, you will return to this area, the {COLOR GREEN}Sanctuary{COLOR DARK_GRAY}, where you can heal your Pokémon, purchase supplies, and prepare for the next Zone.\p"
		"Once you enter a new Zone, you will not be able to access the Sanctuary until you complete that Zone.\p"
		"As you complete more Zones, more items, quests, and services are unlocked.\p"
		"In order to win, you must progress through all Zones, overcoming all challenges you face along the way."))
	}
	call(EventScript_GameIntro_Difficulty)
	call(EventScript_GameIntro_Nuzlocke)
	if (flag(FLAG_SETTINGS_NUZLOCKE)) {
		msgbox(format("As a new challenger, you will receive a starter Pokémon.\p"
		"On {COLOR RED}Nuzlocke{COLOR DARK_GRAY}, your choice is limited from the pool of possible starters to only three options.\p"
		"Choose carefully as these Pokémon are very rare."))
		special(ChooseStarter)
		waitstate
	} else {
		msgbox(format("As a new challenger, you will receive a starter Pokémon.\p"
		"You may have your choice of any of the generation 1-9 starter Pokémon.\p"
		"Choose carefully as these Pokémon are very rare."))
		call(Sanctuary_EventScript_HandleStarterSelectionDefault)
	}
	bufferleadmonspeciesname(0)
	msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: How about a nickname for your {STR_VAR_1}?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		setvar(VAR_0x8004, 0)
		call(Common_EventScript_NameReceivedPartyMon)
	}
	if (var(VAR_TEMP_5) == 1) {
		msgbox(format("I also have a beginner's kit with items and cash to get you started."), MSGBOX_DEFAULT)
		giveitem(ITEM_POKE_BALL, 15)
		giveitem(ITEM_POTION, 10)
		playfanfare(MUS_OBTAIN_ITEM)
		msgbox(format("Received {COLOR RED}¥5000{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
		waitfanfare
		playfanfare(MUS_OBTAIN_ITEM)
		msgbox(format("Received the {COLOR RED}Pokédex{COLOR DARK_GRAY} and the {COLOR RED}DexNav{COLOR DARK_GRAY}!"), MSGBOX_DEFAULT)
		waitfanfare
		msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Additionally, here are some Key Items to make your life easier."))
		giveitem(ITEM_NOTEBOOK)
		giveitem(ITEM_INFINITE_REPEL)
		giveitem(ITEM_RARE_CANDY)
	} else {
		additem(ITEM_POTION, 10)
		additem(ITEM_POKE_BALL, 15)
		additem(ITEM_NOTEBOOK)
		additem(ITEM_INFINITE_REPEL)
		additem(ITEM_RARE_CANDY)
	}
	setmonmetlocation(0, 255)
	callnative(UpdateFollowingPokemon)
	call(EventScript_WhenUReadyDialogue)
	applymovement(LOCALID_COLRESS, Common_Movement_Colress_WalkUp)
	waitmovement(LOCALID_COLRESS)
	releaseall
	end
}

script EventScript_GameIntro_SetStartingVariablesAndFlags {
	setflag(FLAG_SYS_B_DASH)
	setflag(FLAG_SYS_POKEMON_GET)
	setflag(FLAG_SYS_PC_LANETTE)
	setflag(FLAG_AUTORUN_TOGGLE)
	setflag(FLAG_SYS_DEXNAV_GET)
	setvar(VAR_FARM_STOCK, 10)
	setflag(FLAG_SYS_POKEDEX_GET)
	setflag(FLAG_SYS_EXP_SHARE)
	special(SetUnlockedPokedexFlags)
	setflag(FLAG_SYS_NATIONAL_DEX)
	special(EnableNationalPokedex)
	initclock(1, 1)
	callnative(InitTimeBasedEvents)
	setvar(VAR_ZONE, 1)
	setvar(VAR_LEVEL_CAP, 0)
	questmenu(QUEST_MENU_SET_ACTIVE, QUEST_PBL)
	setrespawn(HEAL_LOCATION_PBL)
	setflag(FLAG_SYS_DEBUG) // to remove for release
}

script EventScript_GameIntro_Difficulty {
	msgbox(format("Pokémon Battle Labyrinth has a few difficulty options. Please adjust the difficulty as you see fit."))
	while {
		call(EventScript_Difficulty_SetToMessage)
		dynmultipush("Difficulty Info", 0)
		dynmultipush("Switch Difficulty", 1)
		dynmultipush("Confirm Difficulty", 2)
		dynmultistack(0, 0, FALSE, 3, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				call(EventScript_Difficulty_Info)
			case 1:
				call(EventScript_Difficulty_Switch)
			case 2:
			case MULTI_B_PRESSED:
				switch (var(VAR_DIFFICULTY)) {
					case DIFFICULTY_EASY:
						msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you want to play on {COLOR RED}Easy{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							return
						}
					case DIFFICULTY_NORMAL:
						msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you want to play on {COLOR RED}Normal{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							return
						}
					case DIFFICULTY_HARD:
						msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you want to play on {COLOR RED}Hard{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							return
						}
					case DIFFICULTY_BRUTAL:
						msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Are you sure you want to play on {COLOR RED}Brutal{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
						if (var(VAR_RESULT) == YES) {
							return
						}
				}
		}
	}
}

script EventScript_GameIntro_Nuzlocke {
	while {
		message(format("There is a built-in {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode. Would you like to enable it?"))
		waitmessage
		dynmultichoice(0, 0, FALSE, 3, 0, DYN_MULTICHOICE_CB_NONE, "Info", "Yes", "No")
		switch (var(VAR_RESULT)) {
			case 0:
				msgbox(gText_Colress_NuzlockeExplained)
			case 1:
				msgbox(format("Are you sure you want to enable {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode?"), MSGBOX_YESNO)
				if (var(VAR_RESULT) == YES) {
					setflag(FLAG_SETTINGS_NUZLOCKE)
					msgbox(format("{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode enabled."))
					return
				}
			case 2:
			case MULTI_B_PRESSED:
				msgbox(format("{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode disabled."))
				return
		}
	}
}

script Sanctuary_EventScript_HandleStarterSelectionDefault {
	while {
		message(format("Choose a starter Pokémon.\nPress {B_BUTTON} to randomize."))
		waitmessage
		dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "Bulbasaur", "Charmander", "Squirtle", "Chikorita", "Cyndaquil", "Totodile", "Treecko", "Torchic", "Mudkip", "Turtwig", "Chimchar", "Piplup", "Snivy", "Tepig", "Oshawott", "Chespin", "Fennekin", "Froakie", "Rowlet", "Litten", "Popplio", "Grookey", "Scorbunny", "Sobble", "Sprigatito", "Fuecoco", "Quaxly", "Random")
		switch (var(VAR_RESULT)) {
			case 0:
				setvar(VAR_TEMP_3, SPECIES_BULBASAUR)
			case 1:
				setvar(VAR_TEMP_3, SPECIES_CHARMANDER)
			case 2:
				setvar(VAR_TEMP_3, SPECIES_SQUIRTLE)
			case 3:
				setvar(VAR_TEMP_3, SPECIES_CHIKORITA)
			case 4:
				setvar(VAR_TEMP_3, SPECIES_CYNDAQUIL)
			case 5:
				setvar(VAR_TEMP_3, SPECIES_TOTODILE)
			case 6:
				setvar(VAR_TEMP_3, SPECIES_TREECKO)
			case 7:
				setvar(VAR_TEMP_3, SPECIES_TORCHIC)
			case 8:
				setvar(VAR_TEMP_3, SPECIES_MUDKIP)
			case 9:
				setvar(VAR_TEMP_3, SPECIES_TURTWIG)
			case 10:
				setvar(VAR_TEMP_3, SPECIES_CHIMCHAR)
			case 11:
				setvar(VAR_TEMP_3, SPECIES_PIPLUP)
			case 12:
				setvar(VAR_TEMP_3, SPECIES_SNIVY)
			case 13:
				setvar(VAR_TEMP_3, SPECIES_TEPIG)
			case 14:
				setvar(VAR_TEMP_3, SPECIES_OSHAWOTT)
			case 15:
				setvar(VAR_TEMP_3, SPECIES_CHESPIN)
			case 16:
				setvar(VAR_TEMP_3, SPECIES_FENNEKIN)
			case 17:
				setvar(VAR_TEMP_3, SPECIES_FROAKIE)
			case 18:
				setvar(VAR_TEMP_3, SPECIES_ROWLET)
			case 19:
				setvar(VAR_TEMP_3, SPECIES_LITTEN)
			case 20:
				setvar(VAR_TEMP_3, SPECIES_POPPLIO)
			case 21:
				setvar(VAR_TEMP_3, SPECIES_GROOKEY)
			case 22:
				setvar(VAR_TEMP_3, SPECIES_SCORBUNNY)
			case 23:
				setvar(VAR_TEMP_3, SPECIES_SOBBLE)
			case 24:
				setvar(VAR_TEMP_3, SPECIES_SPRIGATITO)
			case 25:
				setvar(VAR_TEMP_3, SPECIES_FUECOCO)
			case 26:
				setvar(VAR_TEMP_3, SPECIES_QUAXLY)
			case 27:
			case MULTI_B_PRESSED:
				setvar(VAR_TEMP_3, 0)
		}
		if (var(VAR_TEMP_3) == 0) {
			playse(SE_CONTEST_PLACE)
			message(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Randomizing…"))
			delay(32)
			waitse
			waitmessage
			random(27)
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_3, SPECIES_BULBASAUR)
				case 1:
					setvar(VAR_TEMP_3, SPECIES_CHARMANDER)
				case 2:
					setvar(VAR_TEMP_3, SPECIES_SQUIRTLE)
				case 3:
					setvar(VAR_TEMP_3, SPECIES_CHIKORITA)
				case 4:
					setvar(VAR_TEMP_3, SPECIES_CYNDAQUIL)
				case 5:
					setvar(VAR_TEMP_3, SPECIES_TOTODILE)
				case 6:
					setvar(VAR_TEMP_3, SPECIES_TREECKO)
				case 7:
					setvar(VAR_TEMP_3, SPECIES_TORCHIC)
				case 8:
					setvar(VAR_TEMP_3, SPECIES_MUDKIP)
				case 9:
					setvar(VAR_TEMP_3, SPECIES_TURTWIG)
				case 10:
					setvar(VAR_TEMP_3, SPECIES_CHIMCHAR)
				case 11:
					setvar(VAR_TEMP_3, SPECIES_PIPLUP)
				case 12:
					setvar(VAR_TEMP_3, SPECIES_SNIVY)
				case 13:
					setvar(VAR_TEMP_3, SPECIES_TEPIG)
				case 14:
					setvar(VAR_TEMP_3, SPECIES_OSHAWOTT)
				case 15:
					setvar(VAR_TEMP_3, SPECIES_CHESPIN)
				case 16:
					setvar(VAR_TEMP_3, SPECIES_FENNEKIN)
				case 17:
					setvar(VAR_TEMP_3, SPECIES_FROAKIE)
				case 18:
					setvar(VAR_TEMP_3, SPECIES_ROWLET)
				case 19:
					setvar(VAR_TEMP_3, SPECIES_LITTEN)
				case 20:
					setvar(VAR_TEMP_3, SPECIES_POPPLIO)
				case 21:
					setvar(VAR_TEMP_3, SPECIES_GROOKEY)
				case 22:
					setvar(VAR_TEMP_3, SPECIES_SCORBUNNY)
				case 23:
					setvar(VAR_TEMP_3, SPECIES_SOBBLE)
				case 24:
					setvar(VAR_TEMP_3, SPECIES_SPRIGATITO)
				case 25:
					setvar(VAR_TEMP_3, SPECIES_FUECOCO)
				case 26:
					setvar(VAR_TEMP_3, SPECIES_QUAXLY)
			}
		}
		bufferspeciesname(0, VAR_TEMP_3)
		showmonpic(VAR_TEMP_3, 10, 3)
		playmoncry(VAR_TEMP_3, 0)
		waitmoncry
		msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: You want {STR_VAR_1} as your starter?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			hidemonpic
			switch(var(VAR_TEMP_3)) {
				case SPECIES_BULBASAUR:
				case SPECIES_CHIKORITA:
				case SPECIES_TREECKO:
				case SPECIES_TURTWIG:
				case SPECIES_SNIVY:
				case SPECIES_CHESPIN:
				case SPECIES_ROWLET:
				case SPECIES_GROOKEY:
				case SPECIES_SPRIGATITO:
					setvar(VAR_STARTER_MON, 0)
				case SPECIES_CHARMANDER:
				case SPECIES_CYNDAQUIL:
				case SPECIES_TORCHIC:
				case SPECIES_CHIMCHAR:
				case SPECIES_TEPIG:
				case SPECIES_FENNEKIN:
				case SPECIES_LITTEN:
				case SPECIES_SCORBUNNY:
				case SPECIES_FUECOCO:
					setvar(VAR_STARTER_MON, 1)
				case SPECIES_SQUIRTLE:
				case SPECIES_TOTODILE:
				case SPECIES_MUDKIP:
				case SPECIES_PIPLUP:
				case SPECIES_OSHAWOTT:
				case SPECIES_FROAKIE:
				case SPECIES_POPPLIO:
				case SPECIES_SOBBLE:
				case SPECIES_QUAXLY:
					setvar(VAR_STARTER_MON, 2)
			}
			givemon(VAR_TEMP_3, 5, ITEM_NONE)
			playfanfare(MUS_OBTAIN_ITEM)
			message(format("{PLAYER} received the {STR_VAR_1}!"))
			waitmessage
			waitfanfare
			return
		}
		hidemonpic
	}
}

script EventScript_WhenUReadyDialogue {
	switch (var(VAR_ZONE)) {
		case 1:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 1 - Leafway Trail{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 2:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 2 - Warren Woods{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 3:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 3 - Sunlit Pond{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 4:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 4 - Mystic Glade{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 5:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 5 - Timberstep Plateau{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 6:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 6 - Seabreeze Island{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 7:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 7 - Gemini Heights{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8 - Gemini Caves{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 9:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 9 - Lushbranch Village{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 10:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 10 - Scornwind Desert{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 11:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 11 - Duskwither Maze{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 12:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 12 - Twinstream Plains{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 13:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 13{COLOR DARK_GRAY} and {COLOR GREEN}Zone 14{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 15:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 15 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 16:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 16 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 17:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 17 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 18:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 20:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 20 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 21:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 21 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 22:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 22 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 23:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 23 - {COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
		case 24:
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: When you are prepared to enter {COLOR GREEN}Zone 7{COLOR DARK_GRAY} and {COLOR GREEN}Zone 8{COLOR DARK_GRAY}, speak to me."), MSGBOX_AUTOCLOSE)
	}
}

script EventScript_Shop_Cowgirl {
	lock
	faceplayer
	if (flag(FLAG_COWGIRL_INTRO) == FALSE) {
		msgbox(format("Howdy! Welcome to the Farmer's Stand."))
		call(EventScript_Shop_FarmersStand_Info)
		setflag(FLAG_COWGIRL_INTRO)
	}
	showmoneybox(0, 0)
	call(EventScript_Shop_FarmersStand)
	hidemoneybox
	msgbox(format("So long, partner!"))
	release
	end
}

script EventScript_Shop_FarmersStand {
	while {
		buffernumberstring(0, VAR_FARM_STOCK)
		message("Howdy! Welcome to the Farmer's Stand.\nYou can buy up to {STR_VAR_1} items.")
		waitmessage
		dynmultipush("Shop Info", 0)
		dynmultipush("Ability Snack", 9)
		dynmultipush("Honey", 51)
		dynmultipush("Oran Berry", 2)
		dynmultipush("Cheri Berry", 3)
		dynmultipush("Chesto Berry", 4)
		dynmultipush("Pecha Berry", 5)
		dynmultipush("Rawst Berry", 6)
		dynmultipush("Aspear Berry", 7)
		dynmultipush("Persim Berry", 8)
		if (var(VAR_ZONE) > 5) {
			dynmultipush("Sitrus Berry", 11)
		}
		if (var(VAR_ZONE) > 30) {
			dynmultipush("Occa Berry", 12)
			dynmultipush("Passho Berry", 13)
			dynmultipush("Wacan Berry", 14)
			dynmultipush("Rindo Berry", 15)
			dynmultipush("Yache Berry", 16)
			dynmultipush("Chope Berry", 17)
			dynmultipush("Kebia Berry", 18)
			dynmultipush("Shuca Berry", 19)
			dynmultipush("Coba Berry", 20)
			dynmultipush("Payapa Berry", 21)
			dynmultipush("Tanga Berry", 22)
			dynmultipush("Charti Berry", 23)
			dynmultipush("Kasib Berry", 24)
			dynmultipush("Haban Berry", 25)
			dynmultipush("Colbur Berry", 26)
			dynmultipush("Babiri Berry", 27)
			dynmultipush("Chilan Berry", 28)
			dynmultipush("Roseli Berry", 29)
		}
		if (var(VAR_ZONE) > 25) {
			dynmultipush("Lum Berry", 30)
		}
		dynmultipush("Serious Mint", 10)
		if (var(VAR_ZONE) > 10) {
			dynmultipush("Gentle Mint", 44)
			dynmultipush("Lax Mint", 37)
		}
		if (var(VAR_ZONE) > 15) {
			dynmultipush("Relaxed Mint", 38)
			dynmultipush("Sassy Mint", 46)
		}
		if (var(VAR_ZONE) > 20) {
			dynmultipush("Bold Mint", 35)
			dynmultipush("Impish Mint", 36)
			dynmultipush("Calm Mint", 43)
			dynmultipush("Careful Mint", 45)
			dynmultipush("Quiet Mint", 42)
			dynmultipush("Brave Mint", 34)
		}
		if (var(VAR_ZONE) > 35) {
			dynmultipush("Lonely Mint", 31)
			dynmultipush("Adamant Mint", 32)
			dynmultipush("Naughty Mint", 33)
			dynmultipush("Modest Mint", 39)
			dynmultipush("Mild Mint", 40)
			dynmultipush("Rash Mint", 41)
			dynmultipush("Timid Mint", 47)
			dynmultipush("Hasty Mint", 48)
			dynmultipush("Jolly Mint", 49)
			dynmultipush("Naive Mint", 50)
		}
		#define ITEM_FIGY_BERRY 524
		#define ITEM_WIKI_BERRY 525
		#define ITEM_MAGO_BERRY 526
		#define ITEM_AGUAV_BERRY 527
		#define ITEM_IAPAPA_BERRY 528

		#define ITEM_LIECHI_BERRY 567
		#define ITEM_GANLON_BERRY 568
		#define ITEM_SALAC_BERRY 569
		#define ITEM_PETAYA_BERRY 570
		#define ITEM_APICOT_BERRY 571
		#define ITEM_LANSAT_BERRY 572
		#define ITEM_STARF_BERRY 573
		#define ITEM_ENIGMA_BERRY 574
		#define ITEM_MICLE_BERRY 575
		#define ITEM_CUSTAP_BERRY 576
		#define ITEM_JABOCA_BERRY 577
		#define ITEM_ROWAP_BERRY 578
		#define ITEM_KEE_BERRY 579
		#define ITEM_MARANGA_BERRY 580
		dynmultipush("Exit", 1)
		dynmultistack(21, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				call(EventScript_Shop_FarmersStand_Info)
			case 1:
			case MULTI_B_PRESSED:
				return
			case 2:
				setvar(VAR_TEMP_0, ITEM_ORAN_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 3:
				setvar(VAR_TEMP_0, ITEM_CHERI_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 4:
				setvar(VAR_TEMP_0, ITEM_CHESTO_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 5:
				setvar(VAR_TEMP_0, ITEM_PECHA_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 6:
				setvar(VAR_TEMP_0, ITEM_RAWST_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 7:
				setvar(VAR_TEMP_0, ITEM_ASPEAR_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 8:
				setvar(VAR_TEMP_0, ITEM_PERSIM_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 9:
				setvar(VAR_TEMP_0, ITEM_ABILITY_SNACK)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 10:
				setvar(VAR_TEMP_0, ITEM_SERIOUS_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 11:
				setvar(VAR_TEMP_0, ITEM_SITRUS_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 12:
				setvar(VAR_TEMP_0, ITEM_OCCA_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 13:
				setvar(VAR_TEMP_0, ITEM_PASSHO_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 14:
				setvar(VAR_TEMP_0, ITEM_WACAN_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 15:
				setvar(VAR_TEMP_0, ITEM_RINDO_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 16:
				setvar(VAR_TEMP_0, ITEM_YACHE_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 17:
				setvar(VAR_TEMP_0, ITEM_CHOPLE_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 18:
				setvar(VAR_TEMP_0, ITEM_KEBIA_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 19:
				setvar(VAR_TEMP_0, ITEM_SHUCA_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 20:
				setvar(VAR_TEMP_0, ITEM_COBA_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 21:
				setvar(VAR_TEMP_0, ITEM_PAYAPA_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 22:
				setvar(VAR_TEMP_0, ITEM_TANGA_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 23:
				setvar(VAR_TEMP_0, ITEM_CHARTI_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 24:
				setvar(VAR_TEMP_0, ITEM_KASIB_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 25:
				setvar(VAR_TEMP_0, ITEM_HABAN_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 26:
				setvar(VAR_TEMP_0, ITEM_COLBUR_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 27:
				setvar(VAR_TEMP_0, ITEM_BABIRI_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 28:
				setvar(VAR_TEMP_0, ITEM_CHILAN_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 29:
				setvar(VAR_TEMP_0, ITEM_ROSELI_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 30:
				setvar(VAR_TEMP_0, ITEM_LUM_BERRY)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 31:
				setvar(VAR_TEMP_0, ITEM_LONELY_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 32:
				setvar(VAR_TEMP_0, ITEM_ADAMANT_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 33:
				setvar(VAR_TEMP_0, ITEM_NAUGHTY_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 34:
				setvar(VAR_TEMP_0, ITEM_BRAVE_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 35:
				setvar(VAR_TEMP_0, ITEM_BOLD_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 36:
				setvar(VAR_TEMP_0, ITEM_IMPISH_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 37:
				setvar(VAR_TEMP_0, ITEM_LAX_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 38:
				setvar(VAR_TEMP_0, ITEM_RELAXED_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 39:
				setvar(VAR_TEMP_0, ITEM_MODEST_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 40:
				setvar(VAR_TEMP_0, ITEM_MILD_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 41:
				setvar(VAR_TEMP_0, ITEM_RASH_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 42:
				setvar(VAR_TEMP_0, ITEM_QUIET_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 43:
				setvar(VAR_TEMP_0, ITEM_CALM_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 44:
				setvar(VAR_TEMP_0, ITEM_GENTLE_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 45:
				setvar(VAR_TEMP_0, ITEM_CAREFUL_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 46:
				setvar(VAR_TEMP_0, ITEM_SASSY_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 47:
				setvar(VAR_TEMP_0, ITEM_TIMID_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 48:
				setvar(VAR_TEMP_0, ITEM_HASTY_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 49:
				setvar(VAR_TEMP_0, ITEM_JOLLY_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 50:
				setvar(VAR_TEMP_0, ITEM_NAIVE_MINT)
				call(EventScript_Shop_FarmersStand_BuyItem)
			case 51:
				setvar(VAR_TEMP_0, ITEM_HONEY)
				call(EventScript_Shop_FarmersStand_BuyItem)
		}
	}
}

script EventScript_Shop_FarmersStand_Info {
	buffernumberstring(0, VAR_FARM_STOCK)
	msgbox(Text_Shop_Herbal_Info)
}

text Text_Shop_Herbal_Info {
	"We sell freshly grown or baked goods,\nall organically sourced, and it's\lsubsidized, so everything is dirt cheap!\p"
	"We do have a per-customer limit on how\nmany items you can buy, as our stock of\litems is limited.\p"
	"Currently, you can buy up to {STR_VAR_1} items,\nthough the limit will reset when we\lrestock our supply. (every 5th Zone)"
}

// This script assumes everything costs ¥80
script EventScript_Shop_FarmersStand_BuyItem {
	while {
		if (var(VAR_FARM_STOCK) == 0) {
			msgbox(Text_Shop_Herbal_YouCantPurchaseMore)
			return
		}
		buffernumberstring(0, VAR_FARM_STOCK)
		bufferitemnameplural(1, VAR_TEMP_0, 2)
		message("How many {STR_VAR_2} do you want?\n(You can still buy up to {STR_VAR_1} items.)")
		waitmessage
		buffernumberstring(0, 80 * 1)
		dynmultipush("One - ¥{STR_VAR_1}", 0)
		if (var(VAR_FARM_STOCK) >= 5) {
			buffernumberstring(1, 80 * 5)
			dynmultipush("Five - ¥{STR_VAR_2}", 1)
		}
		if (var(VAR_FARM_STOCK) >= 10) {
			buffernumberstring(2, 80 * 10)
			dynmultipush("Ten - ¥{STR_VAR_3}", 2)
		}
		dynmultipush("Back", 3)
		dynmultistack(21, 0, FALSE, 4, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				if (checkmoney(80) == FALSE) {
					msgbox(gText_YouDontHaveEnoughMoney)
					break
				}
				buffernumberstring(0, 1)
				bufferitemnameplural(1, VAR_TEMP_0, 1)
				buffernumberstring(2, 80)
				msgbox("You want to buy {STR_VAR_1} {STR_VAR_2}?\nThat will be ¥{STR_VAR_3}.", MSGBOX_YESNO)
				if (var(VAR_RESULT) == YES) {
					removemoney(80)
					updatemoneybox
					playse(SE_SHOP)
					msgbox(gText_HereYouGoThankYou)
					waitse
					additem(VAR_TEMP_0, 1)
					subvar(VAR_FARM_STOCK, 1)
					return
				}
			case 1:
				if (checkmoney(80 * 5) == FALSE) {
					msgbox(gText_YouDontHaveEnoughMoney)
					break
				}
				buffernumberstring(0, 5)
				bufferitemnameplural(1, VAR_TEMP_0, 5)
				buffernumberstring(2, 80 * 5)
				msgbox("You want to buy {STR_VAR_1} {STR_VAR_2}?\nThat will be ¥{STR_VAR_3}.", MSGBOX_YESNO)
				if (var(VAR_RESULT) == YES) {
					removemoney(80 * 5)
					updatemoneybox
					playse(SE_SHOP)
					msgbox(gText_HereYouGoThankYou)
					waitse
					additem(VAR_TEMP_0, 5)
					subvar(VAR_FARM_STOCK, 5)
					return
				}
			case 2:
				if (checkmoney(80 * 10) == FALSE) {
					msgbox(gText_YouDontHaveEnoughMoney)
					break
				}
				buffernumberstring(0, 10)
				bufferitemnameplural(1, VAR_TEMP_0, 10)
				buffernumberstring(2, 80 * 10)
				msgbox("You want to buy {STR_VAR_1} {STR_VAR_2}?\nThat will be ¥{STR_VAR_3}.", MSGBOX_YESNO)
				if (var(VAR_RESULT) == YES) {
					removemoney(80 * 10)
					updatemoneybox
					playse(SE_SHOP)
					msgbox(gText_HereYouGoThankYou)
					waitse
					additem(VAR_TEMP_0, 10)
					subvar(VAR_FARM_STOCK, 10)
					return
				}
			case 3:
			case MULTI_B_PRESSED:
				return
		}
	}
}

text Text_Shop_Herbal_YouCantPurchaseMore {
	format("You've already reached the purchase limit, I'm afraid. Come back when we restock! (every 5th Zone)")
}

script EventScript_Fisherman {
	lock
	faceplayer
	if (flag(FLAG_SANCTUARY_RECEIVED_FISHING_ROD) == FALSE) {
		msgbox(format("A Fisherman deigns to spread his love of fishing with others!"))
		setflag(FLAG_SANCTUARY_RECEIVED_FISHING_ROD)
		giveitem(ITEM_SUPER_ROD)
	}
	msgbox(format("A Fisherman always fishes if he can!\pThough you can't fish when there's no Pokémon there!"), MSGBOX_AUTOCLOSE)
	applymovement(LOCALID_FISHERMAN, Common_Movement_FaceRight)
	waitmovement(LOCALID_FISHERMAN)
	release
}

script EventScript_Guitarist {
	lock
	faceplayer
	if (flag(FLAG_GUITARIST_INTRO) == FALSE) {
		msgbox(format("Yo! I have some sick tunes for you!\pI can change commonly heard music to other tracks if you want!"))
		setflag(FLAG_GUITARIST_INTRO)
	}
	call(EventScript_MusicMenu)
	msgbox(format("Rock on!"))
	release
}

script EventScript_MusicMenu {
	while {
		fadedefaultbgm
		message(format("Yo! Want me to change some tracks?"))
		dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "Sanctuary", "Wild Battle", "Trainer Battle", "Leviathan Battle", "Exit")
		switch (var(VAR_RESULT)) {
			case 0:
				call(EventScript_MusicMenu_Sanctuary)
			case 1:
				call(EventScript_MusicMenu_Wild)
			case 2:
				call(EventScript_MusicMenu_Trainer)
			case 3:
				call(EventScript_MusicMenu_Leviathan)
			case 4:
			case MULTI_B_PRESSED:
				return
		}
	}
}

script EventScript_MusicMenu_Sanctuary {
	while {
		switch (var(VAR_SANCTUARY_MUSIC)) {
			case 1:
				playbgm(MUS_DP_AMITY_SQUARE, FALSE)
				message("The Sanctuary music is\ncurrently set to Amity Square.")
			case 2:
				playbgm(MUS_PL_B_HALL, FALSE)
				message("The Sanctuary music is\ncurrently set to Battle Hall.")
			case 3:
				playbgm(MUS_BW_ACCUMULA, FALSE)
				message("The Sanctuary music is\ncurrently set to Accumula Town.")
			case 4:
				playbgm(MUS_BW_SKYARROW_BRIDGE, FALSE)
				message("The Sanctuary music is\ncurrently set to Skyarrow Bridge.")
			case 5:
				playbgm(MUS_BW_WHITE_FOREST, FALSE)
				message("The Sanctuary music is\ncurrently set to White Forest.")
			case 6:
				playbgm(MUS_BW_ANVILLE_TOWN, FALSE)
				message("The Sanctuary music is\ncurrently set to Anville Town.")
		}
		dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "Amity Square", "Battle Hall", "Accumula Town", "Skyarrow Bridge", "White Forest", "Anville Town")
		switch (var(VAR_RESULT)) {
			case 0:
				setvar(VAR_SANCTUARY_MUSIC, 1)
			case 1:
				setvar(VAR_SANCTUARY_MUSIC, 2)
			case 2:
				setvar(VAR_SANCTUARY_MUSIC, 3)
			case 3:
				setvar(VAR_SANCTUARY_MUSIC, 4)
			case 4:
				setvar(VAR_SANCTUARY_MUSIC, 5)
			case 5:
				setvar(VAR_SANCTUARY_MUSIC, 6)
			case MULTI_B_PRESSED:
				return
		}
	}
}

script EventScript_MusicMenu_Wild {
	while {
		switch (var(VAR_WILD_MUSIC)) {
			case 1:
				playbgm(MUS_VS_WILD, FALSE)
				message("The Wild Pokémon music is\ncurrently set to RSE.")
			case 2:
				playbgm(MUS_RG_VS_WILD, FALSE)
				message("The Wild Pokémon music is\ncurrently set to FRLG.")
			case 3:
				playbgm(MUS_DP_VS_WILD, FALSE)
				message("The Wild Pokémon music is\ncurrently set to DPPt.")
			case 4:
				playbgm(MUS_HG_VS_WILD, FALSE)
				message("The Wild Pokémon music is\ncurrently set to HGSS (Johto).")
			case 5:
				playbgm(MUS_HG_VS_WILD_KANTO, FALSE)
				message("The Wild Pokémon music is\ncurrently set to HGSS (Kanto).")
			case 6:
				playbgm(MUS_BW_VS_WILD, FALSE)
				message("The Wild Pokémon music is\ncurrently set to BW.")
		}
		dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "RSE", "FRLG", "DPPt", "HGSS (Johto)", "HGSS (Kanto)", "BW")
		switch (var(VAR_RESULT)) {
			case 0:
				setvar(VAR_WILD_MUSIC, 1)
			case 1:
				setvar(VAR_WILD_MUSIC, 2)
			case 2:
				setvar(VAR_WILD_MUSIC, 3)
			case 3:
				setvar(VAR_WILD_MUSIC, 4)
			case 4:
				setvar(VAR_WILD_MUSIC, 5)
			case 5:
				setvar(VAR_WILD_MUSIC, 6)
			case MULTI_B_PRESSED:
				return
		}
	}
}

script EventScript_MusicMenu_Trainer {
	while {
		switch (var(VAR_TRAINER_MUSIC)) {
			case 1:
				playbgm(MUS_VS_TRAINER, FALSE)
				message("The Trainer music is\ncurrently set to RSE.")
			case 2:
				playbgm(MUS_RG_VS_TRAINER, FALSE)
				message("The Trainer music is\ncurrently set to FRLG.")
			case 3:
				playbgm(MUS_DP_VS_TRAINER, FALSE)
				message("The Trainer music is\ncurrently set to DPPt.")
			case 4:
				playbgm(MUS_HG_VS_TRAINER, FALSE)
				message("The Trainer music is\ncurrently set to HGSS (Johto).")
			case 5:
				playbgm(MUS_HG_VS_TRAINER_KANTO, FALSE)
				message("The Trainer music is\ncurrently set to HGSS (Kanto).")
			case 6:
				playbgm(MUS_BW_VS_TRAINER, FALSE)
				message("The Trainer music is\ncurrently set to BW.")
		}
		dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "RSE", "FRLG", "DPPt", "HGSS (Johto)", "HGSS (Kanto)", "BW")
		switch (var(VAR_RESULT)) {
			case 0:
				setvar(VAR_TRAINER_MUSIC, 1)
			case 1:
				setvar(VAR_TRAINER_MUSIC, 2)
			case 2:
				setvar(VAR_TRAINER_MUSIC, 3)
			case 3:
				setvar(VAR_TRAINER_MUSIC, 4)
			case 4:
				setvar(VAR_TRAINER_MUSIC, 5)
			case 5:
				setvar(VAR_TRAINER_MUSIC, 6)
			case MULTI_B_PRESSED:
				return
		}
	}
}

script EventScript_MusicMenu_Leviathan {
	while {
		switch (var(VAR_LEVIATHAN_MUSIC)) {
			case 1:
				playbgm(MUS_VS_GYM_LEADER, FALSE)
				message("The Leviathan music is\ncurrently set to RSE.")
			case 2:
				playbgm(MUS_RG_VS_GYM_LEADER, FALSE)
				message("The Leviathan music is\ncurrently set to FRLG.")
			case 3:
				playbgm(MUS_DP_VS_GYM_LEADER, FALSE)
				message("The Leviathan music is\ncurrently set to DPPt.")
			case 4:
				playbgm(MUS_HG_VS_GYM_LEADER, FALSE)
				message("The Leviathan music is\ncurrently set to HGSS (Johto).")
			case 5:
				playbgm(MUS_HG_VS_GYM_LEADER_KANTO, FALSE)
				message("The Leviathan music is\ncurrently set to HGSS (Kanto).")
			case 6:
				playbgm(MUS_BW_VS_GYM_LEADER, FALSE)
				message("The Leviathan music is\ncurrently set to BW.")
		}
		dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "RSE", "FRLG", "DPPt", "HGSS (Johto)", "HGSS (Kanto)", "BW")
		switch (var(VAR_RESULT)) {
			case 0:
				setvar(VAR_LEVIATHAN_MUSIC, 1)
			case 1:
				setvar(VAR_LEVIATHAN_MUSIC, 2)
			case 2:
				setvar(VAR_LEVIATHAN_MUSIC, 3)
			case 3:
				setvar(VAR_LEVIATHAN_MUSIC, 4)
			case 4:
				setvar(VAR_LEVIATHAN_MUSIC, 5)
			case 5:
				setvar(VAR_LEVIATHAN_MUSIC, 6)
			case MULTI_B_PRESSED:
				return
		}
	}
}

mart Shop_Filler {
	ITEM_POKE_BALL
}

script EventScript_Shop_MartEmployee {
	lock
	faceplayer
	playbgm(MUS_POKE_MART, FALSE)
	if (flag(FLAG_TIM_INTRO) == false) {
		msgbox(format("Hey there! Welcome to the Poké Mart Stand.\pWe carry items that are typically sold in Poké Marts."), MSGBOX_DEFAULT)
		setflag(FLAG_TIM_INTRO)
	}
	message(format("Welcome to the Poké Mart Stand!"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			pokemart(Shop_Mart_1)
		case 6:
		case 7:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 15:
			pokemart(Shop_Mart_2)
		case 16:
		case 17:
		case 18:
		case 20:
			pokemart(Shop_Mart_3)
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
			pokemart(Shop_Mart_4)
		case 26:
		case 27:
		case 28:
		case 29:
		case 30:
		case 31:
		case 32:
		case 33:
		case 34:
		case 35:
			pokemart(Shop_Mart_5)
		case 36:
		case 37:
		case 38:
		case 39:
		case 40:
			pokemart(Shop_Mart_6)
		case 41:
		case 42:
		case 43:
		case 44:
		case 45:
			pokemart(Shop_Mart_7)
	}
	msgbox("Please come again!")
	fadedefaultbgm
	release
}

mart Shop_Mart_1 {
	ITEM_POKE_BALL
	ITEM_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
}

mart Shop_Mart_2 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
}

mart Shop_Mart_3 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
}

mart Shop_Mart_4 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_FULL_HEAL
}

mart Shop_Mart_5 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_MAX_POTION
	ITEM_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_FULL_HEAL
}

mart Shop_Mart_6 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_MAX_POTION
	ITEM_FULL_RESTORE
	ITEM_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_FULL_HEAL
}

mart Shop_Mart_7 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_MAX_POTION
	ITEM_FULL_RESTORE
	ITEM_MAX_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_FULL_HEAL
}

script EventScript_Shop_Varrick {
	lock
	faceplayer
	playbgm(MUS_DP_POKE_MART, FALSE)
	if (flag(FLAG_VARRICK_INTRO) == false) {
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: Wowza! Yeetastic! Blamo!\p"
				"My name is Varrick,\n"
				"entrepreneur extraordinaire!\p"
				"{COLOR BLUE}Varrick{COLOR DARK_GRAY}: I pitched this idea a couple year's back, and now it's become a reality!\p"
				"All the items you can or can't find in the world, you'll find here!\p"
				"Fantastic evolution stones!\p"
				"Powerful held items!\p"
				"All variety of Poké Balls!\p"
				"Witness the finest item collection you've ever seen!\p"
				"Please, enjoy my shop!"))
		setflag(FLAG_VARRICK_INTRO)
	}
	message(format("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: Salutations! Welcome to Varrick's Extravagant Emporium!"))
	waitmessage
	call(EventScript_Shop_Varrick_Items)
	msgbox("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: A big thank you from me!")
	fadedefaultbgm
	release
}

script EventScript_Shop_Varrick_Items {
	while {
		dynmultipush("Poké Balls", 0)
		if (var(VAR_ZONE) > 5) {
			dynmultipush("Evo Items", 1)
		}
		dynmultipush("Battle Items", 2)
		dynmultipush("Treasures", 3)
		if (checkitem(ITEM_MEGA_RING) == TRUE) {
			dynmultipush("Mega Stones", 6)
		}
		dynmultipush("Other", 4)
		dynmultipush("Exit", 7)
		dynmultistack(21, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				call(EventScript_Shop_Varrick_Pokeballs)
			case 1:
				call(EventScript_Shop_Varrick_Evo)
			case 2:
				call(EventScript_Shop_Varrick_Battle)
			case 3:
				call(EventScript_Shop_Varrick_Treasures)
			case 4:
				call(EventScript_Shop_Varrick_Other)
			case 6:
				call(EventScript_Shop_Varrick_MegaStones)
			case 7:
			case MULTI_B_PRESSED:
				return
		}
		msgbox(format("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: Want to have a look at anything else?"))
	}
}

script EventScript_Shop_Varrick_Pokeballs {
	message(format("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: We sell a great variety of Poké Balls!"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			pokemart(Shop_Pokeballs_1)
		case 6:
		case 7:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 15:
		case 16:
		case 17:
		case 18:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
			pokemart(Shop_Filler)
	}
}

mart Shop_Pokeballs_1 {
	ITEM_HEAL_BALL
}

mart Shop_Pokeballs_2 {
	ITEM_HEAL_BALL
	ITEM_REPEAT_BALL
	ITEM_NEST_BALL
}

mart Shop_Pokeballs_3 {
	ITEM_HEAL_BALL
	ITEM_DIVE_BALL
	ITEM_NET_BALL
	ITEM_REPEAT_BALL
	ITEM_NEST_BALL
}

mart Shop_Pokeballs_4 {
	ITEM_HEAL_BALL
	ITEM_DIVE_BALL
	ITEM_NET_BALL
	ITEM_REPEAT_BALL
	ITEM_NEST_BALL
	ITEM_FAST_BALL
	ITEM_LEVEL_BALL
	ITEM_LURE_BALL
	ITEM_HEAVY_BALL
	ITEM_LOVE_BALL
	ITEM_MOON_BALL
}

mart Shop_Pokeballs_5 {
	ITEM_QUICK_BALL
	ITEM_DUSK_BALL
	ITEM_TIMER_BALL
	ITEM_HEAL_BALL
	ITEM_DIVE_BALL
	ITEM_NET_BALL
	ITEM_REPEAT_BALL
	ITEM_NEST_BALL
	ITEM_FAST_BALL
	ITEM_LEVEL_BALL
	ITEM_LURE_BALL
	ITEM_HEAVY_BALL
	ITEM_LOVE_BALL
	ITEM_MOON_BALL
}

script EventScript_Shop_Varrick_Evo {
	message(format("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: All the evolution items you might need, you'll find here!"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 9:
		case 10:
			pokemart(Shop_EvoSpecies_2)
		case 11:
		case 12:
		case 13:
		case 15:
			pokemart(Shop_EvoSpecies_3)
		case 16:
		case 17:
		case 18:
		case 20:
			pokemart(Shop_EvoSpecies_4)
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
			pokemart(Shop_Filler)
	}
}

mart Shop_EvoSpecies_2 {
	ITEM_UPGRADE
	ITEM_DEEP_SEA_SCALE
	ITEM_DEEP_SEA_TOOTH
	ITEM_OVAL_STONE
	ITEM_WHIPPED_DREAM
	ITEM_SACHET
	ITEM_STRAWBERRY_SWEET
}

mart Shop_EvoSpecies_3 {
	ITEM_FIRE_STONE
	ITEM_WATER_STONE
	ITEM_THUNDER_STONE
	ITEM_LEAF_STONE
	ITEM_MOON_STONE
	ITEM_SUN_STONE
	ITEM_ICE_STONE
	ITEM_UPGRADE
	ITEM_DEEP_SEA_SCALE
	ITEM_DEEP_SEA_TOOTH
	ITEM_OVAL_STONE
	ITEM_WHIPPED_DREAM
	ITEM_SACHET
	ITEM_STRAWBERRY_SWEET
#define ITEM_FIRE_MEMORY 271
#define ITEM_WATER_MEMORY 272
#define ITEM_ELECTRIC_MEMORY 273
#define ITEM_GRASS_MEMORY 274
#define ITEM_ICE_MEMORY 275
#define ITEM_FIGHTING_MEMORY 276
#define ITEM_POISON_MEMORY 277
#define ITEM_GROUND_MEMORY 278
#define ITEM_FLYING_MEMORY 279
#define ITEM_PSYCHIC_MEMORY 280
#define ITEM_BUG_MEMORY 281
#define ITEM_ROCK_MEMORY 282
#define ITEM_GHOST_MEMORY 283
#define ITEM_DRAGON_MEMORY 284
#define ITEM_DARK_MEMORY 285
#define ITEM_STEEL_MEMORY 286
#define ITEM_FAIRY_MEMORY 287
}

mart Shop_EvoSpecies_4 {
	ITEM_LINKING_CORD
	ITEM_FIRE_STONE
	ITEM_WATER_STONE
	ITEM_THUNDER_STONE
	ITEM_LEAF_STONE
	ITEM_MOON_STONE
	ITEM_SUN_STONE
	ITEM_ICE_STONE
	ITEM_DUSK_STONE
	ITEM_SHINY_STONE
	ITEM_DAWN_STONE
	ITEM_AUSPICIOUS_ARMOR
	ITEM_MALICIOUS_ARMOR
	ITEM_BLACK_AUGURITE
	ITEM_CHIPPED_POT
	ITEM_MASTERPIECE_TEACUP
	ITEM_GALARICA_CUFF
	ITEM_GALARICA_WREATH
	ITEM_SWEET_APPLE
	ITEM_TART_APPLE
	ITEM_SYRUPY_APPLE
	ITEM_DRAGON_SCALE
	ITEM_DUBIOUS_DISC
	ITEM_ELECTIRIZER
	ITEM_MAGMARIZER
	ITEM_KINGS_ROCK
	ITEM_METAL_COAT
	ITEM_METAL_ALLOY
	ITEM_PEAT_BLOCK
	ITEM_PRISM_SCALE
	ITEM_PROTECTOR
	ITEM_RAZOR_CLAW
	ITEM_RAZOR_FANG
	ITEM_REAPER_CLOTH
	ITEM_UPGRADE
	ITEM_DEEP_SEA_SCALE
	ITEM_DEEP_SEA_TOOTH
	ITEM_OVAL_STONE
	ITEM_WHIPPED_DREAM
	ITEM_SACHET
	ITEM_STRAWBERRY_SWEET
}

script EventScript_Shop_Varrick_Battle {
	message(format("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: There are tons of Battle Items, and you can find all of them here!"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			pokemart(Shop_Battle_1)
		case 6:
		case 7:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 15:
		case 16:
		case 17:
		case 18:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
			pokemart(Shop_Filler)
	}
}

mart Shop_Battle_1 {
	ITEM_X_ATTACK
}

mart Shop_Battle_2 {
	ITEM_X_ATTACK
#define ITEM_SILK_SCARF 425
#define ITEM_CHARCOAL 426
#define ITEM_MYSTIC_WATER 427
#define ITEM_MAGNET 428
#define ITEM_MIRACLE_SEED 429
#define ITEM_NEVER_MELT_ICE 430
#define ITEM_NEVERMELTICE ITEM_NEVER_MELT_ICE // Pre-Gen VI name
#define ITEM_BLACK_BELT 431
#define ITEM_BLACKBELT ITEM_BLACK_BELT // Gen II name
#define ITEM_POISON_BARB 432
#define ITEM_SOFT_SAND 433
#define ITEM_SHARP_BEAK 434
#define ITEM_TWISTED_SPOON 435
#define ITEM_TWISTEDSPOON ITEM_TWISTED_SPOON // Pre-Gen VI name
#define ITEM_SILVER_POWDER 436
#define ITEM_SILVERPOWDER ITEM_SILVER_POWDER // Pre-Gen VI name
#define ITEM_HARD_STONE 437
#define ITEM_SPELL_TAG 438
#define ITEM_DRAGON_FANG 439
#define ITEM_BLACK_GLASSES 440
#define ITEM_BLACKGLASSES ITEM_BLACK_GLASSES // Pre-Gen VI name
#define ITEM_METAL_COAT 441
	ITEM_FAIRY_FEATHER

#define ITEM_FLAME_PLATE 250
#define ITEM_SPLASH_PLATE 251
#define ITEM_ZAP_PLATE 252
#define ITEM_MEADOW_PLATE 253
#define ITEM_ICICLE_PLATE 254
#define ITEM_FIST_PLATE 255
#define ITEM_TOXIC_PLATE 256
#define ITEM_EARTH_PLATE 257
#define ITEM_SKY_PLATE 258
#define ITEM_MIND_PLATE 259
#define ITEM_INSECT_PLATE 260
#define ITEM_STONE_PLATE 261
#define ITEM_SPOOKY_PLATE 262
#define ITEM_DRACO_PLATE 263
#define ITEM_DREAD_PLATE 264
#define ITEM_IRON_PLATE 265
#define ITEM_PIXIE_PLATE 266

#define ITEM_NORMAL_GEM 339
#define ITEM_FIRE_GEM 340
#define ITEM_WATER_GEM 341
#define ITEM_ELECTRIC_GEM 342
#define ITEM_GRASS_GEM 343
#define ITEM_ICE_GEM 344
#define ITEM_FIGHTING_GEM 345
#define ITEM_POISON_GEM 346
#define ITEM_GROUND_GEM 347
#define ITEM_FLYING_GEM 348
#define ITEM_PSYCHIC_GEM 349
#define ITEM_BUG_GEM 350
#define ITEM_ROCK_GEM 351
#define ITEM_GHOST_GEM 352
#define ITEM_DRAGON_GEM 353
#define ITEM_DARK_GEM 354
#define ITEM_STEEL_GEM 355
#define ITEM_FAIRY_GEM 356

// Choice Items
#define ITEM_CHOICE_BAND 442
#define ITEM_CHOICE_SPECS 443
#define ITEM_CHOICE_SCARF 444

// Status Orbs
#define ITEM_FLAME_ORB 445
#define ITEM_TOXIC_ORB 446

// Weather Rocks
#define ITEM_DAMP_ROCK 447
#define ITEM_HEAT_ROCK 448
#define ITEM_SMOOTH_ROCK 449
#define ITEM_ICY_ROCK 450

// Terrain Seeds
#define ITEM_ELECTRIC_SEED 451
#define ITEM_PSYCHIC_SEED 452
#define ITEM_MISTY_SEED 453
#define ITEM_GRASSY_SEED 454

// Type-activated Stat Modifiers
#define ITEM_ABSORB_BULB 455
#define ITEM_CELL_BATTERY 456
#define ITEM_LUMINOUS_MOSS 457
#define ITEM_SNOWBALL 458

#define ITEM_BRIGHT_POWDER 459
#define ITEM_BRIGHTPOWDER ITEM_BRIGHT_POWDER // Pre-Gen VI name
#define ITEM_WHITE_HERB 460
#define ITEM_EXP_SHARE 461
#define ITEM_EXP_ALL ITEM_EXP_SHARE // Gen I name
#define ITEM_QUICK_CLAW 462
#define ITEM_SOOTHE_BELL 463
#define ITEM_MENTAL_HERB 464
#define ITEM_KINGS_ROCK 465
#define ITEM_AMULET_COIN 466
#define ITEM_CLEANSE_TAG 467
#define ITEM_SMOKE_BALL 468
#define ITEM_FOCUS_BAND 469
#define ITEM_LUCKY_EGG 470
#define ITEM_SCOPE_LENS 471
#define ITEM_LEFTOVERS 472
#define ITEM_SHELL_BELL 473
#define ITEM_WIDE_LENS 474
#define ITEM_MUSCLE_BAND 475
#define ITEM_WISE_GLASSES 476
#define ITEM_EXPERT_BELT 477
#define ITEM_LIGHT_CLAY 478
#define ITEM_LIFE_ORB 479
#define ITEM_POWER_HERB 480
#define ITEM_FOCUS_SASH 481
#define ITEM_ZOOM_LENS 482
#define ITEM_METRONOME 483
#define ITEM_IRON_BALL 484
#define ITEM_LAGGING_TAIL 485
#define ITEM_DESTINY_KNOT 486
#define ITEM_BLACK_SLUDGE 487
#define ITEM_GRIP_CLAW 488
#define ITEM_STICKY_BARB 489
#define ITEM_SHED_SHELL 490
#define ITEM_BIG_ROOT 491
#define ITEM_RAZOR_CLAW 492
#define ITEM_RAZOR_FANG 493
#define ITEM_EVIOLITE 494
#define ITEM_FLOAT_STONE 495
#define ITEM_ROCKY_HELMET 496
#define ITEM_AIR_BALLOON 497
#define ITEM_RED_CARD 498
#define ITEM_RING_TARGET 499
#define ITEM_BINDING_BAND 500
#define ITEM_EJECT_BUTTON 501
#define ITEM_WEAKNESS_POLICY 502
#define ITEM_ASSAULT_VEST 503
#define ITEM_SAFETY_GOGGLES 504
#define ITEM_ADRENALINE_ORB 505
#define ITEM_TERRAIN_EXTENDER 506
#define ITEM_PROTECTIVE_PADS 507
#define ITEM_THROAT_SPRAY 508
#define ITEM_EJECT_PACK 509
#define ITEM_HEAVY_DUTY_BOOTS 510
#define ITEM_BLUNDER_POLICY 511
#define ITEM_ROOM_SERVICE 512
#define ITEM_UTILITY_UMBRELLA 513
#define ITEM_ABILITY_SHIELD 758
#define ITEM_CLEAR_AMULET 759
#define ITEM_PUNCHING_GLOVE 760
#define ITEM_COVERT_CLOAK 761
#define ITEM_LOADED_DICE 762
#define ITEM_BOOSTER_ENERGY 764
#define ITEM_MIRROR_HERB 769
}

script EventScript_Shop_Varrick_Treasures {
	message(format("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: Treasures for you!"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			pokemart(Shop_Treasures_1)
		case 6:
		case 7:
		case 9:
		case 10:
			pokemart(Shop_Treasures_2)
		case 11:
		case 12:
		case 13:
		case 15:
			pokemart(Shop_Treasures_3)
		case 16:
		case 17:
		case 18:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
			pokemart(Shop_Treasures_4)
		case 26:
			pokemart(Shop_Filler)
	}
}

mart Shop_Treasures_1 {
	ITEM_HEART_SCALE
}

mart Shop_Treasures_2 {
	ITEM_HEART_SCALE
	ITEM_RED_SHARD
	ITEM_BLUE_SHARD
	ITEM_YELLOW_SHARD
	ITEM_GREEN_SHARD
}

mart Shop_Treasures_3 {
	ITEM_HEART_SCALE
	ITEM_RED_SHARD
	ITEM_BLUE_SHARD
	ITEM_YELLOW_SHARD
	ITEM_GREEN_SHARD
	ITEM_BOTTLE_CAP
}

mart Shop_Treasures_4 {
	ITEM_HEART_SCALE
	ITEM_RED_SHARD
	ITEM_BLUE_SHARD
	ITEM_YELLOW_SHARD
	ITEM_GREEN_SHARD
	ITEM_GOLD_BOTTLE_CAP
	#define ITEM_BUG_TERA_SHARD 774
	#define ITEM_DARK_TERA_SHARD 775
	#define ITEM_DRAGON_TERA_SHARD 776
	#define ITEM_ELECTRIC_TERA_SHARD 777
	#define ITEM_FAIRY_TERA_SHARD 778
	#define ITEM_FIGHTING_TERA_SHARD 779
	#define ITEM_FIRE_TERA_SHARD 780
	#define ITEM_FLYING_TERA_SHARD 781
	#define ITEM_GHOST_TERA_SHARD 782
	#define ITEM_GRASS_TERA_SHARD 783
	#define ITEM_GROUND_TERA_SHARD 784
	#define ITEM_ICE_TERA_SHARD 785
	#define ITEM_NORMAL_TERA_SHARD 786
	#define ITEM_POISON_TERA_SHARD 787
	#define ITEM_PSYCHIC_TERA_SHARD 788
	#define ITEM_ROCK_TERA_SHARD 789
	#define ITEM_STEEL_TERA_SHARD 790
	#define ITEM_WATER_TERA_SHARD 791
}

script EventScript_Shop_Varrick_Other {
	message(format("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: Everything else that I sell, you can find here!"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			pokemart(Shop_Other_1)
		case 6:
		case 7:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 15:
		case 16:
		case 17:
		case 18:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
			pokemart(Shop_Filler)
	}
}

mart Shop_Other_1 {
	ITEM_EXP_CANDY_XS
	ITEM_RED_NECTAR
	ITEM_YELLOW_NECTAR
	ITEM_PINK_NECTAR
	ITEM_PURPLE_NECTAR
	ITEM_LIGHT_BALL
	ITEM_LEEK
	ITEM_THICK_CLUB
	ITEM_LUCKY_PUNCH
	ITEM_METAL_POWDER
	ITEM_QUICK_POWDER
}

script EventScript_Shop_Varrick_MegaStones {
	message(format("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: In case you're missing some Mega Stones, you can buy them here!"))
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			pokemart(Shop_Mega_1)
		case 6:
		case 7:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 15:
		case 16:
		case 17:
		case 18:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
			pokemart(Shop_Filler)
	}
}

mart Shop_Mega_1 {
	ITEM_EXP_CANDY_XS
#define ITEM_VENUSAURITE 292
#define ITEM_CHARIZARDITE_X 293
#define ITEM_CHARIZARDITE_Y 294
#define ITEM_BLASTOISINITE 295
#define ITEM_BEEDRILLITE 296
#define ITEM_PIDGEOTITE 297
#define ITEM_ALAKAZITE 298
#define ITEM_SLOWBRONITE 299
#define ITEM_GENGARITE 300
#define ITEM_KANGASKHANITE 301
#define ITEM_PINSIRITE 302
#define ITEM_GYARADOSITE 303
#define ITEM_AERODACTYLITE 304
#define ITEM_MEWTWONITE_X 305
#define ITEM_MEWTWONITE_Y 306
#define ITEM_AMPHAROSITE 307
#define ITEM_STEELIXITE 308
#define ITEM_SCIZORITE 309
#define ITEM_HERACRONITE 310
#define ITEM_HOUNDOOMINITE 311
#define ITEM_TYRANITARITE 312
#define ITEM_SCEPTILITE 313
#define ITEM_BLAZIKENITE 314
#define ITEM_SWAMPERTITE 315
#define ITEM_GARDEVOIRITE 316
#define ITEM_SABLENITE 317
#define ITEM_MAWILITE 318
#define ITEM_AGGRONITE 319
#define ITEM_MEDICHAMITE 320
#define ITEM_MANECTITE 321
#define ITEM_SHARPEDONITE 322
#define ITEM_CAMERUPTITE 323
#define ITEM_ALTARIANITE 324
#define ITEM_BANETTITE 325
#define ITEM_ABSOLITE 326
#define ITEM_GLALITITE 327
#define ITEM_SALAMENCITE 328
#define ITEM_METAGROSSITE 329
#define ITEM_LATIASITE 330
#define ITEM_LATIOSITE 331
#define ITEM_LOPUNNITE 332
#define ITEM_GARCHOMPITE 333
#define ITEM_LUCARIONITE 334
#define ITEM_ABOMASITE 335
#define ITEM_GALLADITE 336
#define ITEM_AUDINITE 337
#define ITEM_DIANCITE 338
}

script EventScript_Shop_Marie {
	lock
	faceplayer
	if (flag(FLAG_MARIE_INTRO) == false) {
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: Hi. My name is Marie, and welcome to my shop.\p"
				"You're probably wondering what this shop is even for.\p"
				"Let me explain: lots of trainers leave extra eggs at the Daycare.\p"
				"Some trainers mix up which egg has which species of Pokémon.\p"
				"It's my job to help match these eggs with the right trainer.\p"
				"Maybe you'll be able to make your next friend here!"), MSGBOX_DEFAULT)
		setflag(FLAG_MARIE_INTRO)
	}
	call(EventScript_Shop_Marie_MainMenu)
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Au revoir!"))
	release
}

script EventScript_Shop_Marie_MainMenu {
	message(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Hi. Are you ready to meet your next friend?"))
	waitmessage
	dynmultichoice(0, 0, FALSE, 3, 0, DYN_MULTICHOICE_CB_NONE, "Eggs", "Info", "Exit")
	switch(var(VAR_RESULT)) {
		case 0:
			if (flag(FLAG_SETTINGS_NUZLOCKE) && flag(FLAG_MARIE_NUZLOCKE_RECEIVED))
			{
				msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You've already received an Egg from our services. On Nuzlocke mode, you can only get one Egg."))
				return
			}
			if (var(VAR_ZONE) <= 5) {
				msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: I actually don't have any Eggs at the moment.\pCome back again another time!"), MSGBOX_DEFAULT)
				return
			}
			message(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Which type of Egg would you like?"))
			waitmessage
			if (var(VAR_ZONE) > 5) {
				dynmultipush("Elemental Monkey - ¥1000", 0)
			}
			if (var(VAR_ZONE) > 10) {
				dynmultipush("Regional Form - ¥3000", 1)
			}
			if (var(VAR_ZONE) > 10) {
				dynmultipush("Baby Pokémon 1 - ¥3000", 2)
			}
			if (var(VAR_ZONE) > 25) {
				dynmultipush("Baby Pokémon 2 - ¥10000", 3)
			}
			if (var(VAR_ZONE) > 30) {
				dynmultipush("Kanto Starter - ¥10000", 4)
				dynmultipush("Johto Starter - ¥10000", 5)
				dynmultipush("Hoenn Starter - ¥10000", 6)
				dynmultipush("Sinnoh Starter - ¥10000", 7)
				dynmultipush("Unova Starter - ¥10000", 8)
				dynmultipush("Kalos Starter - ¥10000", 9)
				dynmultipush("Alola Starter - ¥10000", 10)
				dynmultipush("Galar Starter - ¥10000", 11)
				dynmultipush("Paldea Starter - ¥10000", 12)
			}
			dynmultipush("Back", 13)
			dynmultistack(21, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
			switch (var(VAR_RESULT)) {
				case 0:
					showmoneybox(0, 0)
					msgbox(format("An egg that contains Pansage, Pansear, or Panpour will cost ¥1000."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						call(EventScript_Shop_Marie_ElementalMonkeyEgg)
					}
					hidemoneybox
					return
				case 1:
					showmoneybox(0, 0)
					msgbox(format("An egg that contains Alolan Meowth, Galarian Zigzagoon, Hisuian Voltorb, or Paldean Wooper will cost ¥3000."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						call(EventScript_Shop_Marie_RegionalFormEgg)
					}
					hidemoneybox
					return
				case 2:
					showmoneybox(0, 0)
					msgbox(format("An egg that contains Smoochum, Elekid, or Magby will cost ¥3000."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						call(EventScript_Shop_Marie_BabyPokemon1Egg)
					}
					hidemoneybox
					return
				case 3:
					showmoneybox(0, 0)
					msgbox(format("An egg that contains Happiny, Togepi, Munchlax, or Riolu will cost ¥10000."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						call(EventScript_Shop_Marie_BabyPokemon2Egg)
					}
					hidemoneybox
					return
				case 13:
				case MULTI_B_PRESSED:
					call(EventScript_Shop_Marie_MainMenu)
			}
		case 1:
			msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here at Marie's Egg Delivery Service, we pair trainers with mixed up Pokémon Eggs.\pEach set of eggs contains a limited number of possible species of Pokémon.\pYou'll know the possibilities of what the egg will hatch into, but you won't know what Pokémon you have until it hatches."), MSGBOX_DEFAULT)
			if (flag(FLAG_SETTINGS_NUZLOCKE)) {
				msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: On Nuzlocke mode, you can only obtain one Egg in total."), MSGBOX_DEFAULT)
			}
			call(EventScript_Shop_Marie_MainMenu)
	}
}

script EventScript_Shop_Marie_ElementalMonkeyEgg {
	checkmoney(1000, 0)
	if (var(VAR_RESULT) == FALSE) {
		msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You don't have enough money.")
		hidemoneybox
		return
	}
	specialvar(VAR_TEMP_2, CalculatePlayerPartyCount)
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		msgbox(format("Your party is full. Choose a Pokémon to send to the PC."), MSGBOX_AUTOCLOSE)
		hidemoneybox
		special(ChoosePartyMon)
		waitstate
		faceplayer
		showmoneybox(0, 0, 0)
		if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
			hidemoneybox
			return
		}
		specialvar(VAR_TEMP_3, ScriptGetPartyMonSpecies)
		bufferspeciesname(2, VAR_TEMP_3)
		copyvar(VAR_TEMP_3, VAR_0x8004) // used in SendChosenMonToPC
		msgbox(format("Are you sure you want to send your {STR_VAR_3} to the PC?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			hidemoneybox
			return
		}
	}
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		setflag(FLAG_MARIE_NUZLOCKE_RECEIVED)
	}
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		special(SendChosenMonToPC)
		setvar(VAR_TEMP_2, 5) // gift mon appears always in last slot if party initially full
	}
	removemoney(1000)
	updatemoneybox
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Thank you very much…"), MSGBOX_DEFAULT)
	hidemoneybox
	random(3)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_1, SPECIES_PANSAGE)
		case 1:
			setvar(VAR_TEMP_1, SPECIES_PANSEAR)
		case 2:
			setvar(VAR_TEMP_1, SPECIES_PANPOUR)
	}
	giveegg(VAR_TEMP_1)
	setmonmetlocation(VAR_TEMP_2, 244)
	msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here's your Egg.", MSGBOX_DEFAULT)
	playfanfare(MUS_OBTAIN_ITEM)
	message(format("{PLAYER} received the Egg!"))
	waitmessage
	waitfanfare
}

script EventScript_Shop_Marie_RegionalFormEgg {
	checkmoney(3000, 0)
	if (var(VAR_RESULT) == FALSE) {
		msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You don't have enough money.")
		hidemoneybox
		return
	}
	specialvar(VAR_TEMP_2, CalculatePlayerPartyCount)
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		msgbox(format("Your party is full. Choose a Pokémon to send to the PC."), MSGBOX_AUTOCLOSE)
		hidemoneybox
		special(ChoosePartyMon)
		waitstate
		faceplayer
		showmoneybox(0, 0, 0)
		if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
			hidemoneybox
			return
		}
		specialvar(VAR_TEMP_3, ScriptGetPartyMonSpecies)
		bufferspeciesname(2, VAR_TEMP_3)
		copyvar(VAR_TEMP_3, VAR_0x8004) // used in SendChosenMonToPC
		msgbox(format("Are you sure you want to send your {STR_VAR_3} to the PC?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			hidemoneybox
			return
		}
	}
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		setflag(FLAG_MARIE_NUZLOCKE_RECEIVED)
	}
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		special(SendChosenMonToPC)
		setvar(VAR_TEMP_2, 5) // gift mon appears always in last slot if party initially full
	}
	removemoney(3000)
	updatemoneybox
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Thank you very much…"), MSGBOX_DEFAULT)
	hidemoneybox
	random(4)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_1, SPECIES_MEOWTH_ALOLA)
		case 1:
			setvar(VAR_TEMP_1, SPECIES_ZIGZAGOON_GALAR)
		case 2:
			setvar(VAR_TEMP_1, SPECIES_VOLTORB_HISUI)
		case 3:
			setvar(VAR_TEMP_1, SPECIES_WOOPER_PALDEA)
	}
	giveegg(VAR_TEMP_1)
	setmonmetlocation(VAR_TEMP_2, 244)
	msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here's your Egg.", MSGBOX_DEFAULT)
	playfanfare(MUS_OBTAIN_ITEM)
	message(format("{PLAYER} received the Egg!"))
	waitmessage
	waitfanfare
}

script EventScript_Shop_Marie_BabyPokemon1Egg {
	checkmoney(3000, 0)
	if (var(VAR_RESULT) == FALSE) {
		msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You don't have enough money.")
		hidemoneybox
		return
	}
	specialvar(VAR_TEMP_2, CalculatePlayerPartyCount)
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		msgbox(format("Your party is full. Choose a Pokémon to send to the PC."), MSGBOX_AUTOCLOSE)
		hidemoneybox
		special(ChoosePartyMon)
		waitstate
		faceplayer
		showmoneybox(0, 0, 0)
		if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
			hidemoneybox
			return
		}
		specialvar(VAR_TEMP_3, ScriptGetPartyMonSpecies)
		bufferspeciesname(2, VAR_TEMP_3)
		copyvar(VAR_TEMP_3, VAR_0x8004) // used in SendChosenMonToPC
		msgbox(format("Are you sure you want to send your {STR_VAR_3} to the PC?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			hidemoneybox
			return
		}
	}
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		setflag(FLAG_MARIE_NUZLOCKE_RECEIVED)
	}
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		special(SendChosenMonToPC)
		setvar(VAR_TEMP_2, 5) // gift mon appears always in last slot if party initially full
	}
	removemoney(3000)
	updatemoneybox
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Thank you very much…"), MSGBOX_DEFAULT)
	hidemoneybox
	random(3)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_1, SPECIES_SMOOCHUM)
		case 1:
			setvar(VAR_TEMP_1, SPECIES_ELEKID)
		case 2:
			setvar(VAR_TEMP_1, SPECIES_MAGBY)
	}
	giveegg(VAR_TEMP_1)
	setmonmetlocation(VAR_TEMP_2, 244)
	msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here's your Egg.", MSGBOX_DEFAULT)
	playfanfare(MUS_OBTAIN_ITEM)
	message(format("{PLAYER} received the Egg!"))
	waitmessage
	waitfanfare
}

script EventScript_Shop_Marie_BabyPokemon2Egg {
	checkmoney(10000, 0)
	if (var(VAR_RESULT) == FALSE) {
		msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: You don't have enough money.")
		hidemoneybox
		return
	}
	specialvar(VAR_TEMP_2, CalculatePlayerPartyCount)
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		msgbox(format("Your party is full. Choose a Pokémon to send to the PC."), MSGBOX_AUTOCLOSE)
		hidemoneybox
		special(ChoosePartyMon)
		waitstate
		faceplayer
		showmoneybox(0, 0, 0)
		if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
			hidemoneybox
			return
		}
		specialvar(VAR_TEMP_3, ScriptGetPartyMonSpecies)
		bufferspeciesname(2, VAR_TEMP_3)
		copyvar(VAR_TEMP_3, VAR_0x8004) // used in SendChosenMonToPC
		msgbox(format("Are you sure you want to send your {STR_VAR_3} to the PC?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			hidemoneybox
			return
		}
	}
	if (flag(FLAG_SETTINGS_NUZLOCKE) == true) {
		setflag(FLAG_MARIE_NUZLOCKE_RECEIVED)
	}
	if (var(VAR_TEMP_2) == PARTY_SIZE) {
		special(SendChosenMonToPC)
		setvar(VAR_TEMP_2, 5) // gift mon appears always in last slot if party initially full
	}
	removemoney(10000)
	updatemoneybox
	msgbox(format("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Thank you very much…"), MSGBOX_DEFAULT)
	hidemoneybox
	random(4)
	switch (var(VAR_RESULT)) {
		case 0:
			setvar(VAR_TEMP_1, SPECIES_HAPPINY)
		case 1:
			setvar(VAR_TEMP_1, SPECIES_TOGEPI)
		case 2:
			setvar(VAR_TEMP_1, SPECIES_MUNCHLAX)
		case 3:
			setvar(VAR_TEMP_1, SPECIES_RIOLU)
	}
	giveegg(VAR_TEMP_1)
	setmonmetlocation(VAR_TEMP_2, 244)
	msgbox("{COLOR BLUE}Marie{COLOR DARK_GRAY}: Here's your Egg.", MSGBOX_DEFAULT)
	playfanfare(MUS_OBTAIN_ITEM)
	message(format("{PLAYER} received the Egg!"))
	waitmessage
	waitfanfare
}

script EventScript_Shop_Lelouch {
	lock
	faceplayer
	if (flag(FLAG_LELOUCH_INTRO) == false) {
		msgbox("{COLOR BLUE}???{COLOR DARK_GRAY}: You… What is your name?\p{COLOR BLUE}???{COLOR DARK_GRAY}: {PLAYER}? Curious…\nThat's a funny name…", MSGBOX_AUTOCLOSE)
		delay(16)
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: You may call me Lelouch.\p{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I provide a variety of services to improve one's Pokémon.\pBut I require special items in exchange for my services."))
		setflag(FLAG_LELOUCH_INTRO)
	}
	message("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: For the right price…\nWelcome to Lelouch's Services Stand.")
	waitmessage
	call(EventScript_Shop_Lelouch_Services)
	msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Farewell.")
	release
}

script EventScript_Shop_Lelouch_Services {
	while {
		dynmultipush("Move Reminder", 0)
		if (var(VAR_ZONE) > 5) {
			dynmultipush("Move Tutor", 1)
		}
		dynmultipush("Exit", 3)
		dynmultistack(0, 0, FALSE, 6, 0, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case 0:
				call(EventScript_Shop_Lelouch_MoveReminder)
			case 1:
				call(EventScript_Shop_Lelouch_MoveTutor)
			case 3:
			case MULTI_B_PRESSED:
				return
		}
		message("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Anything else for you?")
		waitmessage
	}
}

text gText_Lelouch_NotEnoughColor {
	"{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You don't have any Shards\nof that color."
}

script EventScript_Shop_Lelouch_Training {
	checkitem(ITEM_RED_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Choose which training\nregiment you would like.", MSGBOX_DEFAULT)
	dynmultipush("Experience Training", 0)
	if ((var(VAR_DIFFICULTY) >= DIFFICULTY_HARD) && var(VAR_ZONE) > 25) {
		dynmultipush("EV Training", 1)
	}
	dynmultipush("Exit", 2)
	dynmultistack(0, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
	switch(var(VAR_RESULT)) {
		case 0:
			msgbox(gText_Lelouch_Exp, MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				// special(ChoosePartyMonForTraining) // TODO
				waitstate
				if (var(VAR_0x8004) == 1) {
					msgbox(gText_Lelouch_ExpTrainingFinished, MSGBOX_DEFAULT)
					msgbox(gText_Lelouch_PayRed, MSGBOX_DEFAULT)
					removeitem(ITEM_RED_SHARD, 1)
				} else {
					msgbox(gText_Lelouch_DidNotTrain)
				}
				return
			}
		case 1:
			msgbox(gText_Lelouch_EV, MSGBOX_YESNO)
			if (var(VAR_RESULT) == YES) {
				special(ChoosePartyMon)
				waitstate
				if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
					msgbox(gText_Lelouch_DidNotTrain, MSGBOX_DEFAULT)
				} else {
					specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
					if (var(VAR_RESULT) == SPECIES_EGG) {
						msgbox("I can't train an Egg!", MSGBOX_DEFAULT)
					} else {
						setvar(VAR_TEMP_F, 0)
						specialvar(VAR_TEMP_0, ScriptGetPartyMonSpecies)
						bufferspeciesname(0, VAR_TEMP_0)
						msgbox(gText_Lelouch_ChooseHPEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_9, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_9, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_9, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_9, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_9, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseAttackEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_A, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_A, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_A, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_A, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_A, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseDefenseEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_B, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_B, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_B, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_B, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_B, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseSpecialAttackEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_C, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_C, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_C, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_C, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_C, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseSpecialDefenseEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_D, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_D, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_D, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_D, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_D, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						msgbox(gText_Lelouch_ChooseSpeedEV, MSGBOX_DEFAULT)
						dynmultichoice(0, 0, FALSE, 6, 0, DYN_MULTICHOICE_CB_NONE, "252", "200", "100", "4", "0", "Cancel")
						switch(var(VAR_RESULT)) {
							case 0:
								setvar(VAR_TEMP_E, 252)
								addvar(VAR_TEMP_F, 252)
							case 1:
								setvar(VAR_TEMP_E, 200)
								addvar(VAR_TEMP_F, 200)
							case 2:
								setvar(VAR_TEMP_E, 100)
								addvar(VAR_TEMP_F, 100)
							case 3:
								setvar(VAR_TEMP_E, 4)
								addvar(VAR_TEMP_F, 4)
							case 4:
								setvar(VAR_TEMP_E, 0)
							case 5:
							case MULTI_B_PRESSED:
								return
						}
						if (var(VAR_TEMP_F) > 510) {
							msgbox(gText_Lelouch_TooManyEVs, MSGBOX_DEFAULT)
							return
						}
						msgbox(gText_Lelouch_CheckEVs, MSGBOX_YESNO)
						if (var(VAR_RESULT) == NO) {
							return
						}
						special(CheckLeadMonCute) // Sets the EVs
						playse(SE_EXP_MAX)
						waitse
						msgbox(gText_Lelouch_ChangedEVs, MSGBOX_DEFAULT)
						msgbox(gText_Lelouch_PayRed, MSGBOX_DEFAULT)
						removeitem(ITEM_RED_SHARD, 1)
					}
				}
				return
			}
		case 2:
		case MULTI_B_PRESSED:
			return
	}
	return
}

text gText_Lelouch_EV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: With EV Training, you can set one Pokémon's EVs at the cost of one Red Shard.\pWould you like to start an EV Training session?")
}

text gText_Lelouch_ChooseHPEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s HP EV to be?")
}

text gText_Lelouch_ChooseAttackEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Attack EV to be?")
}

text gText_Lelouch_ChooseDefenseEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Defense EV to be?")
}

text gText_Lelouch_ChooseSpecialAttackEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Sp. Atk EV to be?")
}

text gText_Lelouch_ChooseSpecialDefenseEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Sp. Def EV to be?")
}

text gText_Lelouch_ChooseSpeedEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Speed EV to be?")
}

text gText_Lelouch_TooManyEVs {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You've selected a total of EVs greater than 510. Pokémon can have at maximum 510 EVs.")
}

text gText_Lelouch_CheckEVs {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Are you sure you wish to set {STR_VAR_1}'s EVs to these values?")
}

text gText_Lelouch_ChangedEVs {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I've changed your {STR_VAR_1}'s EVs to your requested values.")
}

script EventScript_Shop_Lelouch_MoveReminder {
	msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Move Reminder services cost one Heart Scale.\pWould you like me to teach a forgotten move to your Pokémon?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		return
	}
	checkitem(ITEM_HEART_SCALE, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You don't have any Heart Scales."))
		return
	}
	while {
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which Pokémon should\nrelearn a move?", MSGBOX_DEFAULT)
		special(ChooseMonForMoveRelearner)
		waitstate
		if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
			return
		}
		special(IsSelectedMonEgg)
		if (var(VAR_RESULT) == TRUE) {
			msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: That is an Egg.", MSGBOX_DEFAULT)
			continue
		}
		if (var(VAR_0x8005) == 0) {
			msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: That Pokémon cannot\nrelearn any moves.", MSGBOX_DEFAULT)
			continue
		}
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which move should it\nrelearn?", MSGBOX_DEFAULT)
		special(TeachMoveRelearnerMove)
		waitstate
		if (var(VAR_0x8004) == 0) {
			continue
		}
		msgbox(format("{PLAYER} handed over 1 Heart Scale."))
		removeitem(ITEM_HEART_SCALE)
		break
	}
	return
}

script EventScript_Shop_Lelouch_Improvement {
	checkitem(ITEM_YELLOW_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox("Filler text for EventScript_Shop_Lelouch_Improvement")
}

script EventScript_Shop_Lelouch_MoveTutor {
	while {
		message(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which move should I teach?"))
		waitmessage
		dynmultipush("Helping Hand", MOVE_HELPING_HAND)
		if (var(VAR_ZONE) > 10) {
			dynmultipush("Electroweb", 1)
			dynmultipush("Icy Wind", 2)
			dynmultipush("Low Kick", 3)
			dynmultipush("Heal Bell", 4)
			dynmultipush("Synthesis", 6)
			dynmultipush("Pain Split", 7)
			dynmultipush("Defog", 8)
			dynmultipush("Trick", 9)
		}
		// if (var(VAR_ZONE) > 15) {
		// 	dynmultipush("", 1)
		// 	dynmultipush("", 2)
		// 	dynmultipush("", 3)
		// 	dynmultipush("", 4)
		// 	dynmultipush("", 5)
		// 	dynmultipush("", 6)
		// 	dynmultipush("", 7)
		// 	dynmultipush("", 8)
		// 	dynmultipush("", 9)
		// 	dynmultipush("", 0)
		// }
		// if (var(VAR_ZONE) > 20) {
		// 	dynmultipush("", 1)
		// 	dynmultipush("", 2)
		// 	dynmultipush("", 3)
		// 	dynmultipush("", 4)
		// 	dynmultipush("", 5)
		// 	dynmultipush("", 6)
		// 	dynmultipush("", 7)
		// 	dynmultipush("", 8)
		// 	dynmultipush("", 9)
		// 	dynmultipush("", 0)
		// }
		dynmultipush("Exit", 50)
		dynmultistack(0, 0, FALSE, 6, FALSE, 0, DYN_MULTICHOICE_CB_NONE)
		switch (var(VAR_RESULT)) {
			case MOVE_HELPING_HAND:
				setvar(VAR_TEMP_0, MOVE_HELPING_HAND)
				setvar(VAR_0x8005, MOVE_HELPING_HAND)
			case 1:
				setvar(VAR_TEMP_0, MOVE_ELECTROWEB)
				setvar(VAR_0x8005, MOVE_ELECTROWEB)
			case 2:
				setvar(VAR_TEMP_0, MOVE_ICY_WIND)
				setvar(VAR_0x8005, MOVE_ICY_WIND)
			case 3:
				setvar(VAR_TEMP_0, MOVE_LOW_KICK)
				setvar(VAR_0x8005, MOVE_LOW_KICK)
			case 4:
				setvar(VAR_TEMP_0, MOVE_HEAL_BELL)
				setvar(VAR_0x8005, MOVE_HEAL_BELL)
			case 5:
				setvar(VAR_TEMP_0, MOVE_HELPING_HAND)
				setvar(VAR_0x8005, MOVE_HELPING_HAND)
			case 6:
				setvar(VAR_TEMP_0, MOVE_SYNTHESIS)
				setvar(VAR_0x8005, MOVE_SYNTHESIS)
			case 7:
				setvar(VAR_TEMP_0, MOVE_PAIN_SPLIT)
				setvar(VAR_0x8005, MOVE_PAIN_SPLIT)
			case 8:
				setvar(VAR_TEMP_0, MOVE_DEFOG)
				setvar(VAR_0x8005, MOVE_DEFOG)
			case 9:
				setvar(VAR_TEMP_0, MOVE_TRICK)
				setvar(VAR_0x8005, MOVE_TRICK)
			// case 6:
			// 	setvar(VAR_TEMP_0, MOVE_STEALTH_ROCK)
			// 	setvar(VAR_0x8005, MOVE_STEALTH_ROCK)
			// case 8:
			// 	setvar(VAR_TEMP_0, MOVE_FIRE_PUNCH)
			// 	setvar(VAR_0x8005, MOVE_FIRE_PUNCH)
			// case 9:
			// 	setvar(VAR_TEMP_0, MOVE_ICE_PUNCH)
			// 	setvar(VAR_0x8005, MOVE_ICE_PUNCH)
			// case 10:
			// 	setvar(VAR_TEMP_0, MOVE_THUNDER_PUNCH)
			// 	setvar(VAR_0x8005, MOVE_THUNDER_PUNCH)
			// case 11:
			// 	setvar(VAR_TEMP_0, MOVE_FLIP_TURN)
			// 	setvar(VAR_0x8005, MOVE_FLIP_TURN)
			// case 12:
			// 	setvar(VAR_TEMP_0, MOVE_U_TURN)
			// 	setvar(VAR_0x8005, MOVE_U_TURN)
			// case 13:
			// 	setvar(VAR_TEMP_0, MOVE_DEFOG)
			// 	setvar(VAR_0x8005, MOVE_DEFOG)
			// case 14:
			// 	setvar(VAR_TEMP_0, MOVE_PAIN_SPLIT)
			// 	setvar(VAR_0x8005, MOVE_PAIN_SPLIT)
			// case 15:
			// 	setvar(VAR_TEMP_0, MOVE_TRICK)
			// 	setvar(VAR_0x8005, MOVE_TRICK)
			// case 16:
			// 	setvar(VAR_TEMP_0, MOVE_BOUNCE)
			// 	setvar(VAR_0x8005, MOVE_BOUNCE)
			// case 17:
			// 	setvar(VAR_TEMP_0, MOVE_IRON_HEAD)
			// 	setvar(VAR_0x8005, MOVE_IRON_HEAD)
			// case 18:
			// 	setvar(VAR_TEMP_0, MOVE_KNOCK_OFF)
			// 	setvar(VAR_0x8005, MOVE_KNOCK_OFF)
			// case 19:
			// 	setvar(VAR_TEMP_0, MOVE_VOLT_SWITCH)
			// 	setvar(VAR_0x8005, MOVE_VOLT_SWITCH)
			// case 20:
			// 	setvar(VAR_TEMP_0, MOVE_ZEN_HEADBUTT)
			// 	setvar(VAR_0x8005, MOVE_ZEN_HEADBUTT)
			// case 21:
			// 	setvar(VAR_TEMP_0, MOVE_ROOST)
			// 	setvar(VAR_0x8005, MOVE_ROOST)
			// case 22:
			// 	setvar(VAR_TEMP_0, MOVE_SYNTHESIS)
			// 	setvar(VAR_0x8005, MOVE_SYNTHESIS)
			// case 23:
			// 	setvar(VAR_TEMP_0, MOVE_TAILWIND)
			// 	setvar(VAR_0x8005, MOVE_TAILWIND)
			// case 24:
			// 	setvar(VAR_TEMP_0, MOVE_DRACO_METEOR)
			// 	setvar(VAR_0x8005, MOVE_DRACO_METEOR)
			// case 25:
			// 	setvar(VAR_TEMP_0, MOVE_EXPANDING_FORCE)
			// 	setvar(VAR_0x8005, MOVE_EXPANDING_FORCE)
			// case 26:
			// 	setvar(VAR_TEMP_0, MOVE_HEAT_WAVE)
			// 	setvar(VAR_0x8005, MOVE_HEAT_WAVE)
			// case 27:
			// 	setvar(VAR_TEMP_0, MOVE_POLTERGEIST)
			// 	setvar(VAR_0x8005, MOVE_POLTERGEIST)
			// case 28:
			// 	setvar(VAR_TEMP_0, MOVE_POWER_WHIP)
			// 	setvar(VAR_0x8005, MOVE_POWER_WHIP)
			// case 29:
			// 	setvar(VAR_TEMP_0, MOVE_SUPERPOWER)
			// 	setvar(VAR_0x8005, MOVE_SUPERPOWER)
			// case 30:
			// 	setvar(VAR_TEMP_0, MOVE_SWORDS_DANCE)
			// 	setvar(VAR_0x8005, MOVE_SWORDS_DANCE)
			// case 31:
			// 	setvar(VAR_TEMP_0, MOVE_NASTY_PLOT)
			// 	setvar(VAR_0x8005, MOVE_NASTY_PLOT)
			case 50:
			case MULTI_B_PRESSED:
				return
		}
		buffermovename(0, VAR_TEMP_0)
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You want me to teach the move\n{STR_VAR_1}?", MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			continue
		}
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which Pokémon should learn\n{STR_VAR_1}?", MSGBOX_DEFAULT)
		special(ChooseMonForMoveTutor)
		waitstate
		lock
		faceplayer
		if (var(VAR_RESULT) == 0) {
			continue
		}
		msgbox(gText_Lelouch_PayBlue, MSGBOX_DEFAULT)
		removeitem(ITEM_BLUE_SHARD)
		return
	}
}

script EventScript_Shop_Lelouch_Other {
	checkitem(ITEM_GREEN_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I offer nature changing services at the cost of one Green Shard.\pFirst, choose a Pokémon."))
	special(ChoosePartyMon)
	waitstate
	if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
		return
	} else {
		specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
		if (var(VAR_RESULT) == SPECIES_EGG) {
			msgbox("No eggs!")
		} else {
			specialvar(VAR_TEMP_1, ScriptGetPartyMonSpecies)
			bufferspeciesname(0, VAR_TEMP_1)
			copyvar(VAR_TEMP_1, VAR_0x8004)
			msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which nature would you like your {STR_VAR_1} to have?"), MSGBOX_DEFAULT)
			dynmultichoice(0, 0, FALSE, 5, 0, DYN_MULTICHOICE_CB_NONE, "Lonely", "Adamant", "Naughty", "Brave", "Bold", "Impish", "Lax", "Relaxed", "Modest", "Mild", "Rash", "Quiet", "Calm", "Gentle", "Careful", "Sassy", "Timid", "Hasty", "Jolly", "Naive", "Serious")
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_2, 1)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Lonely, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 1:
					setvar(VAR_TEMP_2, 3)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Adamant, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 2:
					setvar(VAR_TEMP_2, 4)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Naughty, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 3:
					setvar(VAR_TEMP_2, 2)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Brave, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 4:
					setvar(VAR_TEMP_2, 5)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Bold, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 5:
					setvar(VAR_TEMP_2, 8)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Impish, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 6:
					setvar(VAR_TEMP_2, 9)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Lax, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 7:
					setvar(VAR_TEMP_2, 7)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Relaxed, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 8:
					setvar(VAR_TEMP_2, 15)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Modest, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 9:
					setvar(VAR_TEMP_2, 16)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Mild, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 10:
					setvar(VAR_TEMP_2, 19)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Rash, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 11:
					setvar(VAR_TEMP_2, 17)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Quiet, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 12:
					setvar(VAR_TEMP_2, 20)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Calm, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 13:
					setvar(VAR_TEMP_2, 21)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Gentle, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 14:
					setvar(VAR_TEMP_2, 23)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Careful, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 15:
					setvar(VAR_TEMP_2, 22)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Sassy, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 16:
					setvar(VAR_TEMP_2, 10)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Timid, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 17:
					setvar(VAR_TEMP_2, 11)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Hasty, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 18:
					setvar(VAR_TEMP_2, 13)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Jolly, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 19:
					setvar(VAR_TEMP_2, 14)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Naive, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 20:
					setvar(VAR_TEMP_2, 12)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Serious, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case MULTI_B_PRESSED:
					return
			}
			playse(SE_EXP_MAX)
			waitse
			msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I've changed your {STR_VAR_1}'s nature to the requested nature."))
			special(SetMonNature)
			msgbox(gText_Lelouch_PayGreen)
			removeitem(ITEM_GREEN_SHARD, 1)
		}
	}
	return
}

script EventScript_Twin {
	lock
	faceplayer
	msgbox(format("I love watching Furret walk!"))
	playbgm(MUS_BW_ACCUMULA, FALSE)
	release
}

script EventScript_Furret {
	lock
	faceplayer
	playmoncry(SPECIES_FURRET, CRY_MODE_NORMAL)
	msgbox(format("Furr?"))
	waitmoncry
	release
	end
}

script EventScript_Ponyta {
	lock
	faceplayer
	playmoncry(SPECIES_PONYTA, CRY_MODE_NORMAL)
	msgbox(format("Pony! Ponyta!"))
	waitmoncry
	release
	end
}

script EventScript_Tyrogue {
	lock
	faceplayer
	playmoncry(SPECIES_TYROGUE, CRY_MODE_NORMAL)
	msgbox(format("T-Tyrogue!"))
	waitmoncry
	release
	end
}

script EventScript_MeowthAlola {
	lock
	faceplayer
	playmoncry(SPECIES_MEOWTH_ALOLA, CRY_MODE_NORMAL)
	msgbox(format("Meee-owth!"))
	waitmoncry
	release
	end
}

script EventScript_Marill {
	lock
	faceplayer
	playmoncry(SPECIES_MARILL, CRY_MODE_NORMAL)
	msgbox(format("Mari! Mari!"))
	waitmoncry
	release
	end
}

script EventScript_Magnemite {
	lock
	faceplayer
	playmoncry(SPECIES_MAGNEMITE, CRY_MODE_NORMAL)
	msgbox(format("BZZT!"))
	waitmoncry
	release
	end
}

script ZoneSanctuary_EventScript_SchoolKidF {
	lock
	faceplayer
	msgbox(format("Did you know? Honey can be used to start wild Double Battles in the field!\pYou can also slather some on a Golden Tree to start a Double Battle there!"))
	release
}
